# https://taskfile.dev

version: "3"

dotenv: ["env/dev.env"]

tasks:
  entrypoint:jsonApi:
    cmds:
      - go build -o build/netsly cmd/main.go
      - ./build/netsly -entrypoint jsonApi

  entrypoint:webApp:
    cmds:
      - go build -o build/netsly cmd/main.go
      - ./build/netsly -entrypoint webApp

  entrypoint:grpcApi:
    cmds:
      - go build -o build/netsly cmd/main.go
      - ./build/netsly -entrypoint grpcApi

  entrypoint:seed:
    cmds:
      - go build -o build/netsly cmd/main.go
      - ./build/netsly -entrypoint seed

  test:unit:
    cmd: go test ./internal/application/ -count=1

  test:integration:
    cmds:
      - task: test:integration:persistence
      - task: test:integration:service

  test:integration:persistence:
    cmd: go test ./test/persistence -count=1

  test:integration:service:
    cmd: go test ./test/service -count=1

  generate:domain:mocks:
    cmd: ./bin/mockery --config gen/mock/mockery.yaml

  generate:presentation:jsonApi:main:
    desc: Generate docs and code for the HTTP presentation from the OpenAPI spec directory
    cmds:
      - task: generate:presentation:jsonApi:rest:single_openapi_config_file
      - task: generate:presentation:jsonApi:rest:docs
      - task: generate:presentation:jsonApi:rest:code

  generate:presentation:jsonApi:rest:single_openapi_config_file:
    cmd: docker run --rm -v ${PWD}:/spec:Z
      redocly/cli bundle
      -o /spec/gen/openapi/openapi.yaml
      /spec/internal/presentation/jsonApi/rest/schema/openapi.yaml

  generate:presentation:jsonApi:rest:docs:
    cmd: docker run --rm -v ${PWD}:/spec:Z
      redocly/cli build-docs
      -o /spec/internal/presentation/jsonApi/static/docs/rest.html
      /spec/internal/presentation/jsonApi/rest/schema/openapi.yaml

  generate:presentation:jsonApi:rest:code:
    cmd: go generate gen/ogen/generate.go

  generate:presentation:webApp:tailwindcss:
    cmd: npx tailwindcss
      -c internal/presentation/webApp/tailwind.config.js
      -i internal/presentation/webApp/static/style/input.css
      -o internal/presentation/webApp/static/style/style.css

  generate:presentation:grpcApi:code:
    cmd: ./bin/protoc internal/presentation/grpcApi/proto/*.proto
      --go_out=gen/pb
      --go_opt=paths=source_relative
      --go-grpc_out=gen/pb
      --go-grpc_opt=paths=source_relative
      --proto_path=internal/presentation/grpcApi/proto

  generate:persistence:boilerSqlite:code:
    cmd: ./bin/sqlboiler sqlite3 -c internal/infrastructure/persistence/implementation/boilerSqlite/sqlboiler.toml

  infrastructure:down:
    cmds:
      - task: infrastructure:local:down
      - task: infrastructure:terraform:down

  infrastructure:local:down:
    cmd: rm -r infra/local/*

  # Note, that to start terraform you need to have kubernetes cluster configured and running
  # (for example with minikube)
  infrastructure:terraform:up:
    cmd: cd infra/terraform &&
      terraform init &&
      terraform apply

  infrastructure:terraform:down:
    cmd: terraform destroy -auto-approve

  other:run_evans:
    cmds:
      - evans -p 3030 -r repl
