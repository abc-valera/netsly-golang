// Code generated by mockery. DO NOT EDIT.

package mockQuery

import (
	context "context"

	model "github.com/abc-valera/netsly-api-golang/internal/domain/persistence/model"
	mock "github.com/stretchr/testify/mock"

	spec "github.com/abc-valera/netsly-api-golang/internal/domain/persistence/query/spec"
)

// RoomMessage is an autogenerated mock type for the IRoomMessage type
type RoomMessage struct {
	mock.Mock
}

type RoomMessage_Expecter struct {
	mock *mock.Mock
}

func (_m *RoomMessage) EXPECT() *RoomMessage_Expecter {
	return &RoomMessage_Expecter{mock: &_m.Mock}
}

// GetAllByRoomID provides a mock function with given fields: ctx, roomID, _a2
func (_m *RoomMessage) GetAllByRoomID(ctx context.Context, roomID string, _a2 spec.SelectParams) (model.RoomMessages, error) {
	ret := _m.Called(ctx, roomID, _a2)

	if len(ret) == 0 {
		panic("no return value specified for GetAllByRoomID")
	}

	var r0 model.RoomMessages
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, spec.SelectParams) (model.RoomMessages, error)); ok {
		return rf(ctx, roomID, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, spec.SelectParams) model.RoomMessages); ok {
		r0 = rf(ctx, roomID, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.RoomMessages)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, spec.SelectParams) error); ok {
		r1 = rf(ctx, roomID, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoomMessage_GetAllByRoomID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByRoomID'
type RoomMessage_GetAllByRoomID_Call struct {
	*mock.Call
}

// GetAllByRoomID is a helper method to define mock.On call
//   - ctx context.Context
//   - roomID string
//   - _a2 spec.SelectParams
func (_e *RoomMessage_Expecter) GetAllByRoomID(ctx interface{}, roomID interface{}, _a2 interface{}) *RoomMessage_GetAllByRoomID_Call {
	return &RoomMessage_GetAllByRoomID_Call{Call: _e.mock.On("GetAllByRoomID", ctx, roomID, _a2)}
}

func (_c *RoomMessage_GetAllByRoomID_Call) Run(run func(ctx context.Context, roomID string, _a2 spec.SelectParams)) *RoomMessage_GetAllByRoomID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(spec.SelectParams))
	})
	return _c
}

func (_c *RoomMessage_GetAllByRoomID_Call) Return(_a0 model.RoomMessages, _a1 error) *RoomMessage_GetAllByRoomID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoomMessage_GetAllByRoomID_Call) RunAndReturn(run func(context.Context, string, spec.SelectParams) (model.RoomMessages, error)) *RoomMessage_GetAllByRoomID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *RoomMessage) GetByID(ctx context.Context, id string) (model.RoomMessage, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.RoomMessage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.RoomMessage, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.RoomMessage); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.RoomMessage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoomMessage_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type RoomMessage_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *RoomMessage_Expecter) GetByID(ctx interface{}, id interface{}) *RoomMessage_GetByID_Call {
	return &RoomMessage_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *RoomMessage_GetByID_Call) Run(run func(ctx context.Context, id string)) *RoomMessage_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RoomMessage_GetByID_Call) Return(_a0 model.RoomMessage, _a1 error) *RoomMessage_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoomMessage_GetByID_Call) RunAndReturn(run func(context.Context, string) (model.RoomMessage, error)) *RoomMessage_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// SearchAllByText provides a mock function with given fields: ctx, keyword, _a2
func (_m *RoomMessage) SearchAllByText(ctx context.Context, keyword string, _a2 spec.SelectParams) (model.RoomMessages, error) {
	ret := _m.Called(ctx, keyword, _a2)

	if len(ret) == 0 {
		panic("no return value specified for SearchAllByText")
	}

	var r0 model.RoomMessages
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, spec.SelectParams) (model.RoomMessages, error)); ok {
		return rf(ctx, keyword, _a2)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, spec.SelectParams) model.RoomMessages); ok {
		r0 = rf(ctx, keyword, _a2)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.RoomMessages)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, spec.SelectParams) error); ok {
		r1 = rf(ctx, keyword, _a2)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoomMessage_SearchAllByText_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchAllByText'
type RoomMessage_SearchAllByText_Call struct {
	*mock.Call
}

// SearchAllByText is a helper method to define mock.On call
//   - ctx context.Context
//   - keyword string
//   - _a2 spec.SelectParams
func (_e *RoomMessage_Expecter) SearchAllByText(ctx interface{}, keyword interface{}, _a2 interface{}) *RoomMessage_SearchAllByText_Call {
	return &RoomMessage_SearchAllByText_Call{Call: _e.mock.On("SearchAllByText", ctx, keyword, _a2)}
}

func (_c *RoomMessage_SearchAllByText_Call) Run(run func(ctx context.Context, keyword string, _a2 spec.SelectParams)) *RoomMessage_SearchAllByText_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(spec.SelectParams))
	})
	return _c
}

func (_c *RoomMessage_SearchAllByText_Call) Return(_a0 model.RoomMessages, _a1 error) *RoomMessage_SearchAllByText_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoomMessage_SearchAllByText_Call) RunAndReturn(run func(context.Context, string, spec.SelectParams) (model.RoomMessages, error)) *RoomMessage_SearchAllByText_Call {
	_c.Call.Return(run)
	return _c
}

// NewRoomMessage creates a new instance of RoomMessage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoomMessage(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoomMessage {
	mock := &RoomMessage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
