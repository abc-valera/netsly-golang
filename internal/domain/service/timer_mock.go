// Code generated by mockery. DO NOT EDIT.

package service

import (
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockTimer is an autogenerated mock type for the Timer type
type MockTimer struct {
	mock.Mock
}

type MockTimer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTimer) EXPECT() *MockTimer_Expecter {
	return &MockTimer_Expecter{mock: &_m.Mock}
}

// Now provides a mock function with given fields:
func (_m *MockTimer) Now() time.Time {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Now")
	}

	var r0 time.Time
	if rf, ok := ret.Get(0).(func() time.Time); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Time)
	}

	return r0
}

// MockTimer_Now_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Now'
type MockTimer_Now_Call struct {
	*mock.Call
}

// Now is a helper method to define mock.On call
func (_e *MockTimer_Expecter) Now() *MockTimer_Now_Call {
	return &MockTimer_Now_Call{Call: _e.mock.On("Now")}
}

func (_c *MockTimer_Now_Call) Run(run func()) *MockTimer_Now_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockTimer_Now_Call) Return(_a0 time.Time) *MockTimer_Now_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTimer_Now_Call) RunAndReturn(run func() time.Time) *MockTimer_Now_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTimer creates a new instance of MockTimer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTimer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTimer {
	mock := &MockTimer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
