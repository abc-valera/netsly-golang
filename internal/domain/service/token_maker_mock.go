// Code generated by mockery. DO NOT EDIT.

package service

import mock "github.com/stretchr/testify/mock"

// MockTokenMaker is an autogenerated mock type for the ITokenMaker type
type MockTokenMaker struct {
	mock.Mock
}

type MockTokenMaker_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenMaker) EXPECT() *MockTokenMaker_Expecter {
	return &MockTokenMaker_Expecter{mock: &_m.Mock}
}

// CreateAccessToken provides a mock function with given fields: userID
func (_m *MockTokenMaker) CreateAccessToken(userID string) (string, AuthPayload, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessToken")
	}

	var r0 string
	var r1 AuthPayload
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, AuthPayload, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) AuthPayload); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Get(1).(AuthPayload)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTokenMaker_CreateAccessToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAccessToken'
type MockTokenMaker_CreateAccessToken_Call struct {
	*mock.Call
}

// CreateAccessToken is a helper method to define mock.On call
//   - userID string
func (_e *MockTokenMaker_Expecter) CreateAccessToken(userID interface{}) *MockTokenMaker_CreateAccessToken_Call {
	return &MockTokenMaker_CreateAccessToken_Call{Call: _e.mock.On("CreateAccessToken", userID)}
}

func (_c *MockTokenMaker_CreateAccessToken_Call) Run(run func(userID string)) *MockTokenMaker_CreateAccessToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTokenMaker_CreateAccessToken_Call) Return(_a0 string, _a1 AuthPayload, _a2 error) *MockTokenMaker_CreateAccessToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTokenMaker_CreateAccessToken_Call) RunAndReturn(run func(string) (string, AuthPayload, error)) *MockTokenMaker_CreateAccessToken_Call {
	_c.Call.Return(run)
	return _c
}

// CreateRefreshToken provides a mock function with given fields: userID
func (_m *MockTokenMaker) CreateRefreshToken(userID string) (string, AuthPayload, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 string
	var r1 AuthPayload
	var r2 error
	if rf, ok := ret.Get(0).(func(string) (string, AuthPayload, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) AuthPayload); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Get(1).(AuthPayload)
	}

	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockTokenMaker_CreateRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRefreshToken'
type MockTokenMaker_CreateRefreshToken_Call struct {
	*mock.Call
}

// CreateRefreshToken is a helper method to define mock.On call
//   - userID string
func (_e *MockTokenMaker_Expecter) CreateRefreshToken(userID interface{}) *MockTokenMaker_CreateRefreshToken_Call {
	return &MockTokenMaker_CreateRefreshToken_Call{Call: _e.mock.On("CreateRefreshToken", userID)}
}

func (_c *MockTokenMaker_CreateRefreshToken_Call) Run(run func(userID string)) *MockTokenMaker_CreateRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTokenMaker_CreateRefreshToken_Call) Return(_a0 string, _a1 AuthPayload, _a2 error) *MockTokenMaker_CreateRefreshToken_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockTokenMaker_CreateRefreshToken_Call) RunAndReturn(run func(string) (string, AuthPayload, error)) *MockTokenMaker_CreateRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyToken provides a mock function with given fields: token
func (_m *MockTokenMaker) VerifyToken(token string) (AuthPayload, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for VerifyToken")
	}

	var r0 AuthPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (AuthPayload, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) AuthPayload); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(AuthPayload)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenMaker_VerifyToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyToken'
type MockTokenMaker_VerifyToken_Call struct {
	*mock.Call
}

// VerifyToken is a helper method to define mock.On call
//   - token string
func (_e *MockTokenMaker_Expecter) VerifyToken(token interface{}) *MockTokenMaker_VerifyToken_Call {
	return &MockTokenMaker_VerifyToken_Call{Call: _e.mock.On("VerifyToken", token)}
}

func (_c *MockTokenMaker_VerifyToken_Call) Run(run func(token string)) *MockTokenMaker_VerifyToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockTokenMaker_VerifyToken_Call) Return(_a0 AuthPayload, _a1 error) *MockTokenMaker_VerifyToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenMaker_VerifyToken_Call) RunAndReturn(run func(string) (AuthPayload, error)) *MockTokenMaker_VerifyToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenMaker creates a new instance of MockTokenMaker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenMaker(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenMaker {
	mock := &MockTokenMaker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
