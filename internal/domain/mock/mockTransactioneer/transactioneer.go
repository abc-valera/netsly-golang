// Code generated by mockery. DO NOT EDIT.

package mockTransactioneer

import (
	context "context"

	domain "github.com/abc-valera/netsly-api-golang/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// Transactioneer is an autogenerated mock type for the ITransactioneer type
type Transactioneer struct {
	mock.Mock
}

type Transactioneer_Expecter struct {
	mock *mock.Mock
}

func (_m *Transactioneer) EXPECT() *Transactioneer_Expecter {
	return &Transactioneer_Expecter{mock: &_m.Mock}
}

// PerformTX provides a mock function with given fields: ctx, txFunc
func (_m *Transactioneer) PerformTX(ctx context.Context, txFunc func(context.Context, domain.Entities) error) error {
	ret := _m.Called(ctx, txFunc)

	if len(ret) == 0 {
		panic("no return value specified for PerformTX")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context, domain.Entities) error) error); ok {
		r0 = rf(ctx, txFunc)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Transactioneer_PerformTX_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PerformTX'
type Transactioneer_PerformTX_Call struct {
	*mock.Call
}

// PerformTX is a helper method to define mock.On call
//   - ctx context.Context
//   - txFunc func(context.Context , domain.Entities) error
func (_e *Transactioneer_Expecter) PerformTX(ctx interface{}, txFunc interface{}) *Transactioneer_PerformTX_Call {
	return &Transactioneer_PerformTX_Call{Call: _e.mock.On("PerformTX", ctx, txFunc)}
}

func (_c *Transactioneer_PerformTX_Call) Run(run func(ctx context.Context, txFunc func(context.Context, domain.Entities) error)) *Transactioneer_PerformTX_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(func(context.Context, domain.Entities) error))
	})
	return _c
}

func (_c *Transactioneer_PerformTX_Call) Return(_a0 error) *Transactioneer_PerformTX_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Transactioneer_PerformTX_Call) RunAndReturn(run func(context.Context, func(context.Context, domain.Entities) error) error) *Transactioneer_PerformTX_Call {
	_c.Call.Return(run)
	return _c
}

// NewTransactioneer creates a new instance of Transactioneer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransactioneer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transactioneer {
	mock := &Transactioneer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
