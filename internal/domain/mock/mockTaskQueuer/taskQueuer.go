// Code generated by mockery. DO NOT EDIT.

package mockTaskQueuer

import (
	context "context"

	service "github.com/abc-valera/netsly-api-golang/internal/domain/service"
	mock "github.com/stretchr/testify/mock"
)

// TaskQueuer is an autogenerated mock type for the ITaskQueuer type
type TaskQueuer struct {
	mock.Mock
}

type TaskQueuer_Expecter struct {
	mock *mock.Mock
}

func (_m *TaskQueuer) EXPECT() *TaskQueuer_Expecter {
	return &TaskQueuer_Expecter{mock: &_m.Mock}
}

// SendEmailTask provides a mock function with given fields: ctx, priority, email
func (_m *TaskQueuer) SendEmailTask(ctx context.Context, priority service.TaskPriority, email service.Email) error {
	ret := _m.Called(ctx, priority, email)

	if len(ret) == 0 {
		panic("no return value specified for SendEmailTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, service.TaskPriority, service.Email) error); ok {
		r0 = rf(ctx, priority, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TaskQueuer_SendEmailTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmailTask'
type TaskQueuer_SendEmailTask_Call struct {
	*mock.Call
}

// SendEmailTask is a helper method to define mock.On call
//   - ctx context.Context
//   - priority service.TaskPriority
//   - email service.Email
func (_e *TaskQueuer_Expecter) SendEmailTask(ctx interface{}, priority interface{}, email interface{}) *TaskQueuer_SendEmailTask_Call {
	return &TaskQueuer_SendEmailTask_Call{Call: _e.mock.On("SendEmailTask", ctx, priority, email)}
}

func (_c *TaskQueuer_SendEmailTask_Call) Run(run func(ctx context.Context, priority service.TaskPriority, email service.Email)) *TaskQueuer_SendEmailTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(service.TaskPriority), args[2].(service.Email))
	})
	return _c
}

func (_c *TaskQueuer_SendEmailTask_Call) Return(_a0 error) *TaskQueuer_SendEmailTask_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *TaskQueuer_SendEmailTask_Call) RunAndReturn(run func(context.Context, service.TaskPriority, service.Email) error) *TaskQueuer_SendEmailTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewTaskQueuer creates a new instance of TaskQueuer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskQueuer(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskQueuer {
	mock := &TaskQueuer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
