// Code generated by mockery. DO NOT EDIT.

package mockEntity

import (
	context "context"

	entity "github.com/abc-valera/netsly-api-golang/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"

	model "github.com/abc-valera/netsly-api-golang/internal/domain/model"
)

// File is an autogenerated mock type for the IFile type
type File struct {
	mock.Mock
}

type File_Expecter struct {
	mock *mock.Mock
}

func (_m *File) EXPECT() *File_Expecter {
	return &File_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *File) Create(ctx context.Context, req entity.FileCreateRequest) (model.FileInfo, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.FileInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.FileCreateRequest) (model.FileInfo, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.FileCreateRequest) model.FileInfo); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.FileInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.FileCreateRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// File_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type File_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req entity.FileCreateRequest
func (_e *File_Expecter) Create(ctx interface{}, req interface{}) *File_Create_Call {
	return &File_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *File_Create_Call) Run(run func(ctx context.Context, req entity.FileCreateRequest)) *File_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.FileCreateRequest))
	})
	return _c
}

func (_c *File_Create_Call) Return(_a0 model.FileInfo, _a1 error) *File_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *File_Create_Call) RunAndReturn(run func(context.Context, entity.FileCreateRequest) (model.FileInfo, error)) *File_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *File) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// File_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type File_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *File_Expecter) Delete(ctx interface{}, id interface{}) *File_Delete_Call {
	return &File_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *File_Delete_Call) Run(run func(ctx context.Context, id string)) *File_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *File_Delete_Call) Return(_a0 error) *File_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *File_Delete_Call) RunAndReturn(run func(context.Context, string) error) *File_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *File) GetByID(ctx context.Context, id string) (model.FileInfo, model.FileContent, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.FileInfo
	var r1 model.FileContent
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.FileInfo, model.FileContent, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.FileInfo); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.FileInfo)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) model.FileContent); ok {
		r1 = rf(ctx, id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(model.FileContent)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, id)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// File_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type File_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *File_Expecter) GetByID(ctx interface{}, id interface{}) *File_GetByID_Call {
	return &File_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *File_GetByID_Call) Run(run func(ctx context.Context, id string)) *File_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *File_GetByID_Call) Return(_a0 model.FileInfo, _a1 model.FileContent, _a2 error) *File_GetByID_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *File_GetByID_Call) RunAndReturn(run func(context.Context, string) (model.FileInfo, model.FileContent, error)) *File_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, req
func (_m *File) Update(ctx context.Context, id string, req entity.FileUpdateRequest) error {
	ret := _m.Called(ctx, id, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.FileUpdateRequest) error); ok {
		r0 = rf(ctx, id, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// File_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type File_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - req entity.FileUpdateRequest
func (_e *File_Expecter) Update(ctx interface{}, id interface{}, req interface{}) *File_Update_Call {
	return &File_Update_Call{Call: _e.mock.On("Update", ctx, id, req)}
}

func (_c *File_Update_Call) Run(run func(ctx context.Context, id string, req entity.FileUpdateRequest)) *File_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(entity.FileUpdateRequest))
	})
	return _c
}

func (_c *File_Update_Call) Return(_a0 error) *File_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *File_Update_Call) RunAndReturn(run func(context.Context, string, entity.FileUpdateRequest) error) *File_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewFile creates a new instance of File. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFile(t interface {
	mock.TestingT
	Cleanup(func())
}) *File {
	mock := &File{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
