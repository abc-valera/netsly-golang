// Code generated by mockery. DO NOT EDIT.

package mockEntity

import (
	context "context"

	entity "github.com/abc-valera/netsly-api-golang/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"

	model "github.com/abc-valera/netsly-api-golang/internal/domain/model"
)

// RoomMember is an autogenerated mock type for the IRoomMember type
type RoomMember struct {
	mock.Mock
}

type RoomMember_Expecter struct {
	mock *mock.Mock
}

func (_m *RoomMember) EXPECT() *RoomMember_Expecter {
	return &RoomMember_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *RoomMember) Create(ctx context.Context, req entity.RoomMemberCreateRequest) (model.RoomMember, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.RoomMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.RoomMemberCreateRequest) (model.RoomMember, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.RoomMemberCreateRequest) model.RoomMember); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.RoomMember)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.RoomMemberCreateRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoomMember_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type RoomMember_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req entity.RoomMemberCreateRequest
func (_e *RoomMember_Expecter) Create(ctx interface{}, req interface{}) *RoomMember_Create_Call {
	return &RoomMember_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *RoomMember_Create_Call) Run(run func(ctx context.Context, req entity.RoomMemberCreateRequest)) *RoomMember_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.RoomMemberCreateRequest))
	})
	return _c
}

func (_c *RoomMember_Create_Call) Return(_a0 model.RoomMember, _a1 error) *RoomMember_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoomMember_Create_Call) RunAndReturn(run func(context.Context, entity.RoomMemberCreateRequest) (model.RoomMember, error)) *RoomMember_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, roomID, userID
func (_m *RoomMember) Delete(ctx context.Context, roomID string, userID string) error {
	ret := _m.Called(ctx, roomID, userID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, roomID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RoomMember_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type RoomMember_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - roomID string
//   - userID string
func (_e *RoomMember_Expecter) Delete(ctx interface{}, roomID interface{}, userID interface{}) *RoomMember_Delete_Call {
	return &RoomMember_Delete_Call{Call: _e.mock.On("Delete", ctx, roomID, userID)}
}

func (_c *RoomMember_Delete_Call) Run(run func(ctx context.Context, roomID string, userID string)) *RoomMember_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *RoomMember_Delete_Call) Return(_a0 error) *RoomMember_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RoomMember_Delete_Call) RunAndReturn(run func(context.Context, string, string) error) *RoomMember_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllByRoomID provides a mock function with given fields: ctx, roomID
func (_m *RoomMember) GetAllByRoomID(ctx context.Context, roomID string) (model.RoomMembers, error) {
	ret := _m.Called(ctx, roomID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllByRoomID")
	}

	var r0 model.RoomMembers
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.RoomMembers, error)); ok {
		return rf(ctx, roomID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.RoomMembers); ok {
		r0 = rf(ctx, roomID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.RoomMembers)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, roomID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoomMember_GetAllByRoomID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByRoomID'
type RoomMember_GetAllByRoomID_Call struct {
	*mock.Call
}

// GetAllByRoomID is a helper method to define mock.On call
//   - ctx context.Context
//   - roomID string
func (_e *RoomMember_Expecter) GetAllByRoomID(ctx interface{}, roomID interface{}) *RoomMember_GetAllByRoomID_Call {
	return &RoomMember_GetAllByRoomID_Call{Call: _e.mock.On("GetAllByRoomID", ctx, roomID)}
}

func (_c *RoomMember_GetAllByRoomID_Call) Run(run func(ctx context.Context, roomID string)) *RoomMember_GetAllByRoomID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *RoomMember_GetAllByRoomID_Call) Return(_a0 model.RoomMembers, _a1 error) *RoomMember_GetAllByRoomID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoomMember_GetAllByRoomID_Call) RunAndReturn(run func(context.Context, string) (model.RoomMembers, error)) *RoomMember_GetAllByRoomID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByIDs provides a mock function with given fields: ctx, userID, roomID
func (_m *RoomMember) GetByIDs(ctx context.Context, userID string, roomID string) (model.RoomMember, error) {
	ret := _m.Called(ctx, userID, roomID)

	if len(ret) == 0 {
		panic("no return value specified for GetByIDs")
	}

	var r0 model.RoomMember
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (model.RoomMember, error)); ok {
		return rf(ctx, userID, roomID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) model.RoomMember); ok {
		r0 = rf(ctx, userID, roomID)
	} else {
		r0 = ret.Get(0).(model.RoomMember)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, roomID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RoomMember_GetByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIDs'
type RoomMember_GetByIDs_Call struct {
	*mock.Call
}

// GetByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - roomID string
func (_e *RoomMember_Expecter) GetByIDs(ctx interface{}, userID interface{}, roomID interface{}) *RoomMember_GetByIDs_Call {
	return &RoomMember_GetByIDs_Call{Call: _e.mock.On("GetByIDs", ctx, userID, roomID)}
}

func (_c *RoomMember_GetByIDs_Call) Run(run func(ctx context.Context, userID string, roomID string)) *RoomMember_GetByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *RoomMember_GetByIDs_Call) Return(_a0 model.RoomMember, _a1 error) *RoomMember_GetByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RoomMember_GetByIDs_Call) RunAndReturn(run func(context.Context, string, string) (model.RoomMember, error)) *RoomMember_GetByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// NewRoomMember creates a new instance of RoomMember. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoomMember(t interface {
	mock.TestingT
	Cleanup(func())
}) *RoomMember {
	mock := &RoomMember{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
