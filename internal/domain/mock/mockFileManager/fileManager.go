// Code generated by mockery. DO NOT EDIT.

package mockFileManager

import (
	model "github.com/abc-valera/netsly-api-golang/internal/domain/model"
	mock "github.com/stretchr/testify/mock"
)

// FileManager is an autogenerated mock type for the IFileManager type
type FileManager struct {
	mock.Mock
}

type FileManager_Expecter struct {
	mock *mock.Mock
}

func (_m *FileManager) EXPECT() *FileManager_Expecter {
	return &FileManager_Expecter{mock: &_m.Mock}
}

// GetContent provides a mock function with given fields: fileName
func (_m *FileManager) GetContent(fileName string) (model.FileContent, error) {
	ret := _m.Called(fileName)

	if len(ret) == 0 {
		panic("no return value specified for GetContent")
	}

	var r0 model.FileContent
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (model.FileContent, error)); ok {
		return rf(fileName)
	}
	if rf, ok := ret.Get(0).(func(string) model.FileContent); ok {
		r0 = rf(fileName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.FileContent)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileManager_GetContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetContent'
type FileManager_GetContent_Call struct {
	*mock.Call
}

// GetContent is a helper method to define mock.On call
//   - fileName string
func (_e *FileManager_Expecter) GetContent(fileName interface{}) *FileManager_GetContent_Call {
	return &FileManager_GetContent_Call{Call: _e.mock.On("GetContent", fileName)}
}

func (_c *FileManager_GetContent_Call) Run(run func(fileName string)) *FileManager_GetContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FileManager_GetContent_Call) Return(_a0 model.FileContent, _a1 error) *FileManager_GetContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileManager_GetContent_Call) RunAndReturn(run func(string) (model.FileContent, error)) *FileManager_GetContent_Call {
	_c.Call.Return(run)
	return _c
}

// Remove provides a mock function with given fields: fileName
func (_m *FileManager) Remove(fileName string) error {
	ret := _m.Called(fileName)

	if len(ret) == 0 {
		panic("no return value specified for Remove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(fileName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileManager_Remove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Remove'
type FileManager_Remove_Call struct {
	*mock.Call
}

// Remove is a helper method to define mock.On call
//   - fileName string
func (_e *FileManager_Expecter) Remove(fileName interface{}) *FileManager_Remove_Call {
	return &FileManager_Remove_Call{Call: _e.mock.On("Remove", fileName)}
}

func (_c *FileManager_Remove_Call) Run(run func(fileName string)) *FileManager_Remove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FileManager_Remove_Call) Return(_a0 error) *FileManager_Remove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileManager_Remove_Call) RunAndReturn(run func(string) error) *FileManager_Remove_Call {
	_c.Call.Return(run)
	return _c
}

// Save provides a mock function with given fields: fileName, fileContent
func (_m *FileManager) Save(fileName string, fileContent model.FileContent) error {
	ret := _m.Called(fileName, fileContent)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, model.FileContent) error); ok {
		r0 = rf(fileName, fileContent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileManager_Save_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Save'
type FileManager_Save_Call struct {
	*mock.Call
}

// Save is a helper method to define mock.On call
//   - fileName string
//   - fileContent model.FileContent
func (_e *FileManager_Expecter) Save(fileName interface{}, fileContent interface{}) *FileManager_Save_Call {
	return &FileManager_Save_Call{Call: _e.mock.On("Save", fileName, fileContent)}
}

func (_c *FileManager_Save_Call) Run(run func(fileName string, fileContent model.FileContent)) *FileManager_Save_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(model.FileContent))
	})
	return _c
}

func (_c *FileManager_Save_Call) Return(_a0 error) *FileManager_Save_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileManager_Save_Call) RunAndReturn(run func(string, model.FileContent) error) *FileManager_Save_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: fileName, fileContent
func (_m *FileManager) Update(fileName string, fileContent model.FileContent) error {
	ret := _m.Called(fileName, fileContent)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, model.FileContent) error); ok {
		r0 = rf(fileName, fileContent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileManager_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type FileManager_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - fileName string
//   - fileContent model.FileContent
func (_e *FileManager_Expecter) Update(fileName interface{}, fileContent interface{}) *FileManager_Update_Call {
	return &FileManager_Update_Call{Call: _e.mock.On("Update", fileName, fileContent)}
}

func (_c *FileManager_Update_Call) Run(run func(fileName string, fileContent model.FileContent)) *FileManager_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(model.FileContent))
	})
	return _c
}

func (_c *FileManager_Update_Call) Return(_a0 error) *FileManager_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FileManager_Update_Call) RunAndReturn(run func(string, model.FileContent) error) *FileManager_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileManager creates a new instance of FileManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileManager {
	mock := &FileManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
