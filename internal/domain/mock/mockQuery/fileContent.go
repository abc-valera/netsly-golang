// Code generated by mockery. DO NOT EDIT.

package mockQuery

import mock "github.com/stretchr/testify/mock"

// FileContent is an autogenerated mock type for the IFileContent type
type FileContent struct {
	mock.Mock
}

type FileContent_Expecter struct {
	mock *mock.Mock
}

func (_m *FileContent) EXPECT() *FileContent_Expecter {
	return &FileContent_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function with given fields: fileID
func (_m *FileContent) GetByID(fileID string) ([]byte, error) {
	ret := _m.Called(fileID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]byte, error)); ok {
		return rf(fileID)
	}
	if rf, ok := ret.Get(0).(func(string) []byte); ok {
		r0 = rf(fileID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(fileID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FileContent_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type FileContent_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - fileID string
func (_e *FileContent_Expecter) GetByID(fileID interface{}) *FileContent_GetByID_Call {
	return &FileContent_GetByID_Call{Call: _e.mock.On("GetByID", fileID)}
}

func (_c *FileContent_GetByID_Call) Run(run func(fileID string)) *FileContent_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *FileContent_GetByID_Call) Return(_a0 []byte, _a1 error) *FileContent_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *FileContent_GetByID_Call) RunAndReturn(run func(string) ([]byte, error)) *FileContent_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewFileContent creates a new instance of FileContent. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFileContent(t interface {
	mock.TestingT
	Cleanup(func())
}) *FileContent {
	mock := &FileContent{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
