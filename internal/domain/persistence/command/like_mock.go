// Code generated by mockery. DO NOT EDIT.

package command

import (
	context "context"

	model "github.com/abc-valera/netsly-api-golang/internal/domain/persistence/model"
	mock "github.com/stretchr/testify/mock"
)

// MockLike is an autogenerated mock type for the ILike type
type MockLike struct {
	mock.Mock
}

type MockLike_Expecter struct {
	mock *mock.Mock
}

func (_m *MockLike) EXPECT() *MockLike_Expecter {
	return &MockLike_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *MockLike) Create(ctx context.Context, req model.Like) (model.Like, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.Like
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Like) (model.Like, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Like) model.Like); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.Like)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Like) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockLike_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockLike_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req model.Like
func (_e *MockLike_Expecter) Create(ctx interface{}, req interface{}) *MockLike_Create_Call {
	return &MockLike_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *MockLike_Create_Call) Run(run func(ctx context.Context, req model.Like)) *MockLike_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Like))
	})
	return _c
}

func (_c *MockLike_Create_Call) Return(_a0 model.Like, _a1 error) *MockLike_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockLike_Create_Call) RunAndReturn(run func(context.Context, model.Like) (model.Like, error)) *MockLike_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, userID, jokeID
func (_m *MockLike) Delete(ctx context.Context, userID string, jokeID string) error {
	ret := _m.Called(ctx, userID, jokeID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, jokeID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockLike_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockLike_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - jokeID string
func (_e *MockLike_Expecter) Delete(ctx interface{}, userID interface{}, jokeID interface{}) *MockLike_Delete_Call {
	return &MockLike_Delete_Call{Call: _e.mock.On("Delete", ctx, userID, jokeID)}
}

func (_c *MockLike_Delete_Call) Run(run func(ctx context.Context, userID string, jokeID string)) *MockLike_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockLike_Delete_Call) Return(_a0 error) *MockLike_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockLike_Delete_Call) RunAndReturn(run func(context.Context, string, string) error) *MockLike_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockLike creates a new instance of MockLike. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockLike(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockLike {
	mock := &MockLike{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
