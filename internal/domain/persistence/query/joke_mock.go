// Code generated by mockery. DO NOT EDIT.

package query

import (
	context "context"

	model "github.com/abc-valera/netsly-api-golang/internal/domain/persistence/model"
	spec "github.com/abc-valera/netsly-api-golang/internal/domain/persistence/query/spec"
	mock "github.com/stretchr/testify/mock"
)

// MockJoke is an autogenerated mock type for the IJoke type
type MockJoke struct {
	mock.Mock
}

type MockJoke_Expecter struct {
	mock *mock.Mock
}

func (_m *MockJoke) EXPECT() *MockJoke_Expecter {
	return &MockJoke_Expecter{mock: &_m.Mock}
}

// GetAllByUserID provides a mock function with given fields: ctx, userID, params
func (_m *MockJoke) GetAllByUserID(ctx context.Context, userID string, params spec.SelectParams) (model.Jokes, error) {
	ret := _m.Called(ctx, userID, params)

	if len(ret) == 0 {
		panic("no return value specified for GetAllByUserID")
	}

	var r0 model.Jokes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, spec.SelectParams) (model.Jokes, error)); ok {
		return rf(ctx, userID, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, spec.SelectParams) model.Jokes); ok {
		r0 = rf(ctx, userID, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Jokes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, spec.SelectParams) error); ok {
		r1 = rf(ctx, userID, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJoke_GetAllByUserID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByUserID'
type MockJoke_GetAllByUserID_Call struct {
	*mock.Call
}

// GetAllByUserID is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - params spec.SelectParams
func (_e *MockJoke_Expecter) GetAllByUserID(ctx interface{}, userID interface{}, params interface{}) *MockJoke_GetAllByUserID_Call {
	return &MockJoke_GetAllByUserID_Call{Call: _e.mock.On("GetAllByUserID", ctx, userID, params)}
}

func (_c *MockJoke_GetAllByUserID_Call) Run(run func(ctx context.Context, userID string, params spec.SelectParams)) *MockJoke_GetAllByUserID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(spec.SelectParams))
	})
	return _c
}

func (_c *MockJoke_GetAllByUserID_Call) Return(_a0 model.Jokes, _a1 error) *MockJoke_GetAllByUserID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJoke_GetAllByUserID_Call) RunAndReturn(run func(context.Context, string, spec.SelectParams) (model.Jokes, error)) *MockJoke_GetAllByUserID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *MockJoke) GetByID(ctx context.Context, id string) (model.Joke, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 model.Joke
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Joke, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Joke); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Joke)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJoke_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockJoke_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockJoke_Expecter) GetByID(ctx interface{}, id interface{}) *MockJoke_GetByID_Call {
	return &MockJoke_GetByID_Call{Call: _e.mock.On("GetByID", ctx, id)}
}

func (_c *MockJoke_GetByID_Call) Run(run func(ctx context.Context, id string)) *MockJoke_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockJoke_GetByID_Call) Return(_a0 model.Joke, _a1 error) *MockJoke_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJoke_GetByID_Call) RunAndReturn(run func(context.Context, string) (model.Joke, error)) *MockJoke_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// SearchByTitle provides a mock function with given fields: ctx, keyword, params
func (_m *MockJoke) SearchByTitle(ctx context.Context, keyword string, params spec.SelectParams) (model.Jokes, error) {
	ret := _m.Called(ctx, keyword, params)

	if len(ret) == 0 {
		panic("no return value specified for SearchByTitle")
	}

	var r0 model.Jokes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, spec.SelectParams) (model.Jokes, error)); ok {
		return rf(ctx, keyword, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, spec.SelectParams) model.Jokes); ok {
		r0 = rf(ctx, keyword, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Jokes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, spec.SelectParams) error); ok {
		r1 = rf(ctx, keyword, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockJoke_SearchByTitle_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchByTitle'
type MockJoke_SearchByTitle_Call struct {
	*mock.Call
}

// SearchByTitle is a helper method to define mock.On call
//   - ctx context.Context
//   - keyword string
//   - params spec.SelectParams
func (_e *MockJoke_Expecter) SearchByTitle(ctx interface{}, keyword interface{}, params interface{}) *MockJoke_SearchByTitle_Call {
	return &MockJoke_SearchByTitle_Call{Call: _e.mock.On("SearchByTitle", ctx, keyword, params)}
}

func (_c *MockJoke_SearchByTitle_Call) Run(run func(ctx context.Context, keyword string, params spec.SelectParams)) *MockJoke_SearchByTitle_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(spec.SelectParams))
	})
	return _c
}

func (_c *MockJoke_SearchByTitle_Call) Return(_a0 model.Jokes, _a1 error) *MockJoke_SearchByTitle_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockJoke_SearchByTitle_Call) RunAndReturn(run func(context.Context, string, spec.SelectParams) (model.Jokes, error)) *MockJoke_SearchByTitle_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockJoke creates a new instance of MockJoke. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockJoke(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockJoke {
	mock := &MockJoke{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
