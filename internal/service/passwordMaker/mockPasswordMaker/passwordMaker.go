// Code generated by mockery. DO NOT EDIT.

package mockPasswordMaker

import mock "github.com/stretchr/testify/mock"

// PasswordMaker is an autogenerated mock type for the IPasswordMaker type
type PasswordMaker struct {
	mock.Mock
}

type PasswordMaker_Expecter struct {
	mock *mock.Mock
}

func (_m *PasswordMaker) EXPECT() *PasswordMaker_Expecter {
	return &PasswordMaker_Expecter{mock: &_m.Mock}
}

// CheckPassword provides a mock function with given fields: password, hash
func (_m *PasswordMaker) CheckPassword(password string, hash string) error {
	ret := _m.Called(password, hash)

	if len(ret) == 0 {
		panic("no return value specified for CheckPassword")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(password, hash)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PasswordMaker_CheckPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPassword'
type PasswordMaker_CheckPassword_Call struct {
	*mock.Call
}

// CheckPassword is a helper method to define mock.On call
//   - password string
//   - hash string
func (_e *PasswordMaker_Expecter) CheckPassword(password interface{}, hash interface{}) *PasswordMaker_CheckPassword_Call {
	return &PasswordMaker_CheckPassword_Call{Call: _e.mock.On("CheckPassword", password, hash)}
}

func (_c *PasswordMaker_CheckPassword_Call) Run(run func(password string, hash string)) *PasswordMaker_CheckPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *PasswordMaker_CheckPassword_Call) Return(_a0 error) *PasswordMaker_CheckPassword_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PasswordMaker_CheckPassword_Call) RunAndReturn(run func(string, string) error) *PasswordMaker_CheckPassword_Call {
	_c.Call.Return(run)
	return _c
}

// HashPassword provides a mock function with given fields: password
func (_m *PasswordMaker) HashPassword(password string) (string, error) {
	ret := _m.Called(password)

	if len(ret) == 0 {
		panic("no return value specified for HashPassword")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(password)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(password)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PasswordMaker_HashPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashPassword'
type PasswordMaker_HashPassword_Call struct {
	*mock.Call
}

// HashPassword is a helper method to define mock.On call
//   - password string
func (_e *PasswordMaker_Expecter) HashPassword(password interface{}) *PasswordMaker_HashPassword_Call {
	return &PasswordMaker_HashPassword_Call{Call: _e.mock.On("HashPassword", password)}
}

func (_c *PasswordMaker_HashPassword_Call) Run(run func(password string)) *PasswordMaker_HashPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *PasswordMaker_HashPassword_Call) Return(_a0 string, _a1 error) *PasswordMaker_HashPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PasswordMaker_HashPassword_Call) RunAndReturn(run func(string) (string, error)) *PasswordMaker_HashPassword_Call {
	_c.Call.Return(run)
	return _c
}

// NewPasswordMaker creates a new instance of PasswordMaker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPasswordMaker(t interface {
	mock.TestingT
	Cleanup(func())
}) *PasswordMaker {
	mock := &PasswordMaker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
