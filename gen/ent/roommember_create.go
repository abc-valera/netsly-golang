// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abc-valera/netsly-api-golang/gen/ent/room"
	"github.com/abc-valera/netsly-api-golang/gen/ent/roommember"
	"github.com/abc-valera/netsly-api-golang/gen/ent/user"
)

// RoomMemberCreate is the builder for creating a RoomMember entity.
type RoomMemberCreate struct {
	config
	mutation *RoomMemberMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (rmc *RoomMemberCreate) SetCreatedAt(t time.Time) *RoomMemberCreate {
	rmc.mutation.SetCreatedAt(t)
	return rmc
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (rmc *RoomMemberCreate) SetRoomID(id string) *RoomMemberCreate {
	rmc.mutation.SetRoomID(id)
	return rmc
}

// SetRoom sets the "room" edge to the Room entity.
func (rmc *RoomMemberCreate) SetRoom(r *Room) *RoomMemberCreate {
	return rmc.SetRoomID(r.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (rmc *RoomMemberCreate) SetUserID(id string) *RoomMemberCreate {
	rmc.mutation.SetUserID(id)
	return rmc
}

// SetUser sets the "user" edge to the User entity.
func (rmc *RoomMemberCreate) SetUser(u *User) *RoomMemberCreate {
	return rmc.SetUserID(u.ID)
}

// Mutation returns the RoomMemberMutation object of the builder.
func (rmc *RoomMemberCreate) Mutation() *RoomMemberMutation {
	return rmc.mutation
}

// Save creates the RoomMember in the database.
func (rmc *RoomMemberCreate) Save(ctx context.Context) (*RoomMember, error) {
	return withHooks(ctx, rmc.sqlSave, rmc.mutation, rmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rmc *RoomMemberCreate) SaveX(ctx context.Context) *RoomMember {
	v, err := rmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmc *RoomMemberCreate) Exec(ctx context.Context) error {
	_, err := rmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmc *RoomMemberCreate) ExecX(ctx context.Context) {
	if err := rmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rmc *RoomMemberCreate) check() error {
	if _, ok := rmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RoomMember.created_at"`)}
	}
	if _, ok := rmc.mutation.RoomID(); !ok {
		return &ValidationError{Name: "room", err: errors.New(`ent: missing required edge "RoomMember.room"`)}
	}
	if _, ok := rmc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "RoomMember.user"`)}
	}
	return nil
}

func (rmc *RoomMemberCreate) sqlSave(ctx context.Context) (*RoomMember, error) {
	if err := rmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rmc.mutation.id = &_node.ID
	rmc.mutation.done = true
	return _node, nil
}

func (rmc *RoomMemberCreate) createSpec() (*RoomMember, *sqlgraph.CreateSpec) {
	var (
		_node = &RoomMember{config: rmc.config}
		_spec = sqlgraph.NewCreateSpec(roommember.Table, sqlgraph.NewFieldSpec(roommember.FieldID, field.TypeInt))
	)
	if value, ok := rmc.mutation.CreatedAt(); ok {
		_spec.SetField(roommember.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := rmc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roommember.RoomTable,
			Columns: []string{roommember.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.room_members = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rmc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roommember.UserTable,
			Columns: []string{roommember.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_rooms = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RoomMemberCreateBulk is the builder for creating many RoomMember entities in bulk.
type RoomMemberCreateBulk struct {
	config
	err      error
	builders []*RoomMemberCreate
}

// Save creates the RoomMember entities in the database.
func (rmcb *RoomMemberCreateBulk) Save(ctx context.Context) ([]*RoomMember, error) {
	if rmcb.err != nil {
		return nil, rmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rmcb.builders))
	nodes := make([]*RoomMember, len(rmcb.builders))
	mutators := make([]Mutator, len(rmcb.builders))
	for i := range rmcb.builders {
		func(i int, root context.Context) {
			builder := rmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoomMemberMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rmcb *RoomMemberCreateBulk) SaveX(ctx context.Context) []*RoomMember {
	v, err := rmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmcb *RoomMemberCreateBulk) Exec(ctx context.Context) error {
	_, err := rmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmcb *RoomMemberCreateBulk) ExecX(ctx context.Context) {
	if err := rmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
