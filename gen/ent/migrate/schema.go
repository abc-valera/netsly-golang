// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// CommentsColumns holds the columns for the "comments" table.
	CommentsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "user_id", Type: field.TypeString},
		{Name: "joke_id", Type: field.TypeString},
		{Name: "text", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "joke_comments", Type: field.TypeString},
		{Name: "user_comments", Type: field.TypeString},
	}
	// CommentsTable holds the schema information for the "comments" table.
	CommentsTable = &schema.Table{
		Name:       "comments",
		Columns:    CommentsColumns,
		PrimaryKey: []*schema.Column{CommentsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "comments_jokes_comments",
				Columns:    []*schema.Column{CommentsColumns[5]},
				RefColumns: []*schema.Column{JokesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "comments_users_comments",
				Columns:    []*schema.Column{CommentsColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// JokesColumns holds the columns for the "jokes" table.
	JokesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "user_id", Type: field.TypeString},
		{Name: "title", Type: field.TypeString},
		{Name: "text", Type: field.TypeString},
		{Name: "explanation", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "user_jokes", Type: field.TypeString},
	}
	// JokesTable holds the schema information for the "jokes" table.
	JokesTable = &schema.Table{
		Name:       "jokes",
		Columns:    JokesColumns,
		PrimaryKey: []*schema.Column{JokesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "jokes_users_jokes",
				Columns:    []*schema.Column{JokesColumns[6]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "joke_user_id_title",
				Unique:  true,
				Columns: []*schema.Column{JokesColumns[1], JokesColumns[2]},
			},
		},
	}
	// LikesColumns holds the columns for the "likes" table.
	LikesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "user_id", Type: field.TypeString},
		{Name: "joke_id", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "joke_likes", Type: field.TypeString},
		{Name: "user_likes", Type: field.TypeString},
	}
	// LikesTable holds the schema information for the "likes" table.
	LikesTable = &schema.Table{
		Name:       "likes",
		Columns:    LikesColumns,
		PrimaryKey: []*schema.Column{LikesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "likes_jokes_likes",
				Columns:    []*schema.Column{LikesColumns[4]},
				RefColumns: []*schema.Column{JokesColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "likes_users_likes",
				Columns:    []*schema.Column{LikesColumns[5]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "like_user_id_joke_id",
				Unique:  true,
				Columns: []*schema.Column{LikesColumns[1], LikesColumns[2]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeString, Unique: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "hashed_password", Type: field.TypeString},
		{Name: "fullname", Type: field.TypeString},
		{Name: "status", Type: field.TypeString},
		{Name: "created_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		CommentsTable,
		JokesTable,
		LikesTable,
		UsersTable,
	}
)

func init() {
	CommentsTable.ForeignKeys[0].RefTable = JokesTable
	CommentsTable.ForeignKeys[1].RefTable = UsersTable
	JokesTable.ForeignKeys[0].RefTable = UsersTable
	LikesTable.ForeignKeys[0].RefTable = JokesTable
	LikesTable.ForeignKeys[1].RefTable = UsersTable
}
