// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/abc-valera/flugo-api-golang/gen/ent/chatmember"
	"github.com/abc-valera/flugo-api-golang/gen/ent/chatroom"
	"github.com/abc-valera/flugo-api-golang/gen/ent/user"
)

// ChatMember is the model entity for the ChatMember schema.
type ChatMember struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// ChatRoomID holds the value of the "chat_room_id" field.
	ChatRoomID string `json:"chat_room_id,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID string `json:"user_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ChatMemberQuery when eager-loading is set.
	Edges             ChatMemberEdges `json:"edges"`
	chat_room_members *string
	user_chat_rooms   *string
	selectValues      sql.SelectValues
}

// ChatMemberEdges holds the relations/edges for other nodes in the graph.
type ChatMemberEdges struct {
	// Room holds the value of the room edge.
	Room *ChatRoom `json:"room,omitempty"`
	// Member holds the value of the member edge.
	Member *User `json:"member,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// RoomOrErr returns the Room value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChatMemberEdges) RoomOrErr() (*ChatRoom, error) {
	if e.loadedTypes[0] {
		if e.Room == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: chatroom.Label}
		}
		return e.Room, nil
	}
	return nil, &NotLoadedError{edge: "room"}
}

// MemberOrErr returns the Member value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ChatMemberEdges) MemberOrErr() (*User, error) {
	if e.loadedTypes[1] {
		if e.Member == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Member, nil
	}
	return nil, &NotLoadedError{edge: "member"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatMember) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatmember.FieldID:
			values[i] = new(sql.NullInt64)
		case chatmember.FieldChatRoomID, chatmember.FieldUserID:
			values[i] = new(sql.NullString)
		case chatmember.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case chatmember.ForeignKeys[0]: // chat_room_members
			values[i] = new(sql.NullString)
		case chatmember.ForeignKeys[1]: // user_chat_rooms
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatMember fields.
func (cm *ChatMember) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatmember.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cm.ID = int(value.Int64)
		case chatmember.FieldChatRoomID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chat_room_id", values[i])
			} else if value.Valid {
				cm.ChatRoomID = value.String
			}
		case chatmember.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				cm.UserID = value.String
			}
		case chatmember.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				cm.CreatedAt = value.Time
			}
		case chatmember.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field chat_room_members", values[i])
			} else if value.Valid {
				cm.chat_room_members = new(string)
				*cm.chat_room_members = value.String
			}
		case chatmember.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_chat_rooms", values[i])
			} else if value.Valid {
				cm.user_chat_rooms = new(string)
				*cm.user_chat_rooms = value.String
			}
		default:
			cm.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChatMember.
// This includes values selected through modifiers, order, etc.
func (cm *ChatMember) Value(name string) (ent.Value, error) {
	return cm.selectValues.Get(name)
}

// QueryRoom queries the "room" edge of the ChatMember entity.
func (cm *ChatMember) QueryRoom() *ChatRoomQuery {
	return NewChatMemberClient(cm.config).QueryRoom(cm)
}

// QueryMember queries the "member" edge of the ChatMember entity.
func (cm *ChatMember) QueryMember() *UserQuery {
	return NewChatMemberClient(cm.config).QueryMember(cm)
}

// Update returns a builder for updating this ChatMember.
// Note that you need to call ChatMember.Unwrap() before calling this method if this ChatMember
// was returned from a transaction, and the transaction was committed or rolled back.
func (cm *ChatMember) Update() *ChatMemberUpdateOne {
	return NewChatMemberClient(cm.config).UpdateOne(cm)
}

// Unwrap unwraps the ChatMember entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cm *ChatMember) Unwrap() *ChatMember {
	_tx, ok := cm.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatMember is not a transactional entity")
	}
	cm.config.driver = _tx.drv
	return cm
}

// String implements the fmt.Stringer.
func (cm *ChatMember) String() string {
	var builder strings.Builder
	builder.WriteString("ChatMember(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cm.ID))
	builder.WriteString("chat_room_id=")
	builder.WriteString(cm.ChatRoomID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(cm.UserID)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(cm.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ChatMembers is a parsable slice of ChatMember.
type ChatMembers []*ChatMember
