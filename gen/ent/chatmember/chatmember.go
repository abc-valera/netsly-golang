// Code generated by ent, DO NOT EDIT.

package chatmember

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the chatmember type in the database.
	Label = "chat_member"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldChatRoomID holds the string denoting the chat_room_id field in the database.
	FieldChatRoomID = "chat_room_id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeRoom holds the string denoting the room edge name in mutations.
	EdgeRoom = "room"
	// EdgeMember holds the string denoting the member edge name in mutations.
	EdgeMember = "member"
	// Table holds the table name of the chatmember in the database.
	Table = "chat_members"
	// RoomTable is the table that holds the room relation/edge.
	RoomTable = "chat_members"
	// RoomInverseTable is the table name for the ChatRoom entity.
	// It exists in this package in order to avoid circular dependency with the "chatroom" package.
	RoomInverseTable = "chat_rooms"
	// RoomColumn is the table column denoting the room relation/edge.
	RoomColumn = "chat_room_members"
	// MemberTable is the table that holds the member relation/edge.
	MemberTable = "chat_members"
	// MemberInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	MemberInverseTable = "users"
	// MemberColumn is the table column denoting the member relation/edge.
	MemberColumn = "user_chat_rooms"
)

// Columns holds all SQL columns for chatmember fields.
var Columns = []string{
	FieldID,
	FieldChatRoomID,
	FieldUserID,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "chat_members"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"chat_room_members",
	"user_chat_rooms",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// ChatRoomIDValidator is a validator for the "chat_room_id" field. It is called by the builders before save.
	ChatRoomIDValidator func(string) error
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(string) error
)

// OrderOption defines the ordering options for the ChatMember queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByChatRoomID orders the results by the chat_room_id field.
func ByChatRoomID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChatRoomID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByRoomField orders the results by room field.
func ByRoomField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRoomStep(), sql.OrderByField(field, opts...))
	}
}

// ByMemberField orders the results by member field.
func ByMemberField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMemberStep(), sql.OrderByField(field, opts...))
	}
}
func newRoomStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RoomInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, RoomTable, RoomColumn),
	)
}
func newMemberStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MemberInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, MemberTable, MemberColumn),
	)
}
