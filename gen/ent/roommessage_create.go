// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abc-valera/netsly-api-golang/gen/ent/room"
	"github.com/abc-valera/netsly-api-golang/gen/ent/roommessage"
	"github.com/abc-valera/netsly-api-golang/gen/ent/user"
)

// RoomMessageCreate is the builder for creating a RoomMessage entity.
type RoomMessageCreate struct {
	config
	mutation *RoomMessageMutation
	hooks    []Hook
}

// SetText sets the "text" field.
func (rmc *RoomMessageCreate) SetText(s string) *RoomMessageCreate {
	rmc.mutation.SetText(s)
	return rmc
}

// SetCreatedAt sets the "created_at" field.
func (rmc *RoomMessageCreate) SetCreatedAt(t time.Time) *RoomMessageCreate {
	rmc.mutation.SetCreatedAt(t)
	return rmc
}

// SetID sets the "id" field.
func (rmc *RoomMessageCreate) SetID(s string) *RoomMessageCreate {
	rmc.mutation.SetID(s)
	return rmc
}

// SetRoomID sets the "room" edge to the Room entity by ID.
func (rmc *RoomMessageCreate) SetRoomID(id string) *RoomMessageCreate {
	rmc.mutation.SetRoomID(id)
	return rmc
}

// SetRoom sets the "room" edge to the Room entity.
func (rmc *RoomMessageCreate) SetRoom(r *Room) *RoomMessageCreate {
	return rmc.SetRoomID(r.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (rmc *RoomMessageCreate) SetUserID(id string) *RoomMessageCreate {
	rmc.mutation.SetUserID(id)
	return rmc
}

// SetUser sets the "user" edge to the User entity.
func (rmc *RoomMessageCreate) SetUser(u *User) *RoomMessageCreate {
	return rmc.SetUserID(u.ID)
}

// Mutation returns the RoomMessageMutation object of the builder.
func (rmc *RoomMessageCreate) Mutation() *RoomMessageMutation {
	return rmc.mutation
}

// Save creates the RoomMessage in the database.
func (rmc *RoomMessageCreate) Save(ctx context.Context) (*RoomMessage, error) {
	return withHooks(ctx, rmc.sqlSave, rmc.mutation, rmc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rmc *RoomMessageCreate) SaveX(ctx context.Context) *RoomMessage {
	v, err := rmc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmc *RoomMessageCreate) Exec(ctx context.Context) error {
	_, err := rmc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmc *RoomMessageCreate) ExecX(ctx context.Context) {
	if err := rmc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rmc *RoomMessageCreate) check() error {
	if _, ok := rmc.mutation.Text(); !ok {
		return &ValidationError{Name: "text", err: errors.New(`ent: missing required field "RoomMessage.text"`)}
	}
	if v, ok := rmc.mutation.Text(); ok {
		if err := roommessage.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "RoomMessage.text": %w`, err)}
		}
	}
	if _, ok := rmc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RoomMessage.created_at"`)}
	}
	if v, ok := rmc.mutation.ID(); ok {
		if err := roommessage.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "RoomMessage.id": %w`, err)}
		}
	}
	if _, ok := rmc.mutation.RoomID(); !ok {
		return &ValidationError{Name: "room", err: errors.New(`ent: missing required edge "RoomMessage.room"`)}
	}
	if _, ok := rmc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "RoomMessage.user"`)}
	}
	return nil
}

func (rmc *RoomMessageCreate) sqlSave(ctx context.Context) (*RoomMessage, error) {
	if err := rmc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rmc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rmc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected RoomMessage.ID type: %T", _spec.ID.Value)
		}
	}
	rmc.mutation.id = &_node.ID
	rmc.mutation.done = true
	return _node, nil
}

func (rmc *RoomMessageCreate) createSpec() (*RoomMessage, *sqlgraph.CreateSpec) {
	var (
		_node = &RoomMessage{config: rmc.config}
		_spec = sqlgraph.NewCreateSpec(roommessage.Table, sqlgraph.NewFieldSpec(roommessage.FieldID, field.TypeString))
	)
	if id, ok := rmc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rmc.mutation.Text(); ok {
		_spec.SetField(roommessage.FieldText, field.TypeString, value)
		_node.Text = value
	}
	if value, ok := rmc.mutation.CreatedAt(); ok {
		_spec.SetField(roommessage.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := rmc.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roommessage.RoomTable,
			Columns: []string{roommessage.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(room.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.room_messages = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rmc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   roommessage.UserTable,
			Columns: []string{roommessage.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_room_messages = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// RoomMessageCreateBulk is the builder for creating many RoomMessage entities in bulk.
type RoomMessageCreateBulk struct {
	config
	err      error
	builders []*RoomMessageCreate
}

// Save creates the RoomMessage entities in the database.
func (rmcb *RoomMessageCreateBulk) Save(ctx context.Context) ([]*RoomMessage, error) {
	if rmcb.err != nil {
		return nil, rmcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rmcb.builders))
	nodes := make([]*RoomMessage, len(rmcb.builders))
	mutators := make([]Mutator, len(rmcb.builders))
	for i := range rmcb.builders {
		func(i int, root context.Context) {
			builder := rmcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoomMessageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rmcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rmcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rmcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rmcb *RoomMessageCreateBulk) SaveX(ctx context.Context) []*RoomMessage {
	v, err := rmcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rmcb *RoomMessageCreateBulk) Exec(ctx context.Context) error {
	_, err := rmcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rmcb *RoomMessageCreateBulk) ExecX(ctx context.Context) {
	if err := rmcb.Exec(ctx); err != nil {
		panic(err)
	}
}
