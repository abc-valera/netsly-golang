// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abc-valera/flugo-api-golang/gen/ent/chatmessage"
	"github.com/abc-valera/flugo-api-golang/gen/ent/chatroom"
	"github.com/abc-valera/flugo-api-golang/gen/ent/predicate"
	"github.com/abc-valera/flugo-api-golang/gen/ent/user"
)

// ChatMessageUpdate is the builder for updating ChatMessage entities.
type ChatMessageUpdate struct {
	config
	hooks    []Hook
	mutation *ChatMessageMutation
}

// Where appends a list predicates to the ChatMessageUpdate builder.
func (cmu *ChatMessageUpdate) Where(ps ...predicate.ChatMessage) *ChatMessageUpdate {
	cmu.mutation.Where(ps...)
	return cmu
}

// SetText sets the "text" field.
func (cmu *ChatMessageUpdate) SetText(s string) *ChatMessageUpdate {
	cmu.mutation.SetText(s)
	return cmu
}

// SetRoomID sets the "room" edge to the ChatRoom entity by ID.
func (cmu *ChatMessageUpdate) SetRoomID(id string) *ChatMessageUpdate {
	cmu.mutation.SetRoomID(id)
	return cmu
}

// SetRoom sets the "room" edge to the ChatRoom entity.
func (cmu *ChatMessageUpdate) SetRoom(c *ChatRoom) *ChatMessageUpdate {
	return cmu.SetRoomID(c.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cmu *ChatMessageUpdate) SetOwnerID(id string) *ChatMessageUpdate {
	cmu.mutation.SetOwnerID(id)
	return cmu
}

// SetOwner sets the "owner" edge to the User entity.
func (cmu *ChatMessageUpdate) SetOwner(u *User) *ChatMessageUpdate {
	return cmu.SetOwnerID(u.ID)
}

// Mutation returns the ChatMessageMutation object of the builder.
func (cmu *ChatMessageUpdate) Mutation() *ChatMessageMutation {
	return cmu.mutation
}

// ClearRoom clears the "room" edge to the ChatRoom entity.
func (cmu *ChatMessageUpdate) ClearRoom() *ChatMessageUpdate {
	cmu.mutation.ClearRoom()
	return cmu
}

// ClearOwner clears the "owner" edge to the User entity.
func (cmu *ChatMessageUpdate) ClearOwner() *ChatMessageUpdate {
	cmu.mutation.ClearOwner()
	return cmu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cmu *ChatMessageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, cmu.sqlSave, cmu.mutation, cmu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmu *ChatMessageUpdate) SaveX(ctx context.Context) int {
	affected, err := cmu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cmu *ChatMessageUpdate) Exec(ctx context.Context) error {
	_, err := cmu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmu *ChatMessageUpdate) ExecX(ctx context.Context) {
	if err := cmu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmu *ChatMessageUpdate) check() error {
	if v, ok := cmu.mutation.Text(); ok {
		if err := chatmessage.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "ChatMessage.text": %w`, err)}
		}
	}
	if _, ok := cmu.mutation.RoomID(); cmu.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ChatMessage.room"`)
	}
	if _, ok := cmu.mutation.OwnerID(); cmu.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ChatMessage.owner"`)
	}
	return nil
}

func (cmu *ChatMessageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cmu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatmessage.Table, chatmessage.Columns, sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeString))
	if ps := cmu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmu.mutation.Text(); ok {
		_spec.SetField(chatmessage.FieldText, field.TypeString, value)
	}
	if cmu.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatmessage.RoomTable,
			Columns: []string{chatmessage.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatmessage.RoomTable,
			Columns: []string{chatmessage.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatmessage.OwnerTable,
			Columns: []string{chatmessage.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatmessage.OwnerTable,
			Columns: []string{chatmessage.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cmu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cmu.mutation.done = true
	return n, nil
}

// ChatMessageUpdateOne is the builder for updating a single ChatMessage entity.
type ChatMessageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatMessageMutation
}

// SetText sets the "text" field.
func (cmuo *ChatMessageUpdateOne) SetText(s string) *ChatMessageUpdateOne {
	cmuo.mutation.SetText(s)
	return cmuo
}

// SetRoomID sets the "room" edge to the ChatRoom entity by ID.
func (cmuo *ChatMessageUpdateOne) SetRoomID(id string) *ChatMessageUpdateOne {
	cmuo.mutation.SetRoomID(id)
	return cmuo
}

// SetRoom sets the "room" edge to the ChatRoom entity.
func (cmuo *ChatMessageUpdateOne) SetRoom(c *ChatRoom) *ChatMessageUpdateOne {
	return cmuo.SetRoomID(c.ID)
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (cmuo *ChatMessageUpdateOne) SetOwnerID(id string) *ChatMessageUpdateOne {
	cmuo.mutation.SetOwnerID(id)
	return cmuo
}

// SetOwner sets the "owner" edge to the User entity.
func (cmuo *ChatMessageUpdateOne) SetOwner(u *User) *ChatMessageUpdateOne {
	return cmuo.SetOwnerID(u.ID)
}

// Mutation returns the ChatMessageMutation object of the builder.
func (cmuo *ChatMessageUpdateOne) Mutation() *ChatMessageMutation {
	return cmuo.mutation
}

// ClearRoom clears the "room" edge to the ChatRoom entity.
func (cmuo *ChatMessageUpdateOne) ClearRoom() *ChatMessageUpdateOne {
	cmuo.mutation.ClearRoom()
	return cmuo
}

// ClearOwner clears the "owner" edge to the User entity.
func (cmuo *ChatMessageUpdateOne) ClearOwner() *ChatMessageUpdateOne {
	cmuo.mutation.ClearOwner()
	return cmuo
}

// Where appends a list predicates to the ChatMessageUpdate builder.
func (cmuo *ChatMessageUpdateOne) Where(ps ...predicate.ChatMessage) *ChatMessageUpdateOne {
	cmuo.mutation.Where(ps...)
	return cmuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cmuo *ChatMessageUpdateOne) Select(field string, fields ...string) *ChatMessageUpdateOne {
	cmuo.fields = append([]string{field}, fields...)
	return cmuo
}

// Save executes the query and returns the updated ChatMessage entity.
func (cmuo *ChatMessageUpdateOne) Save(ctx context.Context) (*ChatMessage, error) {
	return withHooks(ctx, cmuo.sqlSave, cmuo.mutation, cmuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cmuo *ChatMessageUpdateOne) SaveX(ctx context.Context) *ChatMessage {
	node, err := cmuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cmuo *ChatMessageUpdateOne) Exec(ctx context.Context) error {
	_, err := cmuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cmuo *ChatMessageUpdateOne) ExecX(ctx context.Context) {
	if err := cmuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cmuo *ChatMessageUpdateOne) check() error {
	if v, ok := cmuo.mutation.Text(); ok {
		if err := chatmessage.TextValidator(v); err != nil {
			return &ValidationError{Name: "text", err: fmt.Errorf(`ent: validator failed for field "ChatMessage.text": %w`, err)}
		}
	}
	if _, ok := cmuo.mutation.RoomID(); cmuo.mutation.RoomCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ChatMessage.room"`)
	}
	if _, ok := cmuo.mutation.OwnerID(); cmuo.mutation.OwnerCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "ChatMessage.owner"`)
	}
	return nil
}

func (cmuo *ChatMessageUpdateOne) sqlSave(ctx context.Context) (_node *ChatMessage, err error) {
	if err := cmuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(chatmessage.Table, chatmessage.Columns, sqlgraph.NewFieldSpec(chatmessage.FieldID, field.TypeString))
	id, ok := cmuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChatMessage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cmuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatmessage.FieldID)
		for _, f := range fields {
			if !chatmessage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chatmessage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cmuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cmuo.mutation.Text(); ok {
		_spec.SetField(chatmessage.FieldText, field.TypeString, value)
	}
	if cmuo.mutation.RoomCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatmessage.RoomTable,
			Columns: []string{chatmessage.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.RoomIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatmessage.RoomTable,
			Columns: []string{chatmessage.RoomColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cmuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatmessage.OwnerTable,
			Columns: []string{chatmessage.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cmuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   chatmessage.OwnerTable,
			Columns: []string{chatmessage.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ChatMessage{config: cmuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cmuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatmessage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cmuo.mutation.done = true
	return _node, nil
}
