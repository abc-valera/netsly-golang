// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/abc-valera/flugo-api-golang/gen/ent/chatmember"
	"github.com/abc-valera/flugo-api-golang/gen/ent/chatmessage"
	"github.com/abc-valera/flugo-api-golang/gen/ent/chatroom"
	"github.com/abc-valera/flugo-api-golang/gen/ent/comment"
	"github.com/abc-valera/flugo-api-golang/gen/ent/joke"
	"github.com/abc-valera/flugo-api-golang/gen/ent/like"
	"github.com/abc-valera/flugo-api-golang/gen/ent/user"
	"github.com/abc-valera/flugo-api-golang/internal/adapter/persistence/ent/schema"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	chatmemberFields := schema.ChatMember{}.Fields()
	_ = chatmemberFields
	// chatmemberDescChatRoomID is the schema descriptor for chat_room_id field.
	chatmemberDescChatRoomID := chatmemberFields[0].Descriptor()
	// chatmember.ChatRoomIDValidator is a validator for the "chat_room_id" field. It is called by the builders before save.
	chatmember.ChatRoomIDValidator = chatmemberDescChatRoomID.Validators[0].(func(string) error)
	// chatmemberDescUserID is the schema descriptor for user_id field.
	chatmemberDescUserID := chatmemberFields[1].Descriptor()
	// chatmember.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	chatmember.UserIDValidator = chatmemberDescUserID.Validators[0].(func(string) error)
	chatmessageFields := schema.ChatMessage{}.Fields()
	_ = chatmessageFields
	// chatmessageDescChatRoomID is the schema descriptor for chat_room_id field.
	chatmessageDescChatRoomID := chatmessageFields[1].Descriptor()
	// chatmessage.ChatRoomIDValidator is a validator for the "chat_room_id" field. It is called by the builders before save.
	chatmessage.ChatRoomIDValidator = chatmessageDescChatRoomID.Validators[0].(func(string) error)
	// chatmessageDescUserID is the schema descriptor for user_id field.
	chatmessageDescUserID := chatmessageFields[2].Descriptor()
	// chatmessage.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	chatmessage.UserIDValidator = chatmessageDescUserID.Validators[0].(func(string) error)
	// chatmessageDescText is the schema descriptor for text field.
	chatmessageDescText := chatmessageFields[3].Descriptor()
	// chatmessage.TextValidator is a validator for the "text" field. It is called by the builders before save.
	chatmessage.TextValidator = chatmessageDescText.Validators[0].(func(string) error)
	// chatmessageDescID is the schema descriptor for id field.
	chatmessageDescID := chatmessageFields[0].Descriptor()
	// chatmessage.IDValidator is a validator for the "id" field. It is called by the builders before save.
	chatmessage.IDValidator = chatmessageDescID.Validators[0].(func(string) error)
	chatroomFields := schema.ChatRoom{}.Fields()
	_ = chatroomFields
	// chatroomDescName is the schema descriptor for name field.
	chatroomDescName := chatroomFields[1].Descriptor()
	// chatroom.NameValidator is a validator for the "name" field. It is called by the builders before save.
	chatroom.NameValidator = chatroomDescName.Validators[0].(func(string) error)
	// chatroomDescID is the schema descriptor for id field.
	chatroomDescID := chatroomFields[0].Descriptor()
	// chatroom.IDValidator is a validator for the "id" field. It is called by the builders before save.
	chatroom.IDValidator = chatroomDescID.Validators[0].(func(string) error)
	commentFields := schema.Comment{}.Fields()
	_ = commentFields
	// commentDescUserID is the schema descriptor for user_id field.
	commentDescUserID := commentFields[1].Descriptor()
	// comment.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	comment.UserIDValidator = commentDescUserID.Validators[0].(func(string) error)
	// commentDescJokeID is the schema descriptor for joke_id field.
	commentDescJokeID := commentFields[2].Descriptor()
	// comment.JokeIDValidator is a validator for the "joke_id" field. It is called by the builders before save.
	comment.JokeIDValidator = commentDescJokeID.Validators[0].(func(string) error)
	// commentDescText is the schema descriptor for text field.
	commentDescText := commentFields[3].Descriptor()
	// comment.TextValidator is a validator for the "text" field. It is called by the builders before save.
	comment.TextValidator = commentDescText.Validators[0].(func(string) error)
	// commentDescID is the schema descriptor for id field.
	commentDescID := commentFields[0].Descriptor()
	// comment.IDValidator is a validator for the "id" field. It is called by the builders before save.
	comment.IDValidator = commentDescID.Validators[0].(func(string) error)
	jokeFields := schema.Joke{}.Fields()
	_ = jokeFields
	// jokeDescUserID is the schema descriptor for user_id field.
	jokeDescUserID := jokeFields[1].Descriptor()
	// joke.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	joke.UserIDValidator = jokeDescUserID.Validators[0].(func(string) error)
	// jokeDescTitle is the schema descriptor for title field.
	jokeDescTitle := jokeFields[2].Descriptor()
	// joke.TitleValidator is a validator for the "title" field. It is called by the builders before save.
	joke.TitleValidator = jokeDescTitle.Validators[0].(func(string) error)
	// jokeDescText is the schema descriptor for text field.
	jokeDescText := jokeFields[3].Descriptor()
	// joke.TextValidator is a validator for the "text" field. It is called by the builders before save.
	joke.TextValidator = jokeDescText.Validators[0].(func(string) error)
	// jokeDescID is the schema descriptor for id field.
	jokeDescID := jokeFields[0].Descriptor()
	// joke.IDValidator is a validator for the "id" field. It is called by the builders before save.
	joke.IDValidator = jokeDescID.Validators[0].(func(string) error)
	likeFields := schema.Like{}.Fields()
	_ = likeFields
	// likeDescUserID is the schema descriptor for user_id field.
	likeDescUserID := likeFields[0].Descriptor()
	// like.UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	like.UserIDValidator = likeDescUserID.Validators[0].(func(string) error)
	// likeDescJokeID is the schema descriptor for joke_id field.
	likeDescJokeID := likeFields[1].Descriptor()
	// like.JokeIDValidator is a validator for the "joke_id" field. It is called by the builders before save.
	like.JokeIDValidator = likeDescJokeID.Validators[0].(func(string) error)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescUsername is the schema descriptor for username field.
	userDescUsername := userFields[1].Descriptor()
	// user.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	user.UsernameValidator = userDescUsername.Validators[0].(func(string) error)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[2].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescHashedPassword is the schema descriptor for hashed_password field.
	userDescHashedPassword := userFields[3].Descriptor()
	// user.HashedPasswordValidator is a validator for the "hashed_password" field. It is called by the builders before save.
	user.HashedPasswordValidator = userDescHashedPassword.Validators[0].(func(string) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.IDValidator is a validator for the "id" field. It is called by the builders before save.
	user.IDValidator = userDescID.Validators[0].(func(string) error)
}
