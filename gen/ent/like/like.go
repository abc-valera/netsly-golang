// Code generated by ent, DO NOT EDIT.

package like

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the like type in the database.
	Label = "like"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUserID holds the string denoting the user_id field in the database.
	FieldUserID = "user_id"
	// FieldJokeID holds the string denoting the joke_id field in the database.
	FieldJokeID = "joke_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeLikedJoke holds the string denoting the liked_joke edge name in mutations.
	EdgeLikedJoke = "liked_joke"
	// Table holds the table name of the like in the database.
	Table = "likes"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "likes"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_likes"
	// LikedJokeTable is the table that holds the liked_joke relation/edge.
	LikedJokeTable = "likes"
	// LikedJokeInverseTable is the table name for the Joke entity.
	// It exists in this package in order to avoid circular dependency with the "joke" package.
	LikedJokeInverseTable = "jokes"
	// LikedJokeColumn is the table column denoting the liked_joke relation/edge.
	LikedJokeColumn = "joke_likes"
)

// Columns holds all SQL columns for like fields.
var Columns = []string{
	FieldID,
	FieldUserID,
	FieldJokeID,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "likes"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"joke_likes",
	"user_likes",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// UserIDValidator is a validator for the "user_id" field. It is called by the builders before save.
	UserIDValidator func(string) error
	// JokeIDValidator is a validator for the "joke_id" field. It is called by the builders before save.
	JokeIDValidator func(string) error
)

// OrderOption defines the ordering options for the Like queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByUserID orders the results by the user_id field.
func ByUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUserID, opts...).ToFunc()
}

// ByJokeID orders the results by the joke_id field.
func ByJokeID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldJokeID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}

// ByLikedJokeField orders the results by liked_joke field.
func ByLikedJokeField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newLikedJokeStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
func newLikedJokeStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(LikedJokeInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, LikedJokeTable, LikedJokeColumn),
	)
}
