// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/abc-valera/netsly-api-golang/gen/ent/chatroom"
	"github.com/abc-valera/netsly-api-golang/gen/ent/predicate"
)

// ChatRoomDelete is the builder for deleting a ChatRoom entity.
type ChatRoomDelete struct {
	config
	hooks    []Hook
	mutation *ChatRoomMutation
}

// Where appends a list predicates to the ChatRoomDelete builder.
func (crd *ChatRoomDelete) Where(ps ...predicate.ChatRoom) *ChatRoomDelete {
	crd.mutation.Where(ps...)
	return crd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (crd *ChatRoomDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, crd.sqlExec, crd.mutation, crd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (crd *ChatRoomDelete) ExecX(ctx context.Context) int {
	n, err := crd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (crd *ChatRoomDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(chatroom.Table, sqlgraph.NewFieldSpec(chatroom.FieldID, field.TypeString))
	if ps := crd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, crd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	crd.mutation.done = true
	return affected, err
}

// ChatRoomDeleteOne is the builder for deleting a single ChatRoom entity.
type ChatRoomDeleteOne struct {
	crd *ChatRoomDelete
}

// Where appends a list predicates to the ChatRoomDelete builder.
func (crdo *ChatRoomDeleteOne) Where(ps ...predicate.ChatRoom) *ChatRoomDeleteOne {
	crdo.crd.mutation.Where(ps...)
	return crdo
}

// Exec executes the deletion query.
func (crdo *ChatRoomDeleteOne) Exec(ctx context.Context) error {
	n, err := crdo.crd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{chatroom.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (crdo *ChatRoomDeleteOne) ExecX(ctx context.Context) {
	if err := crdo.Exec(ctx); err != nil {
		panic(err)
	}
}
