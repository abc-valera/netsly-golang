// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"fmt"
	"time"

	"github.com/go-faster/errors"
)

func (s *CodeErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

type BearerAuth struct {
	Token string
}

// GetToken returns the value of Token.
func (s *BearerAuth) GetToken() string {
	return s.Token
}

// SetToken sets the value of Token.
func (s *BearerAuth) SetToken(val string) {
	s.Token = val
}

// Ref: #/components/schemas/code_error
type CodeError struct {
	Code    CodeErrorCode `json:"code"`
	Message string        `json:"message"`
}

// GetCode returns the value of Code.
func (s *CodeError) GetCode() CodeErrorCode {
	return s.Code
}

// GetMessage returns the value of Message.
func (s *CodeError) GetMessage() string {
	return s.Message
}

// SetCode sets the value of Code.
func (s *CodeError) SetCode(val CodeErrorCode) {
	s.Code = val
}

// SetMessage sets the value of Message.
func (s *CodeError) SetMessage(val string) {
	s.Message = val
}

type CodeErrorCode string

const (
	CodeErrorCodeUnauthenticated  CodeErrorCode = "unauthenticated"
	CodeErrorCodeInvalidArgument  CodeErrorCode = "invalid_argument"
	CodeErrorCodeNotFound         CodeErrorCode = "not_found"
	CodeErrorCodeAlreadyExists    CodeErrorCode = "already_exists"
	CodeErrorCodePermissionDenied CodeErrorCode = "permission_denied"
	CodeErrorCodeInternal         CodeErrorCode = "internal"
)

// AllValues returns all CodeErrorCode values.
func (CodeErrorCode) AllValues() []CodeErrorCode {
	return []CodeErrorCode{
		CodeErrorCodeUnauthenticated,
		CodeErrorCodeInvalidArgument,
		CodeErrorCodeNotFound,
		CodeErrorCodeAlreadyExists,
		CodeErrorCodePermissionDenied,
		CodeErrorCodeInternal,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CodeErrorCode) MarshalText() ([]byte, error) {
	switch s {
	case CodeErrorCodeUnauthenticated:
		return []byte(s), nil
	case CodeErrorCodeInvalidArgument:
		return []byte(s), nil
	case CodeErrorCodeNotFound:
		return []byte(s), nil
	case CodeErrorCodeAlreadyExists:
		return []byte(s), nil
	case CodeErrorCodePermissionDenied:
		return []byte(s), nil
	case CodeErrorCodeInternal:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CodeErrorCode) UnmarshalText(data []byte) error {
	switch CodeErrorCode(data) {
	case CodeErrorCodeUnauthenticated:
		*s = CodeErrorCodeUnauthenticated
		return nil
	case CodeErrorCodeInvalidArgument:
		*s = CodeErrorCodeInvalidArgument
		return nil
	case CodeErrorCodeNotFound:
		*s = CodeErrorCodeNotFound
		return nil
	case CodeErrorCodeAlreadyExists:
		*s = CodeErrorCodeAlreadyExists
		return nil
	case CodeErrorCodePermissionDenied:
		*s = CodeErrorCodePermissionDenied
		return nil
	case CodeErrorCodeInternal:
		*s = CodeErrorCodeInternal
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// CodeErrorStatusCode wraps CodeError with StatusCode.
type CodeErrorStatusCode struct {
	StatusCode int
	Response   CodeError
}

// GetStatusCode returns the value of StatusCode.
func (s *CodeErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *CodeErrorStatusCode) GetResponse() CodeError {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *CodeErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *CodeErrorStatusCode) SetResponse(val CodeError) {
	s.Response = val
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type SignInPostOK struct {
	UserResponse User   `json:"userResponse"`
	AccessToken  string `json:"accessToken"`
	RefreshToken string `json:"refreshToken"`
}

// GetUserResponse returns the value of UserResponse.
func (s *SignInPostOK) GetUserResponse() User {
	return s.UserResponse
}

// GetAccessToken returns the value of AccessToken.
func (s *SignInPostOK) GetAccessToken() string {
	return s.AccessToken
}

// GetRefreshToken returns the value of RefreshToken.
func (s *SignInPostOK) GetRefreshToken() string {
	return s.RefreshToken
}

// SetUserResponse sets the value of UserResponse.
func (s *SignInPostOK) SetUserResponse(val User) {
	s.UserResponse = val
}

// SetAccessToken sets the value of AccessToken.
func (s *SignInPostOK) SetAccessToken(val string) {
	s.AccessToken = val
}

// SetRefreshToken sets the value of RefreshToken.
func (s *SignInPostOK) SetRefreshToken(val string) {
	s.RefreshToken = val
}

type SignInPostReq struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetEmail returns the value of Email.
func (s *SignInPostReq) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *SignInPostReq) GetPassword() string {
	return s.Password
}

// SetEmail sets the value of Email.
func (s *SignInPostReq) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *SignInPostReq) SetPassword(val string) {
	s.Password = val
}

// SignUpPostCreated is response for SignUpPost operation.
type SignUpPostCreated struct{}

type SignUpPostReq struct {
	Username string `json:"username"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

// GetUsername returns the value of Username.
func (s *SignUpPostReq) GetUsername() string {
	return s.Username
}

// GetEmail returns the value of Email.
func (s *SignUpPostReq) GetEmail() string {
	return s.Email
}

// GetPassword returns the value of Password.
func (s *SignUpPostReq) GetPassword() string {
	return s.Password
}

// SetUsername sets the value of Username.
func (s *SignUpPostReq) SetUsername(val string) {
	s.Username = val
}

// SetEmail sets the value of Email.
func (s *SignUpPostReq) SetEmail(val string) {
	s.Email = val
}

// SetPassword sets the value of Password.
func (s *SignUpPostReq) SetPassword(val string) {
	s.Password = val
}

// Ref: #/components/schemas/user
type User struct {
	ID        string    `json:"id"`
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	Fullname  OptString `json:"fullname"`
	Status    OptString `json:"status"`
	CreatedAt time.Time `json:"created_at"`
}

// GetID returns the value of ID.
func (s *User) GetID() string {
	return s.ID
}

// GetUsername returns the value of Username.
func (s *User) GetUsername() string {
	return s.Username
}

// GetEmail returns the value of Email.
func (s *User) GetEmail() string {
	return s.Email
}

// GetFullname returns the value of Fullname.
func (s *User) GetFullname() OptString {
	return s.Fullname
}

// GetStatus returns the value of Status.
func (s *User) GetStatus() OptString {
	return s.Status
}

// GetCreatedAt returns the value of CreatedAt.
func (s *User) GetCreatedAt() time.Time {
	return s.CreatedAt
}

// SetID sets the value of ID.
func (s *User) SetID(val string) {
	s.ID = val
}

// SetUsername sets the value of Username.
func (s *User) SetUsername(val string) {
	s.Username = val
}

// SetEmail sets the value of Email.
func (s *User) SetEmail(val string) {
	s.Email = val
}

// SetFullname sets the value of Fullname.
func (s *User) SetFullname(val OptString) {
	s.Fullname = val
}

// SetStatus sets the value of Status.
func (s *User) SetStatus(val OptString) {
	s.Status = val
}

// SetCreatedAt sets the value of CreatedAt.
func (s *User) SetCreatedAt(val time.Time) {
	s.CreatedAt = val
}
