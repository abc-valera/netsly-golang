// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'j': // Prefix: "jokes"
				origElem := elem
				if l := len("jokes"); len(elem) >= l && elem[0:l] == "jokes" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "DELETE":
						s.handleJokesDelRequest([0]string{}, elemIsEscaped, w, r)
					case "GET":
						s.handleJokesGetRequest([0]string{}, elemIsEscaped, w, r)
					case "POST":
						s.handleJokesPostRequest([0]string{}, elemIsEscaped, w, r)
					case "PUT":
						s.handleJokesPutRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "DELETE,GET,POST,PUT")
					}

					return
				}

				elem = origElem
			case 'm': // Prefix: "me"
				origElem := elem
				if l := len("me"); len(elem) >= l && elem[0:l] == "me" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "DELETE":
						s.handleMeDelRequest([0]string{}, elemIsEscaped, w, r)
					case "GET":
						s.handleMeGetRequest([0]string{}, elemIsEscaped, w, r)
					case "PUT":
						s.handleMePutRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "DELETE,GET,PUT")
					}

					return
				}

				elem = origElem
			case 's': // Prefix: "sign/"
				origElem := elem
				if l := len("sign/"); len(elem) >= l && elem[0:l] == "sign/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "in"
					origElem := elem
					if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleSignInPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				case 'r': // Prefix: "refresh"
					origElem := elem
					if l := len("refresh"); len(elem) >= l && elem[0:l] == "refresh" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleSignRefreshPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				case 'u': // Prefix: "up"
					origElem := elem
					if l := len("up"); len(elem) >= l && elem[0:l] == "up" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleSignUpPostRequest([0]string{}, elemIsEscaped, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [0]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/"
			origElem := elem
			if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'j': // Prefix: "jokes"
				origElem := elem
				if l := len("jokes"); len(elem) >= l && elem[0:l] == "jokes" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "DELETE":
						r.name = "JokesDel"
						r.summary = "Deletes joke for current user"
						r.operationID = "JokesDel"
						r.pathPattern = "/jokes"
						r.args = args
						r.count = 0
						return r, true
					case "GET":
						r.name = "JokesGet"
						r.summary = "Returns jokes of the current user"
						r.operationID = "JokesGet"
						r.pathPattern = "/jokes"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						r.name = "JokesPost"
						r.summary = "Creates a new joke for current user"
						r.operationID = "JokesPost"
						r.pathPattern = "/jokes"
						r.args = args
						r.count = 0
						return r, true
					case "PUT":
						r.name = "JokesPut"
						r.summary = "Updates joke for current user"
						r.operationID = "JokesPut"
						r.pathPattern = "/jokes"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 'm': // Prefix: "me"
				origElem := elem
				if l := len("me"); len(elem) >= l && elem[0:l] == "me" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "DELETE":
						r.name = "MeDel"
						r.summary = "Deletes current user profile"
						r.operationID = "MeDel"
						r.pathPattern = "/me"
						r.args = args
						r.count = 0
						return r, true
					case "GET":
						r.name = "MeGet"
						r.summary = "Returns current user profile"
						r.operationID = "MeGet"
						r.pathPattern = "/me"
						r.args = args
						r.count = 0
						return r, true
					case "PUT":
						r.name = "MePut"
						r.summary = "Updates current user profile"
						r.operationID = "MePut"
						r.pathPattern = "/me"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}

				elem = origElem
			case 's': // Prefix: "sign/"
				origElem := elem
				if l := len("sign/"); len(elem) >= l && elem[0:l] == "sign/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "in"
					origElem := elem
					if l := len("in"); len(elem) >= l && elem[0:l] == "in" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "SignInPost"
							r.summary = "Performs user authentication"
							r.operationID = "SignInPost"
							r.pathPattern = "/sign/in"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'r': // Prefix: "refresh"
					origElem := elem
					if l := len("refresh"); len(elem) >= l && elem[0:l] == "refresh" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "SignRefreshPost"
							r.summary = "Exchanges a refresh token for an access token"
							r.operationID = "SignRefreshPost"
							r.pathPattern = "/sign/refresh"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				case 'u': // Prefix: "up"
					origElem := elem
					if l := len("up"); len(elem) >= l && elem[0:l] == "up" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch method {
						case "POST":
							r.name = "SignUpPost"
							r.summary = "Performs user registration"
							r.operationID = "SignUpPost"
							r.pathPattern = "/sign/up"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}

					elem = origElem
				}

				elem = origElem
			}

			elem = origElem
		}
	}
	return r, false
}
