// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/uri"
)

// EncodeURI encodes CommentsByJokeIDGetSelector as URI form.
func (s *CommentsByJokeIDGetSelector) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("order", func(e uri.Encoder) error {
		if val, ok := s.Order.Get(); ok {
			return e.EncodeValue(conv.StringToString(string(val)))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"order\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("offset", func(e uri.Encoder) error {
		if val, ok := s.Offset.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"offset\"")
	}
	return nil
}

var uriFieldsNameOfCommentsByJokeIDGetSelector = [3]string{
	0: "order",
	1: "limit",
	2: "offset",
}

// DecodeURI decodes CommentsByJokeIDGetSelector from URI form.
func (s *CommentsByJokeIDGetSelector) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CommentsByJokeIDGetSelector to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "order":
			if err := func() error {
				var sDotOrderVal Order
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotOrderVal = Order(c)
					return nil
				}(); err != nil {
					return err
				}
				s.Order.SetTo(sDotOrderVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "offset":
			if err := func() error {
				var sDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Offset.SetTo(sDotOffsetVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"offset\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CommentsByJokeIDGetSelector")
	}

	return nil
}

// EncodeURI encodes MeJokesGetSelector as URI form.
func (s *MeJokesGetSelector) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("order", func(e uri.Encoder) error {
		if val, ok := s.Order.Get(); ok {
			return e.EncodeValue(conv.StringToString(string(val)))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"order\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("offset", func(e uri.Encoder) error {
		if val, ok := s.Offset.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"offset\"")
	}
	return nil
}

var uriFieldsNameOfMeJokesGetSelector = [3]string{
	0: "order",
	1: "limit",
	2: "offset",
}

// DecodeURI decodes MeJokesGetSelector from URI form.
func (s *MeJokesGetSelector) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MeJokesGetSelector to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "order":
			if err := func() error {
				var sDotOrderVal Order
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotOrderVal = Order(c)
					return nil
				}(); err != nil {
					return err
				}
				s.Order.SetTo(sDotOrderVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "offset":
			if err := func() error {
				var sDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Offset.SetTo(sDotOffsetVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"offset\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MeJokesGetSelector")
	}

	return nil
}

// EncodeURI encodes MeRoomsGetSelector as URI form.
func (s *MeRoomsGetSelector) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("order", func(e uri.Encoder) error {
		if val, ok := s.Order.Get(); ok {
			return e.EncodeValue(conv.StringToString(string(val)))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"order\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("offset", func(e uri.Encoder) error {
		if val, ok := s.Offset.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"offset\"")
	}
	return nil
}

var uriFieldsNameOfMeRoomsGetSelector = [3]string{
	0: "order",
	1: "limit",
	2: "offset",
}

// DecodeURI decodes MeRoomsGetSelector from URI form.
func (s *MeRoomsGetSelector) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MeRoomsGetSelector to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "order":
			if err := func() error {
				var sDotOrderVal Order
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotOrderVal = Order(c)
					return nil
				}(); err != nil {
					return err
				}
				s.Order.SetTo(sDotOrderVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "offset":
			if err := func() error {
				var sDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Offset.SetTo(sDotOffsetVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"offset\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MeRoomsGetSelector")
	}

	return nil
}

// EncodeURI encodes MeRoomsIdMessagesGetSelector as URI form.
func (s *MeRoomsIdMessagesGetSelector) EncodeURI(e uri.Encoder) error {
	if err := e.EncodeField("order", func(e uri.Encoder) error {
		if val, ok := s.Order.Get(); ok {
			return e.EncodeValue(conv.StringToString(string(val)))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"order\"")
	}
	if err := e.EncodeField("limit", func(e uri.Encoder) error {
		if val, ok := s.Limit.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"limit\"")
	}
	if err := e.EncodeField("offset", func(e uri.Encoder) error {
		if val, ok := s.Offset.Get(); ok {
			return e.EncodeValue(conv.IntToString(val))
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "encode field \"offset\"")
	}
	return nil
}

var uriFieldsNameOfMeRoomsIdMessagesGetSelector = [3]string{
	0: "order",
	1: "limit",
	2: "offset",
}

// DecodeURI decodes MeRoomsIdMessagesGetSelector from URI form.
func (s *MeRoomsIdMessagesGetSelector) DecodeURI(d uri.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode MeRoomsIdMessagesGetSelector to nil")
	}

	if err := d.DecodeFields(func(k string, d uri.Decoder) error {
		switch k {
		case "order":
			if err := func() error {
				var sDotOrderVal Order
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					sDotOrderVal = Order(c)
					return nil
				}(); err != nil {
					return err
				}
				s.Order.SetTo(sDotOrderVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		case "limit":
			if err := func() error {
				var sDotLimitVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotLimitVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Limit.SetTo(sDotLimitVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"limit\"")
			}
		case "offset":
			if err := func() error {
				var sDotOffsetVal int
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt(val)
					if err != nil {
						return err
					}

					sDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				s.Offset.SetTo(sDotOffsetVal)
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"offset\"")
			}
		default:
			return nil
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode MeRoomsIdMessagesGetSelector")
	}

	return nil
}
