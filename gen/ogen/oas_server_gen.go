// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CommentsJokeIDGet implements GET /comments/{joke_id} operation.
	//
	// Returns comments of the joke.
	//
	// GET /comments/{joke_id}
	CommentsJokeIDGet(ctx context.Context, params CommentsJokeIDGetParams) (*Comments, error)
	// LikesJokeIDGet implements GET /likes/{joke_id} operation.
	//
	// Counts likes of the joke.
	//
	// GET /likes/{joke_id}
	LikesJokeIDGet(ctx context.Context, params LikesJokeIDGetParams) (int, error)
	// MeCommentsDelete implements DELETE /me/comments operation.
	//
	// Deletes a comment of the current user.
	//
	// DELETE /me/comments
	MeCommentsDelete(ctx context.Context, req *MeCommentsDeleteReq) error
	// MeCommentsPost implements POST /me/comments operation.
	//
	// Creates a comment for the current user and the current joke.
	//
	// POST /me/comments
	MeCommentsPost(ctx context.Context, req *MeCommentsPostReq) error
	// MeCommentsPut implements PUT /me/comments operation.
	//
	// Updates a comment of the current user.
	//
	// PUT /me/comments
	MeCommentsPut(ctx context.Context, req *MeCommentsPutReq) error
	// MeDelete implements DELETE /me operation.
	//
	// Deletes current user profile.
	//
	// DELETE /me
	MeDelete(ctx context.Context, req *MeDeleteReq) error
	// MeGet implements GET /me operation.
	//
	// Returns current user profile.
	//
	// GET /me
	MeGet(ctx context.Context) (*User, error)
	// MeJokesDelete implements DELETE /me/jokes operation.
	//
	// Deletes joke for current user.
	//
	// DELETE /me/jokes
	MeJokesDelete(ctx context.Context, req *MeJokesDeleteReq) error
	// MeJokesGet implements GET /me/jokes operation.
	//
	// Returns jokes of the current user.
	//
	// GET /me/jokes
	MeJokesGet(ctx context.Context) (*Jokes, error)
	// MeJokesPost implements POST /me/jokes operation.
	//
	// Creates a new joke for current user.
	//
	// POST /me/jokes
	MeJokesPost(ctx context.Context, req *MeJokesPostReq) error
	// MeJokesPut implements PUT /me/jokes operation.
	//
	// Updates joke for current user.
	//
	// PUT /me/jokes
	MeJokesPut(ctx context.Context, req *MeJokesPutReq) error
	// MeLikesDelete implements DELETE /me/likes operation.
	//
	// Deletes a like of the current user.
	//
	// DELETE /me/likes
	MeLikesDelete(ctx context.Context, req *MeLikesDeleteReq) error
	// MeLikesPost implements POST /me/likes operation.
	//
	// Creates a like for a joke for the current user.
	//
	// POST /me/likes
	MeLikesPost(ctx context.Context, req *MeLikesPostReq) error
	// MePut implements PUT /me operation.
	//
	// Updates current user profile.
	//
	// PUT /me
	MePut(ctx context.Context, req *MePutReq) error
	// SignInPost implements POST /sign_in operation.
	//
	// Performs user authentication.
	//
	// POST /sign_in
	SignInPost(ctx context.Context, req *SignInPostReq) (*SignInPostOK, error)
	// SignRefreshPost implements POST /sign_refresh operation.
	//
	// Exchanges a refresh token for an access token.
	//
	// POST /sign_refresh
	SignRefreshPost(ctx context.Context, req *SignRefreshPostReq) (*SignRefreshPostOK, error)
	// SignUpPost implements POST /sign_up operation.
	//
	// Performs user registration.
	//
	// POST /sign_up
	SignUpPost(ctx context.Context, req *SignUpPostReq) error
	// NewError creates *CodeErrorStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *CodeErrorStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
