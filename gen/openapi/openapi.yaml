openapi: 3.0.0
info:
  version: 0.1.0
  title: Flugo API
  termsOfService: https://github.com/abc-valera/flugo-api-golang
  contact:
    email: zoocity14@gmail.com
    url: https://github.com/abc-valera/flugo-api-golang
  description: API for Flugo social network
servers:
  - url: http://localhost:3000
tags:
  - name: sign
    description: Everything about managing user sessions
  - name: me
    description: Everything about managing current user profile
  - name: users
    description: Everything about finding users
  - name: jokes
    description: Everything about finding jokes
  - name: comments
    description: Everything about finding comments
externalDocs:
  description: Learn more about the project.
  url: https://github.com/abc-valera/flugo-api-golang
paths:
  /sign_up:
    post:
      tags:
        - sign
      summary: Performs user registration
      requestBody:
        description: Data to add new user to the social network
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user1
                email:
                  type: string
                  example: user1@gmail.com
                password:
                  type: string
                  example: 123456789
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: Successful operation
        default:
          $ref: '#/components/responses/code_error'
  /sign_in:
    post:
      tags:
        - sign
      summary: Performs user authentication
      requestBody:
        description: Data to perform sign in to the social network
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user1@gmail.com
                password:
                  type: string
                  example: 123456789
              required:
                - email
                - password
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  userResponse:
                    $ref: '#/components/schemas/user'
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                  refreshToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                required:
                  - userResponse
                  - accessToken
                  - refreshToken
        default:
          $ref: '#/components/responses/code_error'
  /me:
    get:
      tags:
        - me
      summary: Returns current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/user'
        default:
          $ref: '#/components/responses/code_error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    code_error:
      type: object
      title: CodeError
      properties:
        code:
          type: string
          enum:
            - unauthenticated
            - invalid_argument
            - not_found
            - already_exists
            - permission_denied
            - internal
        message:
          type: string
      required:
        - code
        - message
    user:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
          example: user1
        email:
          type: string
          example: user1@gmail.com
        fullname:
          type: string
          example: User 1
        status:
          type: string
          example: Just coding
        created_at:
          type: string
          format: date-time
          example: '2021-08-01T00:00:00Z'
      required:
        - id
        - username
        - email
        - created_at
  responses:
    code_error:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/code_error'
    user:
      description: User profile
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
