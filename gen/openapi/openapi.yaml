openapi: 3.0.0
info:
  version: 0.1.0
  title: Netsly API
  termsOfService: https://github.com/abc-valera/netsly-golang
  contact:
    email: zoocity14@gmail.com
    url: https://github.com/abc-valera/netsly-golang
  description: API for Netsly social network
servers:
  - url: http://localhost:3010/api/v1
    description: Development server
tags:
  - name: sign
    description: Everything about managing user sessions
  - name: me
    description: Everything about managing current user profile
  - name: rooms
    description: Everything about managing rooms
  - name: users
    description: Everything about searching users
  - name: jokes
    description: Everything about searching jokes
  - name: comments
    description: Everything about searching comments
  - name: likes
    description: Everything about counting likes
externalDocs:
  description: Learn more about the project.
  url: https://github.com/abc-valera/netsly-golang
paths:
  /sign/up:
    post:
      tags:
        - sign
      summary: Performs user registration
      operationId: SignUpPost
      requestBody:
        description: Data to add new user to the social network
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: user1
                email:
                  type: string
                  example: user1@gmail.com
                password:
                  type: string
                  example: qwerty
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: Successful operation
        default:
          $ref: '#/components/responses/code_error'
  /sign/in:
    post:
      tags:
        - sign
      summary: Performs user authentication
      operationId: SignInPost
      requestBody:
        description: Data to perform sign in to the social network
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user1@gmail.com
                password:
                  type: string
                  example: qwerty
              required:
                - email
                - password
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_response:
                    $ref: '#/components/schemas/user'
                  access_token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                  refresh_token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                required:
                  - user_response
                  - access_token
                  - refresh_token
        default:
          $ref: '#/components/responses/code_error'
  /sign/refresh:
    post:
      tags:
        - sign
      summary: Exchanges a refresh token for an access token
      operationId: SignRefreshPost
      requestBody:
        description: Refresh token
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
              required:
                - refresh_token
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                required:
                  - access_token
        default:
          $ref: '#/components/responses/code_error'
  /me:
    get:
      tags:
        - me
      summary: Returns current user profile
      operationId: MeGet
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/user'
        default:
          $ref: '#/components/responses/code_error'
    put:
      tags:
        - me
      summary: Updates current user profile
      operationId: MePut
      security:
        - bearerAuth: []
      requestBody:
        description: Data to update the current user profile
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: '123456'
                fullname:
                  type: string
                  example: John Doe
                status:
                  type: string
                  example: active
      responses:
        '201':
          $ref: '#/components/responses/user'
        default:
          $ref: '#/components/responses/code_error'
    delete:
      tags:
        - me
      summary: Deletes current user profile
      operationId: MeDel
      security:
        - bearerAuth: []
      requestBody:
        description: Data to delete the current user profile
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: '123456'
              required:
                - password
      responses:
        '204':
          description: Successful operation
        default:
          $ref: '#/components/responses/code_error'
  /me/jokes:
    get:
      tags:
        - me
      summary: Returns jokes of the current user
      operationId: MeJokesGet
      parameters:
        - $ref: '#/components/parameters/query_select_params'
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/jokes'
        default:
          $ref: '#/components/responses/code_error'
    post:
      tags:
        - me
      summary: Creates a new joke for current user
      operationId: MeJokesPost
      security:
        - bearerAuth: []
      requestBody:
        description: Data to create a new joke for current user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Joke title
                text:
                  type: string
                  example: Joke text
                explanation:
                  type: string
                  example: Joke explanation
              required:
                - user_id
                - title
                - text
      responses:
        '201':
          $ref: '#/components/responses/joke'
        default:
          $ref: '#/components/responses/code_error'
    put:
      tags:
        - me
      summary: Updates joke for current user
      operationId: MeJokesPut
      security:
        - bearerAuth: []
      requestBody:
        description: Data to update the joke for current user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                joke_id:
                  type: string
                  example: 48690945-c3f9-45b4-9045-c6bcfb898f20
                title:
                  type: string
                  example: Joke title
                text:
                  type: string
                  example: Joke text
                explanation:
                  type: string
                  example: Joke explanation
              required:
                - joke_id
      responses:
        '201':
          $ref: '#/components/responses/joke'
        default:
          $ref: '#/components/responses/code_error'
    delete:
      tags:
        - me
      summary: Deletes joke for current user
      operationId: MeJokesDel
      security:
        - bearerAuth: []
      requestBody:
        description: Data to delete the joke for current user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                joke_id:
                  type: string
                  example: 48690945-c3f9-45b4-9045-c6bcfb898f20
              required:
                - joke_id
      responses:
        '204':
          description: Joke deleted
        default:
          $ref: '#/components/responses/code_error'
  /me/comments:
    post:
      tags:
        - me
      summary: Creates a comment for the current user and the current joke
      operationId: MeCommentsPost
      security:
        - bearerAuth: []
      requestBody:
        description: Create Comment Request
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                joke_id:
                  type: string
                  example: '1'
                text:
                  type: string
                  example: Text of comment 1
              required:
                - user_id
                - joke_id
                - text
      responses:
        '200':
          $ref: '#/components/responses/comment'
        default:
          $ref: '#/components/responses/code_error'
    put:
      tags:
        - me
      summary: Updates a comment of the current user
      operationId: MeCommentsPut
      security:
        - bearerAuth: []
      requestBody:
        description: Update Comment Request
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment_id:
                  type: string
                  example: '1'
                text:
                  type: string
                  example: Text of comment 1
              required:
                - comment_id
      responses:
        '200':
          $ref: '#/components/responses/comment'
        default:
          $ref: '#/components/responses/code_error'
    delete:
      tags:
        - me
      summary: Deletes a comment of the current user
      operationId: MeCommentsDel
      security:
        - bearerAuth: []
      requestBody:
        description: Delete Comment Request
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment_id:
                  type: string
                  example: '1'
              required:
                - comment_id
      responses:
        '204':
          description: Comment deleted
        default:
          $ref: '#/components/responses/code_error'
  /me/likes:
    post:
      tags:
        - me
      summary: Creates a like for a joke for the current user
      operationId: MeLikesPost
      security:
        - bearerAuth: []
      requestBody:
        description: Data to create a like for a joke for the current user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                joke_id:
                  type: string
                  example: 48690945-c3f9-45b4-9045-c6bcfb898f20
              required:
                - joke_id
      responses:
        '201':
          description: Like created
        default:
          $ref: '#/components/responses/code_error'
    delete:
      tags:
        - me
      summary: Deletes a like of the current user
      operationId: MeLikesDel
      security:
        - bearerAuth: []
      requestBody:
        description: Data to delete a like of the current user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                joke_id:
                  type: string
                  example: 48690945-c3f9-45b4-9045-c6bcfb898f20
              required:
                - joke_id
      responses:
        '204':
          description: Like deleted
        default:
          $ref: '#/components/responses/code_error'
  /me/rooms:
    get:
      tags:
        - me
        - rooms
      summary: Returns rooms current user is a member of
      operationId: MeRoomsGet
      parameters:
        - $ref: '#/components/parameters/query_select_params'
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/rooms'
        default:
          $ref: '#/components/responses/code_error'
    post:
      tags:
        - me
      summary: Creates a new room
      operationId: MeRoomsPost
      security:
        - bearerAuth: []
      requestBody:
        description: Data to create a new room
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: My Room
                description:
                  type: string
                  example: This is my room
              required:
                - name
      responses:
        '201':
          $ref: '#/components/responses/room'
        default:
          $ref: '#/components/responses/code_error'
    put:
      tags:
        - me
      summary: Updates room
      operationId: MeRoomsPut
      security:
        - bearerAuth: []
      requestBody:
        description: Data to update the room
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: 48690945-c3f9-45b4-9045-c6bcfb898f20
                name:
                  type: string
                  example: My Room
                description:
                  type: string
                  example: This is my room
              required:
                - id
      responses:
        '201':
          $ref: '#/components/responses/room'
        default:
          $ref: '#/components/responses/code_error'
    delete:
      tags:
        - me
      summary: Deletes room
      operationId: MeRoomsDelete
      security:
        - bearerAuth: []
      requestBody:
        description: Data to delete the room
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: 48690945-c3f9-45b4-9045-c6bcfb898f20
              required:
                - id
      responses:
        '204':
          description: Room deleted
        default:
          $ref: '#/components/responses/code_error'
  /me/rooms/join:
    post:
      tags:
        - me
        - rooms
      summary: Join room
      operationId: MeChatRoomsJoinPost
      security:
        - bearerAuth: []
      requestBody:
        description: Data to join room
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: 48690945-c3f9-45b4-9045-c6bcfb898f20
              required:
                - id
      responses:
        '201':
          description: Joined room
        default:
          $ref: '#/components/responses/code_error'
  /rooms/{room_id}/messages:
    get:
      tags:
        - me
        - rooms
      summary: Retrieve messages from a room
      operationId: MeRoomsIdMessagesGet
      parameters:
        - $ref: '#/components/parameters/path_room_id'
        - $ref: '#/components/parameters/query_select_params'
      security:
        - bearerAuth: []
      responses:
        '200':
          $ref: '#/components/responses/room_messages'
        default:
          $ref: '#/components/responses/code_error'
  /comments/{joke_id}:
    get:
      tags:
        - comments
      summary: Returns comments of the joke
      operationId: CommentsByJokeIDGet
      parameters:
        - $ref: '#/components/parameters/path_joke_id'
        - $ref: '#/components/parameters/query_select_params'
      responses:
        '200':
          $ref: '#/components/responses/comments'
        default:
          $ref: '#/components/responses/code_error'
  /likes/{joke_id}:
    get:
      tags:
        - likes
      summary: Counts likes of the joke
      operationId: LikesByJokeIDGet
      parameters:
        - $ref: '#/components/parameters/path_joke_id'
      responses:
        '200':
          description: Count of likes
          content:
            application/json:
              schema:
                type: integer
                minimum: 0
        default:
          $ref: '#/components/responses/code_error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    code_error:
      type: object
      title: CodeError
      properties:
        code:
          type: string
          enum:
            - unauthenticated
            - invalid_argument
            - not_found
            - already_exists
            - permission_denied
            - internal
        error_message:
          type: string
      required:
        - code
        - error_message
    user:
      type: object
      properties:
        id:
          type: string
          example: 48690945-c3f9-45b4-9045-c6bcfb898f20
        username:
          type: string
          example: user1
        email:
          type: string
          example: user1@gmail.com
        fullname:
          type: string
          example: User 1
        status:
          type: string
          example: Just coding
        created_at:
          type: string
          format: date-time
          example: '2021-08-01T00:00:00Z'
      required:
        - id
        - username
        - email
        - created_at
    order:
      type: string
      name: order
      enum:
        - asc
        - desc
    joke:
      type: object
      properties:
        id:
          type: string
        userID:
          type: string
        title:
          type: string
          example: Joke 1
        text:
          type: string
          example: Text of joke 1
        explanation:
          type: string
          example: Explanation of joke 1
        createdAt:
          type: string
          format: date-time
          example: '2021-08-01T00:00:00Z'
      required:
        - id
        - userID
        - title
        - text
        - createdAt
    comment:
      type: object
      properties:
        id:
          type: string
        user_id:
          type: string
        joke_id:
          type: string
        text:
          type: string
          example: Text of comment 1
        createdAt:
          type: string
          format: date-time
          example: '2021-08-01T00:00:00Z'
      required:
        - id
        - user_id
        - joke_id
        - text
        - createdAt
    room:
      type: object
      properties:
        id:
          type: string
          example: 48690945-c3f9-45b4-9045-c6bcfb898f20
        creator_user_id:
          type: string
          example: 48690945-c3f9-45b4-9045-c6bcfb898f20
        name:
          type: string
          example: Funny Dad Jokes
        description:
          type: string
          example: A place to share the best dad jokes
        created_at:
          type: string
          format: date-time
          example: '2021-08-01T00:00:00Z'
      required:
        - id
        - creator_user_id
        - name
        - created_at
    room_message:
      type: object
      properties:
        id:
          type: string
          example: 48690945-c3f9-45b4-9045-c6bcfb898f20
        room_id:
          type: string
          example: 48690945-c3f9-45b4-9045-c6bcfb898f20
        user_id:
          type: string
          example: 48690945-c3f9-45b4-9045-c6bcfb898f20
        text:
          type: string
          example: Hello, world!
        created_at:
          type: string
          format: date-time
          example: '2021-08-01T00:00:00Z'
      required:
        - id
        - room_id
        - user_id
        - text
        - created_at
  responses:
    code_error:
      description: General Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/code_error'
    user:
      description: User profile
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/user'
    jokes:
      description: Array of jokes
      content:
        application/json:
          schema:
            type: object
            properties:
              jokes:
                type: array
                items:
                  $ref: '#/components/schemas/joke'
            required:
              - jokes
    joke:
      description: Joke
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/joke'
    comment:
      description: Comment
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/comment'
    rooms:
      description: List of rooms
      content:
        application/json:
          schema:
            type: object
            properties:
              rooms:
                type: array
                items:
                  $ref: '#/components/schemas/room'
            required:
              - rooms
    room:
      description: Place for discussing the humour
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/room'
    room_messages:
      description: List of room messages
      content:
        application/json:
          schema:
            type: object
            properties:
              room_messages:
                type: array
                items:
                  $ref: '#/components/schemas/room_message'
            required:
              - room_messages
    comments:
      description: Array of comments
      content:
        application/json:
          schema:
            type: object
            properties:
              comments:
                type: array
                items:
                  $ref: '#/components/schemas/comment'
            required:
              - comments
  parameters:
    query_select_params:
      name: selector
      in: query
      description: fields to specify select parameters
      required: true
      schema:
        type: object
        properties:
          order:
            $ref: '#/components/schemas/order'
          limit:
            type: integer
            minimum: 0
          offset:
            type: integer
            minimum: 0
    path_room_id:
      name: room_id
      in: path
      description: ID of the room
      required: true
      schema:
        type: string
    path_joke_id:
      name: joke_id
      in: path
      description: ID of the joke
      required: true
      schema:
        type: string
