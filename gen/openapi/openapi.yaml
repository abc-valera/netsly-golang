openapi: 3.0.3
info:
  version: 1.0.0
  title: Netsly API
  termsOfService: https://github.com/abc-valera/netsly-golang
  contact:
    email: zoocity14@gmail.com
    url: https://github.com/abc-valera/netsly-golang
  description: API for the Netsly social network
servers:
  - url: http://api.localhost:3000/v1
    description: Local development server
tags:
  - name: sign
    description: Sessions Management
  - name: me
    description: User Profile Settings
  - name: jokes
    description: Jokes operations
externalDocs:
  description: Learn more about the project.
  url: https://github.com/abc-valera/netsly-golang
paths:
  /sign/up:
    post:
      operationId: SignUpPost
      summary: Performs user registration
      tags:
        - sign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: example-username
                email:
                  type: string
                  example: example@example.com
                password:
                  type: string
                  example: qwerty123
              required:
                - username
                - email
                - password
      responses:
        '201':
          description: Successful operation
        default:
          $ref: '#/components/responses/code_error'
  /sign/in:
    post:
      operationId: SignInPost
      summary: Performs user authentication
      tags:
        - sign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: example@example.com
                password:
                  type: string
                  example: qwerty123
              required:
                - email
                - password
      responses:
        '200':
          description: Registration was successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_response:
                    $ref: '#/components/schemas/user'
                  access_token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                  refresh_token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                required:
                  - user_response
                  - access_token
                  - refresh_token
        default:
          $ref: '#/components/responses/code_error'
  /sign/refresh:
    post:
      operationId: SignRefreshPost
      summary: Exchanges a refresh token for an access token
      tags:
        - sign
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
              required:
                - refresh_token
      responses:
        '200':
          description: New access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                required:
                  - access_token
        default:
          $ref: '#/components/responses/code_error'
  /me:
    get:
      operationId: MeGet
      summary: Returns current user profile
      tags:
        - me
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        default:
          $ref: '#/components/responses/code_error'
    put:
      operationId: MePut
      summary: Updates current user profile
      tags:
        - me
      security:
        - bearerAuth: []
      requestBody:
        description: Data to update the current user profile
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: 123456
                fullname:
                  type: string
                  example: John Doe
                status:
                  type: string
                  example: active
      responses:
        '201':
          description: Updated user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        default:
          $ref: '#/components/responses/code_error'
    delete:
      operationId: MeDel
      summary: Deletes current user profile
      tags:
        - me
      security:
        - bearerAuth: []
      requestBody:
        description: Data to delete the current user profile
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: 123456
              required:
                - password
      responses:
        '204':
          description: Successful deletion
        default:
          $ref: '#/components/responses/code_error'
  /jokes:
    get:
      operationId: JokesGet
      summary: Returns jokes of the current user
      tags:
        - jokes
      parameters:
        - name: limit
          in: query
          description: Number of items returned. If not specified, all instances are returned.
          schema:
            type: integer
        - name: offset
          in: query
          description: Number of items to skip.
          schema:
            type: integer
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Your jokes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jokes'
        default:
          $ref: '#/components/responses/code_error'
    post:
      operationId: JokesPost
      summary: Creates a new joke for current user
      tags:
        - jokes
      security:
        - bearerAuth: []
      requestBody:
        description: Data to create a new joke for current user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Joke title
                text:
                  type: string
                  example: Joke text
                explanation:
                  type: string
                  example: Joke explanation
              required:
                - user_id
                - title
                - text
      responses:
        '201':
          description: Created Joke
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/joke'
        default:
          $ref: '#/components/responses/code_error'
    put:
      operationId: JokesPut
      summary: Updates joke for current user
      tags:
        - jokes
      security:
        - bearerAuth: []
      requestBody:
        description: Data to update the joke for current user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                joke_id:
                  type: string
                  example: 48690945-c3f9-45b4-9045-c6bcfb898f20
                title:
                  type: string
                  example: Joke title
                text:
                  type: string
                  example: Joke text
                explanation:
                  type: string
                  example: Joke explanation
              required:
                - joke_id
      responses:
        '201':
          description: Updated Joke
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/joke'
        default:
          $ref: '#/components/responses/code_error'
    delete:
      operationId: JokesDel
      summary: Deletes joke for current user
      tags:
        - jokes
      security:
        - bearerAuth: []
      requestBody:
        description: Data to delete the joke for current user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                joke_id:
                  type: string
                  example: 48690945-c3f9-45b4-9045-c6bcfb898f20
              required:
                - joke_id
      responses:
        '204':
          description: Joke deleted
        default:
          $ref: '#/components/responses/code_error'
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    code_error:
      description: General Error
      content:
        application/json:
          schema:
            type: object
            title: CodeError
            properties:
              code:
                type: string
                enum:
                  - unauthenticated
                  - invalid_argument
                  - not_found
                  - already_exists
                  - permission_denied
                  - internal
                example: internal
              error_message:
                type: string
                example: Internal error occurred
            required:
              - code
              - error_message
  schemas:
    user:
      title: User
      type: object
      properties:
        id:
          type: string
          example: 48690945-c3f9-45b4-9045-c6bcfb898f20
        username:
          type: string
          example: example-username
        email:
          type: string
          example: example@example.com
        fullname:
          type: string
          example: John Doe
        status:
          type: string
          example: Making humor
        created_at:
          type: string
          format: date-time
          example: '2021-08-01T00:00:00Z'
      required:
        - id
        - username
        - email
        - created_at
    joke:
      title: Joke
      type: object
      properties:
        id:
          type: string
          example: 48690945-c3f9-45b4-9045-c6bcfb898f20
        userID:
          type: string
          example: 71582145-caf9-45b4-9045-caf971582145
        title:
          type: string
          example: Example Joke
        text:
          type: string
          example: Something Funny
        explanation:
          type: string
          example: Ahh.. Don't you get it?
        createdAt:
          type: string
          format: date-time
          example: '2021-08-01T00:00:00Z'
      required:
        - id
        - userID
        - title
        - text
        - createdAt
    jokes:
      type: array
      title: Jokes
      items:
        $ref: '#/components/schemas/joke'
