// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// FileInfo is an object representing the database table.
type FileInfo struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Type      int       `boil:"type" json:"type" toml:"type" yaml:"type"`
	Size      int       `boil:"size" json:"size" toml:"size" yaml:"size"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *fileInfoR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L fileInfoL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FileInfoColumns = struct {
	ID        string
	Name      string
	Type      string
	Size      string
	CreatedAt string
}{
	ID:        "id",
	Name:      "name",
	Type:      "type",
	Size:      "size",
	CreatedAt: "created_at",
}

var FileInfoTableColumns = struct {
	ID        string
	Name      string
	Type      string
	Size      string
	CreatedAt string
}{
	ID:        "FileInfo.id",
	Name:      "FileInfo.name",
	Type:      "FileInfo.type",
	Size:      "FileInfo.size",
	CreatedAt: "FileInfo.created_at",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var FileInfoWhere = struct {
	ID        whereHelperstring
	Name      whereHelperstring
	Type      whereHelperint
	Size      whereHelperint
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "\"FileInfo\".\"id\""},
	Name:      whereHelperstring{field: "\"FileInfo\".\"name\""},
	Type:      whereHelperint{field: "\"FileInfo\".\"type\""},
	Size:      whereHelperint{field: "\"FileInfo\".\"size\""},
	CreatedAt: whereHelpertime_Time{field: "\"FileInfo\".\"created_at\""},
}

// FileInfoRels is where relationship names are stored.
var FileInfoRels = struct {
}{}

// fileInfoR is where relationships are stored.
type fileInfoR struct {
}

// NewStruct creates a new relationship struct
func (*fileInfoR) NewStruct() *fileInfoR {
	return &fileInfoR{}
}

// fileInfoL is where Load methods for each relationship are stored.
type fileInfoL struct{}

var (
	fileInfoAllColumns            = []string{"id", "name", "type", "size", "created_at"}
	fileInfoColumnsWithoutDefault = []string{"id", "name", "type", "size", "created_at"}
	fileInfoColumnsWithDefault    = []string{}
	fileInfoPrimaryKeyColumns     = []string{"id"}
	fileInfoGeneratedColumns      = []string{}
)

type (
	// FileInfoSlice is an alias for a slice of pointers to FileInfo.
	// This should almost always be used instead of []FileInfo.
	FileInfoSlice []*FileInfo
	// FileInfoHook is the signature for custom FileInfo hook methods
	FileInfoHook func(context.Context, boil.ContextExecutor, *FileInfo) error

	fileInfoQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	fileInfoType                 = reflect.TypeOf(&FileInfo{})
	fileInfoMapping              = queries.MakeStructMapping(fileInfoType)
	fileInfoPrimaryKeyMapping, _ = queries.BindMapping(fileInfoType, fileInfoMapping, fileInfoPrimaryKeyColumns)
	fileInfoInsertCacheMut       sync.RWMutex
	fileInfoInsertCache          = make(map[string]insertCache)
	fileInfoUpdateCacheMut       sync.RWMutex
	fileInfoUpdateCache          = make(map[string]updateCache)
	fileInfoUpsertCacheMut       sync.RWMutex
	fileInfoUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var fileInfoAfterSelectMu sync.Mutex
var fileInfoAfterSelectHooks []FileInfoHook

var fileInfoBeforeInsertMu sync.Mutex
var fileInfoBeforeInsertHooks []FileInfoHook
var fileInfoAfterInsertMu sync.Mutex
var fileInfoAfterInsertHooks []FileInfoHook

var fileInfoBeforeUpdateMu sync.Mutex
var fileInfoBeforeUpdateHooks []FileInfoHook
var fileInfoAfterUpdateMu sync.Mutex
var fileInfoAfterUpdateHooks []FileInfoHook

var fileInfoBeforeDeleteMu sync.Mutex
var fileInfoBeforeDeleteHooks []FileInfoHook
var fileInfoAfterDeleteMu sync.Mutex
var fileInfoAfterDeleteHooks []FileInfoHook

var fileInfoBeforeUpsertMu sync.Mutex
var fileInfoBeforeUpsertHooks []FileInfoHook
var fileInfoAfterUpsertMu sync.Mutex
var fileInfoAfterUpsertHooks []FileInfoHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *FileInfo) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileInfoAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *FileInfo) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileInfoBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *FileInfo) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileInfoAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *FileInfo) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileInfoBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *FileInfo) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileInfoAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *FileInfo) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileInfoBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *FileInfo) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileInfoAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *FileInfo) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileInfoBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *FileInfo) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range fileInfoAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddFileInfoHook registers your hook function for all future operations.
func AddFileInfoHook(hookPoint boil.HookPoint, fileInfoHook FileInfoHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		fileInfoAfterSelectMu.Lock()
		fileInfoAfterSelectHooks = append(fileInfoAfterSelectHooks, fileInfoHook)
		fileInfoAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		fileInfoBeforeInsertMu.Lock()
		fileInfoBeforeInsertHooks = append(fileInfoBeforeInsertHooks, fileInfoHook)
		fileInfoBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		fileInfoAfterInsertMu.Lock()
		fileInfoAfterInsertHooks = append(fileInfoAfterInsertHooks, fileInfoHook)
		fileInfoAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		fileInfoBeforeUpdateMu.Lock()
		fileInfoBeforeUpdateHooks = append(fileInfoBeforeUpdateHooks, fileInfoHook)
		fileInfoBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		fileInfoAfterUpdateMu.Lock()
		fileInfoAfterUpdateHooks = append(fileInfoAfterUpdateHooks, fileInfoHook)
		fileInfoAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		fileInfoBeforeDeleteMu.Lock()
		fileInfoBeforeDeleteHooks = append(fileInfoBeforeDeleteHooks, fileInfoHook)
		fileInfoBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		fileInfoAfterDeleteMu.Lock()
		fileInfoAfterDeleteHooks = append(fileInfoAfterDeleteHooks, fileInfoHook)
		fileInfoAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		fileInfoBeforeUpsertMu.Lock()
		fileInfoBeforeUpsertHooks = append(fileInfoBeforeUpsertHooks, fileInfoHook)
		fileInfoBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		fileInfoAfterUpsertMu.Lock()
		fileInfoAfterUpsertHooks = append(fileInfoAfterUpsertHooks, fileInfoHook)
		fileInfoAfterUpsertMu.Unlock()
	}
}

// OneG returns a single fileInfo record from the query using the global executor.
func (q fileInfoQuery) OneG(ctx context.Context) (*FileInfo, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single fileInfo record from the query.
func (q fileInfoQuery) One(ctx context.Context, exec boil.ContextExecutor) (*FileInfo, error) {
	o := &FileInfo{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for FileInfo")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all FileInfo records from the query using the global executor.
func (q fileInfoQuery) AllG(ctx context.Context) (FileInfoSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all FileInfo records from the query.
func (q fileInfoQuery) All(ctx context.Context, exec boil.ContextExecutor) (FileInfoSlice, error) {
	var o []*FileInfo

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to FileInfo slice")
	}

	if len(fileInfoAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all FileInfo records in the query using the global executor
func (q fileInfoQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all FileInfo records in the query.
func (q fileInfoQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count FileInfo rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q fileInfoQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q fileInfoQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if FileInfo exists")
	}

	return count > 0, nil
}

// FileInfos retrieves all the records using an executor.
func FileInfos(mods ...qm.QueryMod) fileInfoQuery {
	mods = append(mods, qm.From("\"FileInfo\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"FileInfo\".*"})
	}

	return fileInfoQuery{q}
}

// FindFileInfoG retrieves a single record by ID.
func FindFileInfoG(ctx context.Context, iD string, selectCols ...string) (*FileInfo, error) {
	return FindFileInfo(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindFileInfo retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFileInfo(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*FileInfo, error) {
	fileInfoObj := &FileInfo{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"FileInfo\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, fileInfoObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from FileInfo")
	}

	if err = fileInfoObj.doAfterSelectHooks(ctx, exec); err != nil {
		return fileInfoObj, err
	}

	return fileInfoObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *FileInfo) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *FileInfo) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no FileInfo provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fileInfoColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	fileInfoInsertCacheMut.RLock()
	cache, cached := fileInfoInsertCache[key]
	fileInfoInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			fileInfoAllColumns,
			fileInfoColumnsWithDefault,
			fileInfoColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(fileInfoType, fileInfoMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(fileInfoType, fileInfoMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"FileInfo\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"FileInfo\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into FileInfo")
	}

	if !cached {
		fileInfoInsertCacheMut.Lock()
		fileInfoInsertCache[key] = cache
		fileInfoInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single FileInfo record using the global executor.
// See Update for more documentation.
func (o *FileInfo) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the FileInfo.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *FileInfo) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	fileInfoUpdateCacheMut.RLock()
	cache, cached := fileInfoUpdateCache[key]
	fileInfoUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			fileInfoAllColumns,
			fileInfoPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update FileInfo, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"FileInfo\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, fileInfoPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(fileInfoType, fileInfoMapping, append(wl, fileInfoPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update FileInfo row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for FileInfo")
	}

	if !cached {
		fileInfoUpdateCacheMut.Lock()
		fileInfoUpdateCache[key] = cache
		fileInfoUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q fileInfoQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q fileInfoQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for FileInfo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for FileInfo")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o FileInfoSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FileInfoSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fileInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"FileInfo\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, fileInfoPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in fileInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all fileInfo")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *FileInfo) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *FileInfo) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sqlboiler: no FileInfo provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(fileInfoColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	fileInfoUpsertCacheMut.RLock()
	cache, cached := fileInfoUpsertCache[key]
	fileInfoUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			fileInfoAllColumns,
			fileInfoColumnsWithDefault,
			fileInfoColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			fileInfoAllColumns,
			fileInfoPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert FileInfo, could not build update column list")
		}

		ret := strmangle.SetComplement(fileInfoAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(fileInfoPrimaryKeyColumns) == 0 {
				return errors.New("sqlboiler: unable to upsert FileInfo, could not build conflict column list")
			}

			conflict = make([]string, len(fileInfoPrimaryKeyColumns))
			copy(conflict, fileInfoPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"FileInfo\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(fileInfoType, fileInfoMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(fileInfoType, fileInfoMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert FileInfo")
	}

	if !cached {
		fileInfoUpsertCacheMut.Lock()
		fileInfoUpsertCache[key] = cache
		fileInfoUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single FileInfo record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *FileInfo) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single FileInfo record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *FileInfo) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no FileInfo provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), fileInfoPrimaryKeyMapping)
	sql := "DELETE FROM \"FileInfo\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from FileInfo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for FileInfo")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q fileInfoQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q fileInfoQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no fileInfoQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from FileInfo")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for FileInfo")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o FileInfoSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FileInfoSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(fileInfoBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fileInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"FileInfo\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fileInfoPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from fileInfo slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for FileInfo")
	}

	if len(fileInfoAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *FileInfo) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("sqlboiler: no FileInfo provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *FileInfo) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindFileInfo(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FileInfoSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("sqlboiler: empty FileInfoSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FileInfoSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FileInfoSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), fileInfoPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"FileInfo\".* FROM \"FileInfo\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, fileInfoPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in FileInfoSlice")
	}

	*o = slice

	return nil
}

// FileInfoExistsG checks if the FileInfo row exists.
func FileInfoExistsG(ctx context.Context, iD string) (bool, error) {
	return FileInfoExists(ctx, boil.GetContextDB(), iD)
}

// FileInfoExists checks if the FileInfo row exists.
func FileInfoExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"FileInfo\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if FileInfo exists")
	}

	return exists, nil
}

// Exists checks if the FileInfo row exists.
func (o *FileInfo) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return FileInfoExists(ctx, exec, o.ID)
}
