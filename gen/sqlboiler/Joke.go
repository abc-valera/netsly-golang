// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Joke is an object representing the database table.
type Joke struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Title       string      `boil:"title" json:"title" toml:"title" yaml:"title"`
	Text        string      `boil:"text" json:"text" toml:"text" yaml:"text"`
	Explanation null.String `boil:"explanation" json:"explanation,omitempty" toml:"explanation" yaml:"explanation,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UserID      string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`

	R *jokeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L jokeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var JokeColumns = struct {
	ID          string
	Title       string
	Text        string
	Explanation string
	CreatedAt   string
	UserID      string
}{
	ID:          "id",
	Title:       "title",
	Text:        "text",
	Explanation: "explanation",
	CreatedAt:   "created_at",
	UserID:      "user_id",
}

var JokeTableColumns = struct {
	ID          string
	Title       string
	Text        string
	Explanation string
	CreatedAt   string
	UserID      string
}{
	ID:          "Joke.id",
	Title:       "Joke.title",
	Text:        "Joke.text",
	Explanation: "Joke.explanation",
	CreatedAt:   "Joke.created_at",
	UserID:      "Joke.user_id",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var JokeWhere = struct {
	ID          whereHelperstring
	Title       whereHelperstring
	Text        whereHelperstring
	Explanation whereHelpernull_String
	CreatedAt   whereHelpertime_Time
	UserID      whereHelperstring
}{
	ID:          whereHelperstring{field: "\"Joke\".\"id\""},
	Title:       whereHelperstring{field: "\"Joke\".\"title\""},
	Text:        whereHelperstring{field: "\"Joke\".\"text\""},
	Explanation: whereHelpernull_String{field: "\"Joke\".\"explanation\""},
	CreatedAt:   whereHelpertime_Time{field: "\"Joke\".\"created_at\""},
	UserID:      whereHelperstring{field: "\"Joke\".\"user_id\""},
}

// JokeRels is where relationship names are stored.
var JokeRels = struct {
	User         string
	JokeComments string
	JokeLikes    string
}{
	User:         "User",
	JokeComments: "JokeComments",
	JokeLikes:    "JokeLikes",
}

// jokeR is where relationships are stored.
type jokeR struct {
	User         *User        `boil:"User" json:"User" toml:"User" yaml:"User"`
	JokeComments CommentSlice `boil:"JokeComments" json:"JokeComments" toml:"JokeComments" yaml:"JokeComments"`
	JokeLikes    LikeSlice    `boil:"JokeLikes" json:"JokeLikes" toml:"JokeLikes" yaml:"JokeLikes"`
}

// NewStruct creates a new relationship struct
func (*jokeR) NewStruct() *jokeR {
	return &jokeR{}
}

func (r *jokeR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *jokeR) GetJokeComments() CommentSlice {
	if r == nil {
		return nil
	}
	return r.JokeComments
}

func (r *jokeR) GetJokeLikes() LikeSlice {
	if r == nil {
		return nil
	}
	return r.JokeLikes
}

// jokeL is where Load methods for each relationship are stored.
type jokeL struct{}

var (
	jokeAllColumns            = []string{"id", "title", "text", "explanation", "created_at", "user_id"}
	jokeColumnsWithoutDefault = []string{"id", "title", "text", "created_at", "user_id"}
	jokeColumnsWithDefault    = []string{"explanation"}
	jokePrimaryKeyColumns     = []string{"id"}
	jokeGeneratedColumns      = []string{}
)

type (
	// JokeSlice is an alias for a slice of pointers to Joke.
	// This should almost always be used instead of []Joke.
	JokeSlice []*Joke
	// JokeHook is the signature for custom Joke hook methods
	JokeHook func(context.Context, boil.ContextExecutor, *Joke) error

	jokeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	jokeType                 = reflect.TypeOf(&Joke{})
	jokeMapping              = queries.MakeStructMapping(jokeType)
	jokePrimaryKeyMapping, _ = queries.BindMapping(jokeType, jokeMapping, jokePrimaryKeyColumns)
	jokeInsertCacheMut       sync.RWMutex
	jokeInsertCache          = make(map[string]insertCache)
	jokeUpdateCacheMut       sync.RWMutex
	jokeUpdateCache          = make(map[string]updateCache)
	jokeUpsertCacheMut       sync.RWMutex
	jokeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var jokeAfterSelectMu sync.Mutex
var jokeAfterSelectHooks []JokeHook

var jokeBeforeInsertMu sync.Mutex
var jokeBeforeInsertHooks []JokeHook
var jokeAfterInsertMu sync.Mutex
var jokeAfterInsertHooks []JokeHook

var jokeBeforeUpdateMu sync.Mutex
var jokeBeforeUpdateHooks []JokeHook
var jokeAfterUpdateMu sync.Mutex
var jokeAfterUpdateHooks []JokeHook

var jokeBeforeDeleteMu sync.Mutex
var jokeBeforeDeleteHooks []JokeHook
var jokeAfterDeleteMu sync.Mutex
var jokeAfterDeleteHooks []JokeHook

var jokeBeforeUpsertMu sync.Mutex
var jokeBeforeUpsertHooks []JokeHook
var jokeAfterUpsertMu sync.Mutex
var jokeAfterUpsertHooks []JokeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Joke) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jokeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Joke) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jokeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Joke) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jokeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Joke) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jokeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Joke) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jokeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Joke) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jokeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Joke) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jokeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Joke) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jokeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Joke) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range jokeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddJokeHook registers your hook function for all future operations.
func AddJokeHook(hookPoint boil.HookPoint, jokeHook JokeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		jokeAfterSelectMu.Lock()
		jokeAfterSelectHooks = append(jokeAfterSelectHooks, jokeHook)
		jokeAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		jokeBeforeInsertMu.Lock()
		jokeBeforeInsertHooks = append(jokeBeforeInsertHooks, jokeHook)
		jokeBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		jokeAfterInsertMu.Lock()
		jokeAfterInsertHooks = append(jokeAfterInsertHooks, jokeHook)
		jokeAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		jokeBeforeUpdateMu.Lock()
		jokeBeforeUpdateHooks = append(jokeBeforeUpdateHooks, jokeHook)
		jokeBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		jokeAfterUpdateMu.Lock()
		jokeAfterUpdateHooks = append(jokeAfterUpdateHooks, jokeHook)
		jokeAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		jokeBeforeDeleteMu.Lock()
		jokeBeforeDeleteHooks = append(jokeBeforeDeleteHooks, jokeHook)
		jokeBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		jokeAfterDeleteMu.Lock()
		jokeAfterDeleteHooks = append(jokeAfterDeleteHooks, jokeHook)
		jokeAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		jokeBeforeUpsertMu.Lock()
		jokeBeforeUpsertHooks = append(jokeBeforeUpsertHooks, jokeHook)
		jokeBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		jokeAfterUpsertMu.Lock()
		jokeAfterUpsertHooks = append(jokeAfterUpsertHooks, jokeHook)
		jokeAfterUpsertMu.Unlock()
	}
}

// OneG returns a single joke record from the query using the global executor.
func (q jokeQuery) OneG(ctx context.Context) (*Joke, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single joke record from the query.
func (q jokeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Joke, error) {
	o := &Joke{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for Joke")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Joke records from the query using the global executor.
func (q jokeQuery) AllG(ctx context.Context) (JokeSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Joke records from the query.
func (q jokeQuery) All(ctx context.Context, exec boil.ContextExecutor) (JokeSlice, error) {
	var o []*Joke

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Joke slice")
	}

	if len(jokeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Joke records in the query using the global executor
func (q jokeQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Joke records in the query.
func (q jokeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count Joke rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q jokeQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q jokeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if Joke exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Joke) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// JokeComments retrieves all the Comment's Comments with an executor via joke_id column.
func (o *Joke) JokeComments(mods ...qm.QueryMod) commentQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"Comment\".\"joke_id\"=?", o.ID),
	)

	return Comments(queryMods...)
}

// JokeLikes retrieves all the Like's Likes with an executor via joke_id column.
func (o *Joke) JokeLikes(mods ...qm.QueryMod) likeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"Like\".\"joke_id\"=?", o.ID),
	)

	return Likes(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (jokeL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJoke interface{}, mods queries.Applicator) error {
	var slice []*Joke
	var object *Joke

	if singular {
		var ok bool
		object, ok = maybeJoke.(*Joke)
		if !ok {
			object = new(Joke)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeJoke)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeJoke))
			}
		}
	} else {
		s, ok := maybeJoke.(*[]*Joke)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeJoke)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeJoke))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &jokeR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jokeR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`User`),
		qm.WhereIn(`User.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for User")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for User")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserJokes = append(foreign.R.UserJokes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserJokes = append(foreign.R.UserJokes, local)
				break
			}
		}
	}

	return nil
}

// LoadJokeComments allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (jokeL) LoadJokeComments(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJoke interface{}, mods queries.Applicator) error {
	var slice []*Joke
	var object *Joke

	if singular {
		var ok bool
		object, ok = maybeJoke.(*Joke)
		if !ok {
			object = new(Joke)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeJoke)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeJoke))
			}
		}
	} else {
		s, ok := maybeJoke.(*[]*Joke)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeJoke)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeJoke))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &jokeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jokeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`Comment`),
		qm.WhereIn(`Comment.joke_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Comment")
	}

	var resultSlice []*Comment
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Comment")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Comment")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Comment")
	}

	if len(commentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.JokeComments = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &commentR{}
			}
			foreign.R.Joke = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.JokeID {
				local.R.JokeComments = append(local.R.JokeComments, foreign)
				if foreign.R == nil {
					foreign.R = &commentR{}
				}
				foreign.R.Joke = local
				break
			}
		}
	}

	return nil
}

// LoadJokeLikes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (jokeL) LoadJokeLikes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeJoke interface{}, mods queries.Applicator) error {
	var slice []*Joke
	var object *Joke

	if singular {
		var ok bool
		object, ok = maybeJoke.(*Joke)
		if !ok {
			object = new(Joke)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeJoke)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeJoke))
			}
		}
	} else {
		s, ok := maybeJoke.(*[]*Joke)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeJoke)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeJoke))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &jokeR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jokeR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`Like`),
		qm.WhereIn(`Like.joke_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Like")
	}

	var resultSlice []*Like
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Like")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on Like")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for Like")
	}

	if len(likeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.JokeLikes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &likeR{}
			}
			foreign.R.Joke = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.JokeID {
				local.R.JokeLikes = append(local.R.JokeLikes, foreign)
				if foreign.R == nil {
					foreign.R = &likeR{}
				}
				foreign.R.Joke = local
				break
			}
		}
	}

	return nil
}

// SetUserG of the joke to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserJokes.
// Uses the global database handle.
func (o *Joke) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the joke to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserJokes.
func (o *Joke) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Joke\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, jokePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &jokeR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserJokes: JokeSlice{o},
		}
	} else {
		related.R.UserJokes = append(related.R.UserJokes, o)
	}

	return nil
}

// AddJokeCommentsG adds the given related objects to the existing relationships
// of the Joke, optionally inserting them as new records.
// Appends related to o.R.JokeComments.
// Sets related.R.Joke appropriately.
// Uses the global database handle.
func (o *Joke) AddJokeCommentsG(ctx context.Context, insert bool, related ...*Comment) error {
	return o.AddJokeComments(ctx, boil.GetContextDB(), insert, related...)
}

// AddJokeComments adds the given related objects to the existing relationships
// of the Joke, optionally inserting them as new records.
// Appends related to o.R.JokeComments.
// Sets related.R.Joke appropriately.
func (o *Joke) AddJokeComments(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Comment) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.JokeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"Comment\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"joke_id"}),
				strmangle.WhereClause("\"", "\"", 2, commentPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.JokeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &jokeR{
			JokeComments: related,
		}
	} else {
		o.R.JokeComments = append(o.R.JokeComments, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &commentR{
				Joke: o,
			}
		} else {
			rel.R.Joke = o
		}
	}
	return nil
}

// AddJokeLikesG adds the given related objects to the existing relationships
// of the Joke, optionally inserting them as new records.
// Appends related to o.R.JokeLikes.
// Sets related.R.Joke appropriately.
// Uses the global database handle.
func (o *Joke) AddJokeLikesG(ctx context.Context, insert bool, related ...*Like) error {
	return o.AddJokeLikes(ctx, boil.GetContextDB(), insert, related...)
}

// AddJokeLikes adds the given related objects to the existing relationships
// of the Joke, optionally inserting them as new records.
// Appends related to o.R.JokeLikes.
// Sets related.R.Joke appropriately.
func (o *Joke) AddJokeLikes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Like) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.JokeID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"Like\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"joke_id"}),
				strmangle.WhereClause("\"", "\"", 2, likePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserID, rel.JokeID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.JokeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &jokeR{
			JokeLikes: related,
		}
	} else {
		o.R.JokeLikes = append(o.R.JokeLikes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &likeR{
				Joke: o,
			}
		} else {
			rel.R.Joke = o
		}
	}
	return nil
}

// Jokes retrieves all the records using an executor.
func Jokes(mods ...qm.QueryMod) jokeQuery {
	mods = append(mods, qm.From("\"Joke\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"Joke\".*"})
	}

	return jokeQuery{q}
}

// FindJokeG retrieves a single record by ID.
func FindJokeG(ctx context.Context, iD string, selectCols ...string) (*Joke, error) {
	return FindJoke(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindJoke retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindJoke(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Joke, error) {
	jokeObj := &Joke{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Joke\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, jokeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from Joke")
	}

	if err = jokeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return jokeObj, err
	}

	return jokeObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Joke) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Joke) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no Joke provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jokeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	jokeInsertCacheMut.RLock()
	cache, cached := jokeInsertCache[key]
	jokeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			jokeAllColumns,
			jokeColumnsWithDefault,
			jokeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(jokeType, jokeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(jokeType, jokeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Joke\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Joke\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into Joke")
	}

	if !cached {
		jokeInsertCacheMut.Lock()
		jokeInsertCache[key] = cache
		jokeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Joke record using the global executor.
// See Update for more documentation.
func (o *Joke) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Joke.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Joke) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	jokeUpdateCacheMut.RLock()
	cache, cached := jokeUpdateCache[key]
	jokeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			jokeAllColumns,
			jokePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update Joke, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Joke\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, jokePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(jokeType, jokeMapping, append(wl, jokePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update Joke row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for Joke")
	}

	if !cached {
		jokeUpdateCacheMut.Lock()
		jokeUpdateCache[key] = cache
		jokeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q jokeQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q jokeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for Joke")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for Joke")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o JokeSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o JokeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jokePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Joke\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, jokePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in joke slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all joke")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Joke) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Joke) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sqlboiler: no Joke provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(jokeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	jokeUpsertCacheMut.RLock()
	cache, cached := jokeUpsertCache[key]
	jokeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			jokeAllColumns,
			jokeColumnsWithDefault,
			jokeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			jokeAllColumns,
			jokePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert Joke, could not build update column list")
		}

		ret := strmangle.SetComplement(jokeAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(jokePrimaryKeyColumns) == 0 {
				return errors.New("sqlboiler: unable to upsert Joke, could not build conflict column list")
			}

			conflict = make([]string, len(jokePrimaryKeyColumns))
			copy(conflict, jokePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"Joke\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(jokeType, jokeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(jokeType, jokeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert Joke")
	}

	if !cached {
		jokeUpsertCacheMut.Lock()
		jokeUpsertCache[key] = cache
		jokeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Joke record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Joke) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Joke record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Joke) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no Joke provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), jokePrimaryKeyMapping)
	sql := "DELETE FROM \"Joke\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from Joke")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for Joke")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q jokeQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q jokeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no jokeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from Joke")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for Joke")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o JokeSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o JokeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(jokeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jokePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Joke\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jokePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from joke slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for Joke")
	}

	if len(jokeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Joke) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("sqlboiler: no Joke provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Joke) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindJoke(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JokeSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("sqlboiler: empty JokeSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JokeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := JokeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jokePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Joke\".* FROM \"Joke\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, jokePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in JokeSlice")
	}

	*o = slice

	return nil
}

// JokeExistsG checks if the Joke row exists.
func JokeExistsG(ctx context.Context, iD string) (bool, error) {
	return JokeExists(ctx, boil.GetContextDB(), iD)
}

// JokeExists checks if the Joke row exists.
func JokeExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Joke\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if Joke exists")
	}

	return exists, nil
}

// Exists checks if the Joke row exists.
func (o *Joke) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return JokeExists(ctx, exec, o.ID)
}
