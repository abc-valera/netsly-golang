// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Comments", testComments)
	t.Run("Jokes", testJokes)
	t.Run("Likes", testLikes)
	t.Run("Rooms", testRooms)
	t.Run("RoomMembers", testRoomMembers)
	t.Run("RoomMessages", testRoomMessages)
	t.Run("Users", testUsers)
	t.Run("GooseDBVersions", testGooseDBVersions)
}

func TestDelete(t *testing.T) {
	t.Run("Comments", testCommentsDelete)
	t.Run("Jokes", testJokesDelete)
	t.Run("Likes", testLikesDelete)
	t.Run("Rooms", testRoomsDelete)
	t.Run("RoomMembers", testRoomMembersDelete)
	t.Run("RoomMessages", testRoomMessagesDelete)
	t.Run("Users", testUsersDelete)
	t.Run("GooseDBVersions", testGooseDBVersionsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Comments", testCommentsQueryDeleteAll)
	t.Run("Jokes", testJokesQueryDeleteAll)
	t.Run("Likes", testLikesQueryDeleteAll)
	t.Run("Rooms", testRoomsQueryDeleteAll)
	t.Run("RoomMembers", testRoomMembersQueryDeleteAll)
	t.Run("RoomMessages", testRoomMessagesQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("GooseDBVersions", testGooseDBVersionsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Comments", testCommentsSliceDeleteAll)
	t.Run("Jokes", testJokesSliceDeleteAll)
	t.Run("Likes", testLikesSliceDeleteAll)
	t.Run("Rooms", testRoomsSliceDeleteAll)
	t.Run("RoomMembers", testRoomMembersSliceDeleteAll)
	t.Run("RoomMessages", testRoomMessagesSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("GooseDBVersions", testGooseDBVersionsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Comments", testCommentsExists)
	t.Run("Jokes", testJokesExists)
	t.Run("Likes", testLikesExists)
	t.Run("Rooms", testRoomsExists)
	t.Run("RoomMembers", testRoomMembersExists)
	t.Run("RoomMessages", testRoomMessagesExists)
	t.Run("Users", testUsersExists)
	t.Run("GooseDBVersions", testGooseDBVersionsExists)
}

func TestFind(t *testing.T) {
	t.Run("Comments", testCommentsFind)
	t.Run("Jokes", testJokesFind)
	t.Run("Likes", testLikesFind)
	t.Run("Rooms", testRoomsFind)
	t.Run("RoomMembers", testRoomMembersFind)
	t.Run("RoomMessages", testRoomMessagesFind)
	t.Run("Users", testUsersFind)
	t.Run("GooseDBVersions", testGooseDBVersionsFind)
}

func TestBind(t *testing.T) {
	t.Run("Comments", testCommentsBind)
	t.Run("Jokes", testJokesBind)
	t.Run("Likes", testLikesBind)
	t.Run("Rooms", testRoomsBind)
	t.Run("RoomMembers", testRoomMembersBind)
	t.Run("RoomMessages", testRoomMessagesBind)
	t.Run("Users", testUsersBind)
	t.Run("GooseDBVersions", testGooseDBVersionsBind)
}

func TestOne(t *testing.T) {
	t.Run("Comments", testCommentsOne)
	t.Run("Jokes", testJokesOne)
	t.Run("Likes", testLikesOne)
	t.Run("Rooms", testRoomsOne)
	t.Run("RoomMembers", testRoomMembersOne)
	t.Run("RoomMessages", testRoomMessagesOne)
	t.Run("Users", testUsersOne)
	t.Run("GooseDBVersions", testGooseDBVersionsOne)
}

func TestAll(t *testing.T) {
	t.Run("Comments", testCommentsAll)
	t.Run("Jokes", testJokesAll)
	t.Run("Likes", testLikesAll)
	t.Run("Rooms", testRoomsAll)
	t.Run("RoomMembers", testRoomMembersAll)
	t.Run("RoomMessages", testRoomMessagesAll)
	t.Run("Users", testUsersAll)
	t.Run("GooseDBVersions", testGooseDBVersionsAll)
}

func TestCount(t *testing.T) {
	t.Run("Comments", testCommentsCount)
	t.Run("Jokes", testJokesCount)
	t.Run("Likes", testLikesCount)
	t.Run("Rooms", testRoomsCount)
	t.Run("RoomMembers", testRoomMembersCount)
	t.Run("RoomMessages", testRoomMessagesCount)
	t.Run("Users", testUsersCount)
	t.Run("GooseDBVersions", testGooseDBVersionsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Comments", testCommentsHooks)
	t.Run("Jokes", testJokesHooks)
	t.Run("Likes", testLikesHooks)
	t.Run("Rooms", testRoomsHooks)
	t.Run("RoomMembers", testRoomMembersHooks)
	t.Run("RoomMessages", testRoomMessagesHooks)
	t.Run("Users", testUsersHooks)
	t.Run("GooseDBVersions", testGooseDBVersionsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Comments", testCommentsInsert)
	t.Run("Comments", testCommentsInsertWhitelist)
	t.Run("Jokes", testJokesInsert)
	t.Run("Jokes", testJokesInsertWhitelist)
	t.Run("Likes", testLikesInsert)
	t.Run("Likes", testLikesInsertWhitelist)
	t.Run("Rooms", testRoomsInsert)
	t.Run("Rooms", testRoomsInsertWhitelist)
	t.Run("RoomMembers", testRoomMembersInsert)
	t.Run("RoomMembers", testRoomMembersInsertWhitelist)
	t.Run("RoomMessages", testRoomMessagesInsert)
	t.Run("RoomMessages", testRoomMessagesInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("GooseDBVersions", testGooseDBVersionsInsert)
	t.Run("GooseDBVersions", testGooseDBVersionsInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Comments", testCommentsReload)
	t.Run("Jokes", testJokesReload)
	t.Run("Likes", testLikesReload)
	t.Run("Rooms", testRoomsReload)
	t.Run("RoomMembers", testRoomMembersReload)
	t.Run("RoomMessages", testRoomMessagesReload)
	t.Run("Users", testUsersReload)
	t.Run("GooseDBVersions", testGooseDBVersionsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Comments", testCommentsReloadAll)
	t.Run("Jokes", testJokesReloadAll)
	t.Run("Likes", testLikesReloadAll)
	t.Run("Rooms", testRoomsReloadAll)
	t.Run("RoomMembers", testRoomMembersReloadAll)
	t.Run("RoomMessages", testRoomMessagesReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("GooseDBVersions", testGooseDBVersionsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Comments", testCommentsSelect)
	t.Run("Jokes", testJokesSelect)
	t.Run("Likes", testLikesSelect)
	t.Run("Rooms", testRoomsSelect)
	t.Run("RoomMembers", testRoomMembersSelect)
	t.Run("RoomMessages", testRoomMessagesSelect)
	t.Run("Users", testUsersSelect)
	t.Run("GooseDBVersions", testGooseDBVersionsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Comments", testCommentsUpdate)
	t.Run("Jokes", testJokesUpdate)
	t.Run("Likes", testLikesUpdate)
	t.Run("Rooms", testRoomsUpdate)
	t.Run("RoomMembers", testRoomMembersUpdate)
	t.Run("RoomMessages", testRoomMessagesUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("GooseDBVersions", testGooseDBVersionsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Comments", testCommentsSliceUpdateAll)
	t.Run("Jokes", testJokesSliceUpdateAll)
	t.Run("Likes", testLikesSliceUpdateAll)
	t.Run("Rooms", testRoomsSliceUpdateAll)
	t.Run("RoomMembers", testRoomMembersSliceUpdateAll)
	t.Run("RoomMessages", testRoomMessagesSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("GooseDBVersions", testGooseDBVersionsSliceUpdateAll)
}
