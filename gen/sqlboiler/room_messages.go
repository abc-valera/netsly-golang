// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RoomMessage is an object representing the database table.
type RoomMessage struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Text      string    `boil:"text" json:"text" toml:"text" yaml:"text"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt time.Time `boil:"deleted_at" json:"deleted_at" toml:"deleted_at" yaml:"deleted_at"`
	UserID    string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	RoomID    string    `boil:"room_id" json:"room_id" toml:"room_id" yaml:"room_id"`

	R *roomMessageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roomMessageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoomMessageColumns = struct {
	ID        string
	Text      string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
	UserID    string
	RoomID    string
}{
	ID:        "id",
	Text:      "text",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
	UserID:    "user_id",
	RoomID:    "room_id",
}

var RoomMessageTableColumns = struct {
	ID        string
	Text      string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
	UserID    string
	RoomID    string
}{
	ID:        "room_messages.id",
	Text:      "room_messages.text",
	CreatedAt: "room_messages.created_at",
	UpdatedAt: "room_messages.updated_at",
	DeletedAt: "room_messages.deleted_at",
	UserID:    "room_messages.user_id",
	RoomID:    "room_messages.room_id",
}

// Generated where

var RoomMessageWhere = struct {
	ID        whereHelperstring
	Text      whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
	DeletedAt whereHelpertime_Time
	UserID    whereHelperstring
	RoomID    whereHelperstring
}{
	ID:        whereHelperstring{field: "\"room_messages\".\"id\""},
	Text:      whereHelperstring{field: "\"room_messages\".\"text\""},
	CreatedAt: whereHelpertime_Time{field: "\"room_messages\".\"created_at\""},
	UpdatedAt: whereHelpertime_Time{field: "\"room_messages\".\"updated_at\""},
	DeletedAt: whereHelpertime_Time{field: "\"room_messages\".\"deleted_at\""},
	UserID:    whereHelperstring{field: "\"room_messages\".\"user_id\""},
	RoomID:    whereHelperstring{field: "\"room_messages\".\"room_id\""},
}

// RoomMessageRels is where relationship names are stored.
var RoomMessageRels = struct {
	User string
	Room string
}{
	User: "User",
	Room: "Room",
}

// roomMessageR is where relationships are stored.
type roomMessageR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
	Room *Room `boil:"Room" json:"Room" toml:"Room" yaml:"Room"`
}

// NewStruct creates a new relationship struct
func (*roomMessageR) NewStruct() *roomMessageR {
	return &roomMessageR{}
}

func (r *roomMessageR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *roomMessageR) GetRoom() *Room {
	if r == nil {
		return nil
	}
	return r.Room
}

// roomMessageL is where Load methods for each relationship are stored.
type roomMessageL struct{}

var (
	roomMessageAllColumns            = []string{"id", "text", "created_at", "updated_at", "deleted_at", "user_id", "room_id"}
	roomMessageColumnsWithoutDefault = []string{"id", "text", "created_at", "updated_at", "deleted_at", "user_id", "room_id"}
	roomMessageColumnsWithDefault    = []string{}
	roomMessagePrimaryKeyColumns     = []string{"id"}
	roomMessageGeneratedColumns      = []string{}
)

type (
	// RoomMessageSlice is an alias for a slice of pointers to RoomMessage.
	// This should almost always be used instead of []RoomMessage.
	RoomMessageSlice []*RoomMessage
	// RoomMessageHook is the signature for custom RoomMessage hook methods
	RoomMessageHook func(context.Context, boil.ContextExecutor, *RoomMessage) error

	roomMessageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roomMessageType                 = reflect.TypeOf(&RoomMessage{})
	roomMessageMapping              = queries.MakeStructMapping(roomMessageType)
	roomMessagePrimaryKeyMapping, _ = queries.BindMapping(roomMessageType, roomMessageMapping, roomMessagePrimaryKeyColumns)
	roomMessageInsertCacheMut       sync.RWMutex
	roomMessageInsertCache          = make(map[string]insertCache)
	roomMessageUpdateCacheMut       sync.RWMutex
	roomMessageUpdateCache          = make(map[string]updateCache)
	roomMessageUpsertCacheMut       sync.RWMutex
	roomMessageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var roomMessageAfterSelectMu sync.Mutex
var roomMessageAfterSelectHooks []RoomMessageHook

var roomMessageBeforeInsertMu sync.Mutex
var roomMessageBeforeInsertHooks []RoomMessageHook
var roomMessageAfterInsertMu sync.Mutex
var roomMessageAfterInsertHooks []RoomMessageHook

var roomMessageBeforeUpdateMu sync.Mutex
var roomMessageBeforeUpdateHooks []RoomMessageHook
var roomMessageAfterUpdateMu sync.Mutex
var roomMessageAfterUpdateHooks []RoomMessageHook

var roomMessageBeforeDeleteMu sync.Mutex
var roomMessageBeforeDeleteHooks []RoomMessageHook
var roomMessageAfterDeleteMu sync.Mutex
var roomMessageAfterDeleteHooks []RoomMessageHook

var roomMessageBeforeUpsertMu sync.Mutex
var roomMessageBeforeUpsertHooks []RoomMessageHook
var roomMessageAfterUpsertMu sync.Mutex
var roomMessageAfterUpsertHooks []RoomMessageHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RoomMessage) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomMessageAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RoomMessage) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomMessageBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RoomMessage) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomMessageAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RoomMessage) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomMessageBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RoomMessage) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomMessageAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RoomMessage) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomMessageBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RoomMessage) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomMessageAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RoomMessage) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomMessageBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RoomMessage) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomMessageAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoomMessageHook registers your hook function for all future operations.
func AddRoomMessageHook(hookPoint boil.HookPoint, roomMessageHook RoomMessageHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		roomMessageAfterSelectMu.Lock()
		roomMessageAfterSelectHooks = append(roomMessageAfterSelectHooks, roomMessageHook)
		roomMessageAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		roomMessageBeforeInsertMu.Lock()
		roomMessageBeforeInsertHooks = append(roomMessageBeforeInsertHooks, roomMessageHook)
		roomMessageBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		roomMessageAfterInsertMu.Lock()
		roomMessageAfterInsertHooks = append(roomMessageAfterInsertHooks, roomMessageHook)
		roomMessageAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		roomMessageBeforeUpdateMu.Lock()
		roomMessageBeforeUpdateHooks = append(roomMessageBeforeUpdateHooks, roomMessageHook)
		roomMessageBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		roomMessageAfterUpdateMu.Lock()
		roomMessageAfterUpdateHooks = append(roomMessageAfterUpdateHooks, roomMessageHook)
		roomMessageAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		roomMessageBeforeDeleteMu.Lock()
		roomMessageBeforeDeleteHooks = append(roomMessageBeforeDeleteHooks, roomMessageHook)
		roomMessageBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		roomMessageAfterDeleteMu.Lock()
		roomMessageAfterDeleteHooks = append(roomMessageAfterDeleteHooks, roomMessageHook)
		roomMessageAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		roomMessageBeforeUpsertMu.Lock()
		roomMessageBeforeUpsertHooks = append(roomMessageBeforeUpsertHooks, roomMessageHook)
		roomMessageBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		roomMessageAfterUpsertMu.Lock()
		roomMessageAfterUpsertHooks = append(roomMessageAfterUpsertHooks, roomMessageHook)
		roomMessageAfterUpsertMu.Unlock()
	}
}

// OneG returns a single roomMessage record from the query using the global executor.
func (q roomMessageQuery) OneG(ctx context.Context) (*RoomMessage, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single roomMessage record from the query.
func (q roomMessageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RoomMessage, error) {
	o := &RoomMessage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for room_messages")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all RoomMessage records from the query using the global executor.
func (q roomMessageQuery) AllG(ctx context.Context) (RoomMessageSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all RoomMessage records from the query.
func (q roomMessageQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoomMessageSlice, error) {
	var o []*RoomMessage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to RoomMessage slice")
	}

	if len(roomMessageAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all RoomMessage records in the query using the global executor
func (q roomMessageQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all RoomMessage records in the query.
func (q roomMessageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count room_messages rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q roomMessageQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q roomMessageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if room_messages exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *RoomMessage) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Room pointed to by the foreign key.
func (o *RoomMessage) Room(mods ...qm.QueryMod) roomQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoomID),
	}

	queryMods = append(queryMods, mods...)

	return Rooms(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roomMessageL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoomMessage interface{}, mods queries.Applicator) error {
	var slice []*RoomMessage
	var object *RoomMessage

	if singular {
		var ok bool
		object, ok = maybeRoomMessage.(*RoomMessage)
		if !ok {
			object = new(RoomMessage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoomMessage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoomMessage))
			}
		}
	} else {
		s, ok := maybeRoomMessage.(*[]*RoomMessage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoomMessage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoomMessage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &roomMessageR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roomMessageR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.RoomMessages = append(foreign.R.RoomMessages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.RoomMessages = append(foreign.R.RoomMessages, local)
				break
			}
		}
	}

	return nil
}

// LoadRoom allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roomMessageL) LoadRoom(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoomMessage interface{}, mods queries.Applicator) error {
	var slice []*RoomMessage
	var object *RoomMessage

	if singular {
		var ok bool
		object, ok = maybeRoomMessage.(*RoomMessage)
		if !ok {
			object = new(RoomMessage)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoomMessage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoomMessage))
			}
		}
	} else {
		s, ok := maybeRoomMessage.(*[]*RoomMessage)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoomMessage)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoomMessage))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &roomMessageR{}
		}
		args[object.RoomID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roomMessageR{}
			}

			args[obj.RoomID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`rooms`),
		qm.WhereIn(`rooms.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Room")
	}

	var resultSlice []*Room
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Room")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for rooms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rooms")
	}

	if len(roomAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Room = foreign
		if foreign.R == nil {
			foreign.R = &roomR{}
		}
		foreign.R.RoomMessages = append(foreign.R.RoomMessages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoomID == foreign.ID {
				local.R.Room = foreign
				if foreign.R == nil {
					foreign.R = &roomR{}
				}
				foreign.R.RoomMessages = append(foreign.R.RoomMessages, local)
				break
			}
		}
	}

	return nil
}

// SetUserG of the roomMessage to the related item.
// Sets o.R.User to related.
// Adds o to related.R.RoomMessages.
// Uses the global database handle.
func (o *RoomMessage) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the roomMessage to the related item.
// Sets o.R.User to related.
// Adds o to related.R.RoomMessages.
func (o *RoomMessage) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"room_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 0, roomMessagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &roomMessageR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			RoomMessages: RoomMessageSlice{o},
		}
	} else {
		related.R.RoomMessages = append(related.R.RoomMessages, o)
	}

	return nil
}

// SetRoomG of the roomMessage to the related item.
// Sets o.R.Room to related.
// Adds o to related.R.RoomMessages.
// Uses the global database handle.
func (o *RoomMessage) SetRoomG(ctx context.Context, insert bool, related *Room) error {
	return o.SetRoom(ctx, boil.GetContextDB(), insert, related)
}

// SetRoom of the roomMessage to the related item.
// Sets o.R.Room to related.
// Adds o to related.R.RoomMessages.
func (o *RoomMessage) SetRoom(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Room) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"room_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"room_id"}),
		strmangle.WhereClause("\"", "\"", 0, roomMessagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoomID = related.ID
	if o.R == nil {
		o.R = &roomMessageR{
			Room: related,
		}
	} else {
		o.R.Room = related
	}

	if related.R == nil {
		related.R = &roomR{
			RoomMessages: RoomMessageSlice{o},
		}
	} else {
		related.R.RoomMessages = append(related.R.RoomMessages, o)
	}

	return nil
}

// RoomMessages retrieves all the records using an executor.
func RoomMessages(mods ...qm.QueryMod) roomMessageQuery {
	mods = append(mods, qm.From("\"room_messages\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"room_messages\".*"})
	}

	return roomMessageQuery{q}
}

// FindRoomMessageG retrieves a single record by ID.
func FindRoomMessageG(ctx context.Context, iD string, selectCols ...string) (*RoomMessage, error) {
	return FindRoomMessage(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRoomMessage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoomMessage(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*RoomMessage, error) {
	roomMessageObj := &RoomMessage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"room_messages\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, roomMessageObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from room_messages")
	}

	if err = roomMessageObj.doAfterSelectHooks(ctx, exec); err != nil {
		return roomMessageObj, err
	}

	return roomMessageObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RoomMessage) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoomMessage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no room_messages provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roomMessageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roomMessageInsertCacheMut.RLock()
	cache, cached := roomMessageInsertCache[key]
	roomMessageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roomMessageAllColumns,
			roomMessageColumnsWithDefault,
			roomMessageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roomMessageType, roomMessageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roomMessageType, roomMessageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"room_messages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"room_messages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into room_messages")
	}

	if !cached {
		roomMessageInsertCacheMut.Lock()
		roomMessageInsertCache[key] = cache
		roomMessageInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single RoomMessage record using the global executor.
// See Update for more documentation.
func (o *RoomMessage) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the RoomMessage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoomMessage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	roomMessageUpdateCacheMut.RLock()
	cache, cached := roomMessageUpdateCache[key]
	roomMessageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roomMessageAllColumns,
			roomMessagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update room_messages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"room_messages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, roomMessagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roomMessageType, roomMessageMapping, append(wl, roomMessagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update room_messages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for room_messages")
	}

	if !cached {
		roomMessageUpdateCacheMut.Lock()
		roomMessageUpdateCache[key] = cache
		roomMessageUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q roomMessageQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q roomMessageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for room_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for room_messages")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RoomMessageSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoomMessageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"room_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roomMessagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in roomMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all roomMessage")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RoomMessage) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RoomMessage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no room_messages provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roomMessageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roomMessageUpsertCacheMut.RLock()
	cache, cached := roomMessageUpsertCache[key]
	roomMessageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			roomMessageAllColumns,
			roomMessageColumnsWithDefault,
			roomMessageColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			roomMessageAllColumns,
			roomMessagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert room_messages, could not build update column list")
		}

		ret := strmangle.SetComplement(roomMessageAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(roomMessagePrimaryKeyColumns))
			copy(conflict, roomMessagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"room_messages\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(roomMessageType, roomMessageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roomMessageType, roomMessageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert room_messages")
	}

	if !cached {
		roomMessageUpsertCacheMut.Lock()
		roomMessageUpsertCache[key] = cache
		roomMessageUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single RoomMessage record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RoomMessage) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single RoomMessage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoomMessage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no RoomMessage provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roomMessagePrimaryKeyMapping)
	sql := "DELETE FROM \"room_messages\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from room_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for room_messages")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q roomMessageQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q roomMessageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no roomMessageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from room_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for room_messages")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RoomMessageSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoomMessageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(roomMessageBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"room_messages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roomMessagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from roomMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for room_messages")
	}

	if len(roomMessageAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RoomMessage) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("sqlboiler: no RoomMessage provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoomMessage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoomMessage(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoomMessageSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("sqlboiler: empty RoomMessageSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoomMessageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoomMessageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"room_messages\".* FROM \"room_messages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roomMessagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in RoomMessageSlice")
	}

	*o = slice

	return nil
}

// RoomMessageExistsG checks if the RoomMessage row exists.
func RoomMessageExistsG(ctx context.Context, iD string) (bool, error) {
	return RoomMessageExists(ctx, boil.GetContextDB(), iD)
}

// RoomMessageExists checks if the RoomMessage row exists.
func RoomMessageExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"room_messages\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if room_messages exists")
	}

	return exists, nil
}

// Exists checks if the RoomMessage row exists.
func (o *RoomMessage) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RoomMessageExists(ctx, exec, o.ID)
}
