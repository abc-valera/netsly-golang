// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testRoomMembers(t *testing.T) {
	t.Parallel()

	query := RoomMembers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testRoomMembersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoomMember{}
	if err = randomize.Struct(seed, o, roomMemberDBTypes, true, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoomMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoomMembersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoomMember{}
	if err = randomize.Struct(seed, o, roomMemberDBTypes, true, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := RoomMembers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoomMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoomMembersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoomMember{}
	if err = randomize.Struct(seed, o, roomMemberDBTypes, true, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoomMemberSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := RoomMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testRoomMembersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoomMember{}
	if err = randomize.Struct(seed, o, roomMemberDBTypes, true, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := RoomMemberExists(ctx, tx, o.UserID, o.RoomID)
	if err != nil {
		t.Errorf("Unable to check if RoomMember exists: %s", err)
	}
	if !e {
		t.Errorf("Expected RoomMemberExists to return true, but got false.")
	}
}

func testRoomMembersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoomMember{}
	if err = randomize.Struct(seed, o, roomMemberDBTypes, true, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	roomMemberFound, err := FindRoomMember(ctx, tx, o.UserID, o.RoomID)
	if err != nil {
		t.Error(err)
	}

	if roomMemberFound == nil {
		t.Error("want a record, got nil")
	}
}

func testRoomMembersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoomMember{}
	if err = randomize.Struct(seed, o, roomMemberDBTypes, true, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = RoomMembers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testRoomMembersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoomMember{}
	if err = randomize.Struct(seed, o, roomMemberDBTypes, true, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := RoomMembers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testRoomMembersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	roomMemberOne := &RoomMember{}
	roomMemberTwo := &RoomMember{}
	if err = randomize.Struct(seed, roomMemberOne, roomMemberDBTypes, false, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}
	if err = randomize.Struct(seed, roomMemberTwo, roomMemberDBTypes, false, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roomMemberOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roomMemberTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoomMembers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testRoomMembersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	roomMemberOne := &RoomMember{}
	roomMemberTwo := &RoomMember{}
	if err = randomize.Struct(seed, roomMemberOne, roomMemberDBTypes, false, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}
	if err = randomize.Struct(seed, roomMemberTwo, roomMemberDBTypes, false, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = roomMemberOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = roomMemberTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoomMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func roomMemberBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *RoomMember) error {
	*o = RoomMember{}
	return nil
}

func roomMemberAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *RoomMember) error {
	*o = RoomMember{}
	return nil
}

func roomMemberAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *RoomMember) error {
	*o = RoomMember{}
	return nil
}

func roomMemberBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RoomMember) error {
	*o = RoomMember{}
	return nil
}

func roomMemberAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *RoomMember) error {
	*o = RoomMember{}
	return nil
}

func roomMemberBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RoomMember) error {
	*o = RoomMember{}
	return nil
}

func roomMemberAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *RoomMember) error {
	*o = RoomMember{}
	return nil
}

func roomMemberBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RoomMember) error {
	*o = RoomMember{}
	return nil
}

func roomMemberAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *RoomMember) error {
	*o = RoomMember{}
	return nil
}

func testRoomMembersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &RoomMember{}
	o := &RoomMember{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, roomMemberDBTypes, false); err != nil {
		t.Errorf("Unable to randomize RoomMember object: %s", err)
	}

	AddRoomMemberHook(boil.BeforeInsertHook, roomMemberBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	roomMemberBeforeInsertHooks = []RoomMemberHook{}

	AddRoomMemberHook(boil.AfterInsertHook, roomMemberAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	roomMemberAfterInsertHooks = []RoomMemberHook{}

	AddRoomMemberHook(boil.AfterSelectHook, roomMemberAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	roomMemberAfterSelectHooks = []RoomMemberHook{}

	AddRoomMemberHook(boil.BeforeUpdateHook, roomMemberBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	roomMemberBeforeUpdateHooks = []RoomMemberHook{}

	AddRoomMemberHook(boil.AfterUpdateHook, roomMemberAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	roomMemberAfterUpdateHooks = []RoomMemberHook{}

	AddRoomMemberHook(boil.BeforeDeleteHook, roomMemberBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	roomMemberBeforeDeleteHooks = []RoomMemberHook{}

	AddRoomMemberHook(boil.AfterDeleteHook, roomMemberAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	roomMemberAfterDeleteHooks = []RoomMemberHook{}

	AddRoomMemberHook(boil.BeforeUpsertHook, roomMemberBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	roomMemberBeforeUpsertHooks = []RoomMemberHook{}

	AddRoomMemberHook(boil.AfterUpsertHook, roomMemberAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	roomMemberAfterUpsertHooks = []RoomMemberHook{}
}

func testRoomMembersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoomMember{}
	if err = randomize.Struct(seed, o, roomMemberDBTypes, true, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoomMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoomMembersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoomMember{}
	if err = randomize.Struct(seed, o, roomMemberDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(roomMemberColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := RoomMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testRoomMemberToOneRoomUsingRoom(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RoomMember
	var foreign Room

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roomMemberDBTypes, false, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, roomDBTypes, false, roomColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Room struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.RoomID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Room().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddRoomHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Room) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := RoomMemberSlice{&local}
	if err = local.L.LoadRoom(ctx, tx, false, (*[]*RoomMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Room == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Room = nil
	if err = local.L.LoadRoom(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Room == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testRoomMemberToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local RoomMember
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, roomMemberDBTypes, false, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := RoomMemberSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*RoomMember)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testRoomMemberToOneSetOpRoomUsingRoom(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoomMember
	var b, c Room

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomMemberDBTypes, false, strmangle.SetComplement(roomMemberPrimaryKeyColumns, roomMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, roomDBTypes, false, strmangle.SetComplement(roomPrimaryKeyColumns, roomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, roomDBTypes, false, strmangle.SetComplement(roomPrimaryKeyColumns, roomColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Room{&b, &c} {
		err = a.SetRoom(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Room != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.RoomRoomMembers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.RoomID != x.ID {
			t.Error("foreign key was wrong value", a.RoomID)
		}

		if exists, err := RoomMemberExists(ctx, tx, a.UserID, a.RoomID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}
func testRoomMemberToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a RoomMember
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, roomMemberDBTypes, false, strmangle.SetComplement(roomMemberPrimaryKeyColumns, roomMemberColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserRoomMembers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := RoomMemberExists(ctx, tx, a.UserID, a.RoomID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testRoomMembersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoomMember{}
	if err = randomize.Struct(seed, o, roomMemberDBTypes, true, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoomMembersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoomMember{}
	if err = randomize.Struct(seed, o, roomMemberDBTypes, true, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := RoomMemberSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testRoomMembersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &RoomMember{}
	if err = randomize.Struct(seed, o, roomMemberDBTypes, true, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := RoomMembers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	roomMemberDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `UserID`: `uuid`, `RoomID`: `uuid`}
	_                 = bytes.MinRead
)

func testRoomMembersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(roomMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(roomMemberAllColumns) == len(roomMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoomMember{}
	if err = randomize.Struct(seed, o, roomMemberDBTypes, true, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoomMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roomMemberDBTypes, true, roomMemberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testRoomMembersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(roomMemberAllColumns) == len(roomMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &RoomMember{}
	if err = randomize.Struct(seed, o, roomMemberDBTypes, true, roomMemberColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := RoomMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, roomMemberDBTypes, true, roomMemberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(roomMemberAllColumns, roomMemberPrimaryKeyColumns) {
		fields = roomMemberAllColumns
	} else {
		fields = strmangle.SetComplement(
			roomMemberAllColumns,
			roomMemberPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := RoomMemberSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testRoomMembersUpsert(t *testing.T) {
	t.Parallel()

	if len(roomMemberAllColumns) == len(roomMemberPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := RoomMember{}
	if err = randomize.Struct(seed, &o, roomMemberDBTypes, true); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoomMember: %s", err)
	}

	count, err := RoomMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, roomMemberDBTypes, false, roomMemberPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize RoomMember struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert RoomMember: %s", err)
	}

	count, err = RoomMembers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
