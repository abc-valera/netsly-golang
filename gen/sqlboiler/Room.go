// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Room is an object representing the database table.
type Room struct {
	ID          string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name        string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	CreatedAt   time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	CreatorID   string      `boil:"creator_id" json:"creator_id" toml:"creator_id" yaml:"creator_id"`

	R *roomR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roomL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoomColumns = struct {
	ID          string
	Name        string
	Description string
	CreatedAt   string
	CreatorID   string
}{
	ID:          "id",
	Name:        "name",
	Description: "description",
	CreatedAt:   "created_at",
	CreatorID:   "creator_id",
}

var RoomTableColumns = struct {
	ID          string
	Name        string
	Description string
	CreatedAt   string
	CreatorID   string
}{
	ID:          "Room.id",
	Name:        "Room.name",
	Description: "Room.description",
	CreatedAt:   "Room.created_at",
	CreatorID:   "Room.creator_id",
}

// Generated where

var RoomWhere = struct {
	ID          whereHelperstring
	Name        whereHelperstring
	Description whereHelpernull_String
	CreatedAt   whereHelpertime_Time
	CreatorID   whereHelperstring
}{
	ID:          whereHelperstring{field: "\"Room\".\"id\""},
	Name:        whereHelperstring{field: "\"Room\".\"name\""},
	Description: whereHelpernull_String{field: "\"Room\".\"description\""},
	CreatedAt:   whereHelpertime_Time{field: "\"Room\".\"created_at\""},
	CreatorID:   whereHelperstring{field: "\"Room\".\"creator_id\""},
}

// RoomRels is where relationship names are stored.
var RoomRels = struct {
	Creator          string
	RoomRoomMembers  string
	RoomRoomMessages string
}{
	Creator:          "Creator",
	RoomRoomMembers:  "RoomRoomMembers",
	RoomRoomMessages: "RoomRoomMessages",
}

// roomR is where relationships are stored.
type roomR struct {
	Creator          *User            `boil:"Creator" json:"Creator" toml:"Creator" yaml:"Creator"`
	RoomRoomMembers  RoomMemberSlice  `boil:"RoomRoomMembers" json:"RoomRoomMembers" toml:"RoomRoomMembers" yaml:"RoomRoomMembers"`
	RoomRoomMessages RoomMessageSlice `boil:"RoomRoomMessages" json:"RoomRoomMessages" toml:"RoomRoomMessages" yaml:"RoomRoomMessages"`
}

// NewStruct creates a new relationship struct
func (*roomR) NewStruct() *roomR {
	return &roomR{}
}

func (r *roomR) GetCreator() *User {
	if r == nil {
		return nil
	}
	return r.Creator
}

func (r *roomR) GetRoomRoomMembers() RoomMemberSlice {
	if r == nil {
		return nil
	}
	return r.RoomRoomMembers
}

func (r *roomR) GetRoomRoomMessages() RoomMessageSlice {
	if r == nil {
		return nil
	}
	return r.RoomRoomMessages
}

// roomL is where Load methods for each relationship are stored.
type roomL struct{}

var (
	roomAllColumns            = []string{"id", "name", "description", "created_at", "creator_id"}
	roomColumnsWithoutDefault = []string{"id", "name", "created_at", "creator_id"}
	roomColumnsWithDefault    = []string{"description"}
	roomPrimaryKeyColumns     = []string{"id"}
	roomGeneratedColumns      = []string{}
)

type (
	// RoomSlice is an alias for a slice of pointers to Room.
	// This should almost always be used instead of []Room.
	RoomSlice []*Room
	// RoomHook is the signature for custom Room hook methods
	RoomHook func(context.Context, boil.ContextExecutor, *Room) error

	roomQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roomType                 = reflect.TypeOf(&Room{})
	roomMapping              = queries.MakeStructMapping(roomType)
	roomPrimaryKeyMapping, _ = queries.BindMapping(roomType, roomMapping, roomPrimaryKeyColumns)
	roomInsertCacheMut       sync.RWMutex
	roomInsertCache          = make(map[string]insertCache)
	roomUpdateCacheMut       sync.RWMutex
	roomUpdateCache          = make(map[string]updateCache)
	roomUpsertCacheMut       sync.RWMutex
	roomUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var roomAfterSelectMu sync.Mutex
var roomAfterSelectHooks []RoomHook

var roomBeforeInsertMu sync.Mutex
var roomBeforeInsertHooks []RoomHook
var roomAfterInsertMu sync.Mutex
var roomAfterInsertHooks []RoomHook

var roomBeforeUpdateMu sync.Mutex
var roomBeforeUpdateHooks []RoomHook
var roomAfterUpdateMu sync.Mutex
var roomAfterUpdateHooks []RoomHook

var roomBeforeDeleteMu sync.Mutex
var roomBeforeDeleteHooks []RoomHook
var roomAfterDeleteMu sync.Mutex
var roomAfterDeleteHooks []RoomHook

var roomBeforeUpsertMu sync.Mutex
var roomBeforeUpsertHooks []RoomHook
var roomAfterUpsertMu sync.Mutex
var roomAfterUpsertHooks []RoomHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Room) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Room) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Room) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Room) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Room) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Room) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Room) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Room) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Room) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoomHook registers your hook function for all future operations.
func AddRoomHook(hookPoint boil.HookPoint, roomHook RoomHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		roomAfterSelectMu.Lock()
		roomAfterSelectHooks = append(roomAfterSelectHooks, roomHook)
		roomAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		roomBeforeInsertMu.Lock()
		roomBeforeInsertHooks = append(roomBeforeInsertHooks, roomHook)
		roomBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		roomAfterInsertMu.Lock()
		roomAfterInsertHooks = append(roomAfterInsertHooks, roomHook)
		roomAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		roomBeforeUpdateMu.Lock()
		roomBeforeUpdateHooks = append(roomBeforeUpdateHooks, roomHook)
		roomBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		roomAfterUpdateMu.Lock()
		roomAfterUpdateHooks = append(roomAfterUpdateHooks, roomHook)
		roomAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		roomBeforeDeleteMu.Lock()
		roomBeforeDeleteHooks = append(roomBeforeDeleteHooks, roomHook)
		roomBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		roomAfterDeleteMu.Lock()
		roomAfterDeleteHooks = append(roomAfterDeleteHooks, roomHook)
		roomAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		roomBeforeUpsertMu.Lock()
		roomBeforeUpsertHooks = append(roomBeforeUpsertHooks, roomHook)
		roomBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		roomAfterUpsertMu.Lock()
		roomAfterUpsertHooks = append(roomAfterUpsertHooks, roomHook)
		roomAfterUpsertMu.Unlock()
	}
}

// OneG returns a single room record from the query using the global executor.
func (q roomQuery) OneG(ctx context.Context) (*Room, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single room record from the query.
func (q roomQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Room, error) {
	o := &Room{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for Room")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Room records from the query using the global executor.
func (q roomQuery) AllG(ctx context.Context) (RoomSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all Room records from the query.
func (q roomQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoomSlice, error) {
	var o []*Room

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to Room slice")
	}

	if len(roomAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Room records in the query using the global executor
func (q roomQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all Room records in the query.
func (q roomQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count Room rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q roomQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q roomQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if Room exists")
	}

	return count > 0, nil
}

// Creator pointed to by the foreign key.
func (o *Room) Creator(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CreatorID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// RoomRoomMembers retrieves all the RoomMember's RoomMembers with an executor via room_id column.
func (o *Room) RoomRoomMembers(mods ...qm.QueryMod) roomMemberQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"RoomMember\".\"room_id\"=?", o.ID),
	)

	return RoomMembers(queryMods...)
}

// RoomRoomMessages retrieves all the RoomMessage's RoomMessages with an executor via room_id column.
func (o *Room) RoomRoomMessages(mods ...qm.QueryMod) roomMessageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"RoomMessage\".\"room_id\"=?", o.ID),
	)

	return RoomMessages(queryMods...)
}

// LoadCreator allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roomL) LoadCreator(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoom interface{}, mods queries.Applicator) error {
	var slice []*Room
	var object *Room

	if singular {
		var ok bool
		object, ok = maybeRoom.(*Room)
		if !ok {
			object = new(Room)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoom)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoom))
			}
		}
	} else {
		s, ok := maybeRoom.(*[]*Room)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoom)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoom))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &roomR{}
		}
		args[object.CreatorID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roomR{}
			}

			args[obj.CreatorID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`User`),
		qm.WhereIn(`User.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for User")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for User")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Creator = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatorRooms = append(foreign.R.CreatorRooms, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CreatorID == foreign.ID {
				local.R.Creator = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatorRooms = append(foreign.R.CreatorRooms, local)
				break
			}
		}
	}

	return nil
}

// LoadRoomRoomMembers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roomL) LoadRoomRoomMembers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoom interface{}, mods queries.Applicator) error {
	var slice []*Room
	var object *Room

	if singular {
		var ok bool
		object, ok = maybeRoom.(*Room)
		if !ok {
			object = new(Room)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoom)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoom))
			}
		}
	} else {
		s, ok := maybeRoom.(*[]*Room)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoom)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoom))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &roomR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roomR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`RoomMember`),
		qm.WhereIn(`RoomMember.room_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RoomMember")
	}

	var resultSlice []*RoomMember
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RoomMember")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on RoomMember")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for RoomMember")
	}

	if len(roomMemberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RoomRoomMembers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roomMemberR{}
			}
			foreign.R.Room = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RoomID {
				local.R.RoomRoomMembers = append(local.R.RoomRoomMembers, foreign)
				if foreign.R == nil {
					foreign.R = &roomMemberR{}
				}
				foreign.R.Room = local
				break
			}
		}
	}

	return nil
}

// LoadRoomRoomMessages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (roomL) LoadRoomRoomMessages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoom interface{}, mods queries.Applicator) error {
	var slice []*Room
	var object *Room

	if singular {
		var ok bool
		object, ok = maybeRoom.(*Room)
		if !ok {
			object = new(Room)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoom)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoom))
			}
		}
	} else {
		s, ok := maybeRoom.(*[]*Room)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoom)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoom))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &roomR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roomR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`RoomMessage`),
		qm.WhereIn(`RoomMessage.room_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load RoomMessage")
	}

	var resultSlice []*RoomMessage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice RoomMessage")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on RoomMessage")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for RoomMessage")
	}

	if len(roomMessageAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RoomRoomMessages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roomMessageR{}
			}
			foreign.R.Room = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.RoomID {
				local.R.RoomRoomMessages = append(local.R.RoomRoomMessages, foreign)
				if foreign.R == nil {
					foreign.R = &roomMessageR{}
				}
				foreign.R.Room = local
				break
			}
		}
	}

	return nil
}

// SetCreatorG of the room to the related item.
// Sets o.R.Creator to related.
// Adds o to related.R.CreatorRooms.
// Uses the global database handle.
func (o *Room) SetCreatorG(ctx context.Context, insert bool, related *User) error {
	return o.SetCreator(ctx, boil.GetContextDB(), insert, related)
}

// SetCreator of the room to the related item.
// Sets o.R.Creator to related.
// Adds o to related.R.CreatorRooms.
func (o *Room) SetCreator(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"Room\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"creator_id"}),
		strmangle.WhereClause("\"", "\"", 2, roomPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CreatorID = related.ID
	if o.R == nil {
		o.R = &roomR{
			Creator: related,
		}
	} else {
		o.R.Creator = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatorRooms: RoomSlice{o},
		}
	} else {
		related.R.CreatorRooms = append(related.R.CreatorRooms, o)
	}

	return nil
}

// AddRoomRoomMembersG adds the given related objects to the existing relationships
// of the Room, optionally inserting them as new records.
// Appends related to o.R.RoomRoomMembers.
// Sets related.R.Room appropriately.
// Uses the global database handle.
func (o *Room) AddRoomRoomMembersG(ctx context.Context, insert bool, related ...*RoomMember) error {
	return o.AddRoomRoomMembers(ctx, boil.GetContextDB(), insert, related...)
}

// AddRoomRoomMembers adds the given related objects to the existing relationships
// of the Room, optionally inserting them as new records.
// Appends related to o.R.RoomRoomMembers.
// Sets related.R.Room appropriately.
func (o *Room) AddRoomRoomMembers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoomMember) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RoomID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"RoomMember\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"room_id"}),
				strmangle.WhereClause("\"", "\"", 2, roomMemberPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.UserID, rel.RoomID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RoomID = o.ID
		}
	}

	if o.R == nil {
		o.R = &roomR{
			RoomRoomMembers: related,
		}
	} else {
		o.R.RoomRoomMembers = append(o.R.RoomRoomMembers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roomMemberR{
				Room: o,
			}
		} else {
			rel.R.Room = o
		}
	}
	return nil
}

// AddRoomRoomMessagesG adds the given related objects to the existing relationships
// of the Room, optionally inserting them as new records.
// Appends related to o.R.RoomRoomMessages.
// Sets related.R.Room appropriately.
// Uses the global database handle.
func (o *Room) AddRoomRoomMessagesG(ctx context.Context, insert bool, related ...*RoomMessage) error {
	return o.AddRoomRoomMessages(ctx, boil.GetContextDB(), insert, related...)
}

// AddRoomRoomMessages adds the given related objects to the existing relationships
// of the Room, optionally inserting them as new records.
// Appends related to o.R.RoomRoomMessages.
// Sets related.R.Room appropriately.
func (o *Room) AddRoomRoomMessages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*RoomMessage) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.RoomID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"RoomMessage\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"room_id"}),
				strmangle.WhereClause("\"", "\"", 2, roomMessagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.RoomID = o.ID
		}
	}

	if o.R == nil {
		o.R = &roomR{
			RoomRoomMessages: related,
		}
	} else {
		o.R.RoomRoomMessages = append(o.R.RoomRoomMessages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roomMessageR{
				Room: o,
			}
		} else {
			rel.R.Room = o
		}
	}
	return nil
}

// Rooms retrieves all the records using an executor.
func Rooms(mods ...qm.QueryMod) roomQuery {
	mods = append(mods, qm.From("\"Room\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"Room\".*"})
	}

	return roomQuery{q}
}

// FindRoomG retrieves a single record by ID.
func FindRoomG(ctx context.Context, iD string, selectCols ...string) (*Room, error) {
	return FindRoom(ctx, boil.GetContextDB(), iD, selectCols...)
}

// FindRoom retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoom(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Room, error) {
	roomObj := &Room{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"Room\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, roomObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from Room")
	}

	if err = roomObj.doAfterSelectHooks(ctx, exec); err != nil {
		return roomObj, err
	}

	return roomObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Room) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Room) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no Room provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roomColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roomInsertCacheMut.RLock()
	cache, cached := roomInsertCache[key]
	roomInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roomAllColumns,
			roomColumnsWithDefault,
			roomColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roomType, roomMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roomType, roomMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"Room\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"Room\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into Room")
	}

	if !cached {
		roomInsertCacheMut.Lock()
		roomInsertCache[key] = cache
		roomInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single Room record using the global executor.
// See Update for more documentation.
func (o *Room) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the Room.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Room) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	roomUpdateCacheMut.RLock()
	cache, cached := roomUpdateCache[key]
	roomUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roomAllColumns,
			roomPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update Room, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"Room\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, roomPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roomType, roomMapping, append(wl, roomPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update Room row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for Room")
	}

	if !cached {
		roomUpdateCacheMut.Lock()
		roomUpdateCache[key] = cache
		roomUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q roomQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q roomQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for Room")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for Room")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RoomSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoomSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"Room\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, roomPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in room slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all room")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Room) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Room) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("sqlboiler: no Room provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roomColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roomUpsertCacheMut.RLock()
	cache, cached := roomUpsertCache[key]
	roomUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			roomAllColumns,
			roomColumnsWithDefault,
			roomColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			roomAllColumns,
			roomPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert Room, could not build update column list")
		}

		ret := strmangle.SetComplement(roomAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(roomPrimaryKeyColumns) == 0 {
				return errors.New("sqlboiler: unable to upsert Room, could not build conflict column list")
			}

			conflict = make([]string, len(roomPrimaryKeyColumns))
			copy(conflict, roomPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"Room\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(roomType, roomMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roomType, roomMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert Room")
	}

	if !cached {
		roomUpsertCacheMut.Lock()
		roomUpsertCache[key] = cache
		roomUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single Room record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Room) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single Room record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Room) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no Room provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roomPrimaryKeyMapping)
	sql := "DELETE FROM \"Room\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from Room")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for Room")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q roomQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q roomQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no roomQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from Room")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for Room")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RoomSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoomSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(roomBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"Room\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roomPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from room slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for Room")
	}

	if len(roomAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Room) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("sqlboiler: no Room provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Room) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoom(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoomSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("sqlboiler: empty RoomSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoomSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoomSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"Room\".* FROM \"Room\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roomPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in RoomSlice")
	}

	*o = slice

	return nil
}

// RoomExistsG checks if the Room row exists.
func RoomExistsG(ctx context.Context, iD string) (bool, error) {
	return RoomExists(ctx, boil.GetContextDB(), iD)
}

// RoomExists checks if the Room row exists.
func RoomExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"Room\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if Room exists")
	}

	return exists, nil
}

// Exists checks if the Room row exists.
func (o *Room) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RoomExists(ctx, exec, o.ID)
}
