// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboiler

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// RoomMember is an object representing the database table.
type RoomMember struct {
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	DeletedAt time.Time `boil:"deleted_at" json:"deleted_at" toml:"deleted_at" yaml:"deleted_at"`
	UserID    string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	RoomID    string    `boil:"room_id" json:"room_id" toml:"room_id" yaml:"room_id"`

	R *roomMemberR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roomMemberL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoomMemberColumns = struct {
	CreatedAt string
	DeletedAt string
	UserID    string
	RoomID    string
}{
	CreatedAt: "created_at",
	DeletedAt: "deleted_at",
	UserID:    "user_id",
	RoomID:    "room_id",
}

var RoomMemberTableColumns = struct {
	CreatedAt string
	DeletedAt string
	UserID    string
	RoomID    string
}{
	CreatedAt: "room_members.created_at",
	DeletedAt: "room_members.deleted_at",
	UserID:    "room_members.user_id",
	RoomID:    "room_members.room_id",
}

// Generated where

var RoomMemberWhere = struct {
	CreatedAt whereHelpertime_Time
	DeletedAt whereHelpertime_Time
	UserID    whereHelperstring
	RoomID    whereHelperstring
}{
	CreatedAt: whereHelpertime_Time{field: "\"room_members\".\"created_at\""},
	DeletedAt: whereHelpertime_Time{field: "\"room_members\".\"deleted_at\""},
	UserID:    whereHelperstring{field: "\"room_members\".\"user_id\""},
	RoomID:    whereHelperstring{field: "\"room_members\".\"room_id\""},
}

// RoomMemberRels is where relationship names are stored.
var RoomMemberRels = struct {
	Room string
	User string
}{
	Room: "Room",
	User: "User",
}

// roomMemberR is where relationships are stored.
type roomMemberR struct {
	Room *Room `boil:"Room" json:"Room" toml:"Room" yaml:"Room"`
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*roomMemberR) NewStruct() *roomMemberR {
	return &roomMemberR{}
}

func (r *roomMemberR) GetRoom() *Room {
	if r == nil {
		return nil
	}
	return r.Room
}

func (r *roomMemberR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// roomMemberL is where Load methods for each relationship are stored.
type roomMemberL struct{}

var (
	roomMemberAllColumns            = []string{"created_at", "deleted_at", "user_id", "room_id"}
	roomMemberColumnsWithoutDefault = []string{"created_at", "deleted_at", "user_id", "room_id"}
	roomMemberColumnsWithDefault    = []string{}
	roomMemberPrimaryKeyColumns     = []string{"user_id", "room_id"}
	roomMemberGeneratedColumns      = []string{}
)

type (
	// RoomMemberSlice is an alias for a slice of pointers to RoomMember.
	// This should almost always be used instead of []RoomMember.
	RoomMemberSlice []*RoomMember
	// RoomMemberHook is the signature for custom RoomMember hook methods
	RoomMemberHook func(context.Context, boil.ContextExecutor, *RoomMember) error

	roomMemberQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roomMemberType                 = reflect.TypeOf(&RoomMember{})
	roomMemberMapping              = queries.MakeStructMapping(roomMemberType)
	roomMemberPrimaryKeyMapping, _ = queries.BindMapping(roomMemberType, roomMemberMapping, roomMemberPrimaryKeyColumns)
	roomMemberInsertCacheMut       sync.RWMutex
	roomMemberInsertCache          = make(map[string]insertCache)
	roomMemberUpdateCacheMut       sync.RWMutex
	roomMemberUpdateCache          = make(map[string]updateCache)
	roomMemberUpsertCacheMut       sync.RWMutex
	roomMemberUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var roomMemberAfterSelectMu sync.Mutex
var roomMemberAfterSelectHooks []RoomMemberHook

var roomMemberBeforeInsertMu sync.Mutex
var roomMemberBeforeInsertHooks []RoomMemberHook
var roomMemberAfterInsertMu sync.Mutex
var roomMemberAfterInsertHooks []RoomMemberHook

var roomMemberBeforeUpdateMu sync.Mutex
var roomMemberBeforeUpdateHooks []RoomMemberHook
var roomMemberAfterUpdateMu sync.Mutex
var roomMemberAfterUpdateHooks []RoomMemberHook

var roomMemberBeforeDeleteMu sync.Mutex
var roomMemberBeforeDeleteHooks []RoomMemberHook
var roomMemberAfterDeleteMu sync.Mutex
var roomMemberAfterDeleteHooks []RoomMemberHook

var roomMemberBeforeUpsertMu sync.Mutex
var roomMemberBeforeUpsertHooks []RoomMemberHook
var roomMemberAfterUpsertMu sync.Mutex
var roomMemberAfterUpsertHooks []RoomMemberHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RoomMember) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomMemberAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RoomMember) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomMemberBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RoomMember) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomMemberAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RoomMember) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomMemberBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RoomMember) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomMemberAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RoomMember) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomMemberBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RoomMember) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomMemberAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RoomMember) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomMemberBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RoomMember) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range roomMemberAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoomMemberHook registers your hook function for all future operations.
func AddRoomMemberHook(hookPoint boil.HookPoint, roomMemberHook RoomMemberHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		roomMemberAfterSelectMu.Lock()
		roomMemberAfterSelectHooks = append(roomMemberAfterSelectHooks, roomMemberHook)
		roomMemberAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		roomMemberBeforeInsertMu.Lock()
		roomMemberBeforeInsertHooks = append(roomMemberBeforeInsertHooks, roomMemberHook)
		roomMemberBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		roomMemberAfterInsertMu.Lock()
		roomMemberAfterInsertHooks = append(roomMemberAfterInsertHooks, roomMemberHook)
		roomMemberAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		roomMemberBeforeUpdateMu.Lock()
		roomMemberBeforeUpdateHooks = append(roomMemberBeforeUpdateHooks, roomMemberHook)
		roomMemberBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		roomMemberAfterUpdateMu.Lock()
		roomMemberAfterUpdateHooks = append(roomMemberAfterUpdateHooks, roomMemberHook)
		roomMemberAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		roomMemberBeforeDeleteMu.Lock()
		roomMemberBeforeDeleteHooks = append(roomMemberBeforeDeleteHooks, roomMemberHook)
		roomMemberBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		roomMemberAfterDeleteMu.Lock()
		roomMemberAfterDeleteHooks = append(roomMemberAfterDeleteHooks, roomMemberHook)
		roomMemberAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		roomMemberBeforeUpsertMu.Lock()
		roomMemberBeforeUpsertHooks = append(roomMemberBeforeUpsertHooks, roomMemberHook)
		roomMemberBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		roomMemberAfterUpsertMu.Lock()
		roomMemberAfterUpsertHooks = append(roomMemberAfterUpsertHooks, roomMemberHook)
		roomMemberAfterUpsertMu.Unlock()
	}
}

// OneG returns a single roomMember record from the query using the global executor.
func (q roomMemberQuery) OneG(ctx context.Context) (*RoomMember, error) {
	return q.One(ctx, boil.GetContextDB())
}

// One returns a single roomMember record from the query.
func (q roomMemberQuery) One(ctx context.Context, exec boil.ContextExecutor) (*RoomMember, error) {
	o := &RoomMember{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: failed to execute a one query for room_members")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all RoomMember records from the query using the global executor.
func (q roomMemberQuery) AllG(ctx context.Context) (RoomMemberSlice, error) {
	return q.All(ctx, boil.GetContextDB())
}

// All returns all RoomMember records from the query.
func (q roomMemberQuery) All(ctx context.Context, exec boil.ContextExecutor) (RoomMemberSlice, error) {
	var o []*RoomMember

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboiler: failed to assign all query results to RoomMember slice")
	}

	if len(roomMemberAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all RoomMember records in the query using the global executor
func (q roomMemberQuery) CountG(ctx context.Context) (int64, error) {
	return q.Count(ctx, boil.GetContextDB())
}

// Count returns the count of all RoomMember records in the query.
func (q roomMemberQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to count room_members rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q roomMemberQuery) ExistsG(ctx context.Context) (bool, error) {
	return q.Exists(ctx, boil.GetContextDB())
}

// Exists checks if the row exists in the table.
func (q roomMemberQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: failed to check if room_members exists")
	}

	return count > 0, nil
}

// Room pointed to by the foreign key.
func (o *RoomMember) Room(mods ...qm.QueryMod) roomQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoomID),
	}

	queryMods = append(queryMods, mods...)

	return Rooms(queryMods...)
}

// User pointed to by the foreign key.
func (o *RoomMember) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadRoom allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roomMemberL) LoadRoom(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoomMember interface{}, mods queries.Applicator) error {
	var slice []*RoomMember
	var object *RoomMember

	if singular {
		var ok bool
		object, ok = maybeRoomMember.(*RoomMember)
		if !ok {
			object = new(RoomMember)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoomMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoomMember))
			}
		}
	} else {
		s, ok := maybeRoomMember.(*[]*RoomMember)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoomMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoomMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &roomMemberR{}
		}
		args[object.RoomID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roomMemberR{}
			}

			args[obj.RoomID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`rooms`),
		qm.WhereIn(`rooms.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Room")
	}

	var resultSlice []*Room
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Room")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for rooms")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for rooms")
	}

	if len(roomAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Room = foreign
		if foreign.R == nil {
			foreign.R = &roomR{}
		}
		foreign.R.RoomMembers = append(foreign.R.RoomMembers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoomID == foreign.ID {
				local.R.Room = foreign
				if foreign.R == nil {
					foreign.R = &roomR{}
				}
				foreign.R.RoomMembers = append(foreign.R.RoomMembers, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roomMemberL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeRoomMember interface{}, mods queries.Applicator) error {
	var slice []*RoomMember
	var object *RoomMember

	if singular {
		var ok bool
		object, ok = maybeRoomMember.(*RoomMember)
		if !ok {
			object = new(RoomMember)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoomMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoomMember))
			}
		}
	} else {
		s, ok := maybeRoomMember.(*[]*RoomMember)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoomMember)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoomMember))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &roomMemberR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roomMemberR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.RoomMembers = append(foreign.R.RoomMembers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.RoomMembers = append(foreign.R.RoomMembers, local)
				break
			}
		}
	}

	return nil
}

// SetRoomG of the roomMember to the related item.
// Sets o.R.Room to related.
// Adds o to related.R.RoomMembers.
// Uses the global database handle.
func (o *RoomMember) SetRoomG(ctx context.Context, insert bool, related *Room) error {
	return o.SetRoom(ctx, boil.GetContextDB(), insert, related)
}

// SetRoom of the roomMember to the related item.
// Sets o.R.Room to related.
// Adds o to related.R.RoomMembers.
func (o *RoomMember) SetRoom(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Room) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"room_members\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"room_id"}),
		strmangle.WhereClause("\"", "\"", 0, roomMemberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.RoomID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoomID = related.ID
	if o.R == nil {
		o.R = &roomMemberR{
			Room: related,
		}
	} else {
		o.R.Room = related
	}

	if related.R == nil {
		related.R = &roomR{
			RoomMembers: RoomMemberSlice{o},
		}
	} else {
		related.R.RoomMembers = append(related.R.RoomMembers, o)
	}

	return nil
}

// SetUserG of the roomMember to the related item.
// Sets o.R.User to related.
// Adds o to related.R.RoomMembers.
// Uses the global database handle.
func (o *RoomMember) SetUserG(ctx context.Context, insert bool, related *User) error {
	return o.SetUser(ctx, boil.GetContextDB(), insert, related)
}

// SetUser of the roomMember to the related item.
// Sets o.R.User to related.
// Adds o to related.R.RoomMembers.
func (o *RoomMember) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"room_members\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 0, roomMemberPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.RoomID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &roomMemberR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			RoomMembers: RoomMemberSlice{o},
		}
	} else {
		related.R.RoomMembers = append(related.R.RoomMembers, o)
	}

	return nil
}

// RoomMembers retrieves all the records using an executor.
func RoomMembers(mods ...qm.QueryMod) roomMemberQuery {
	mods = append(mods, qm.From("\"room_members\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"room_members\".*"})
	}

	return roomMemberQuery{q}
}

// FindRoomMemberG retrieves a single record by ID.
func FindRoomMemberG(ctx context.Context, userID string, roomID string, selectCols ...string) (*RoomMember, error) {
	return FindRoomMember(ctx, boil.GetContextDB(), userID, roomID, selectCols...)
}

// FindRoomMember retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoomMember(ctx context.Context, exec boil.ContextExecutor, userID string, roomID string, selectCols ...string) (*RoomMember, error) {
	roomMemberObj := &RoomMember{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"room_members\" where \"user_id\"=? AND \"room_id\"=?", sel,
	)

	q := queries.Raw(query, userID, roomID)

	err := q.Bind(ctx, exec, roomMemberObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboiler: unable to select from room_members")
	}

	if err = roomMemberObj.doAfterSelectHooks(ctx, exec); err != nil {
		return roomMemberObj, err
	}

	return roomMemberObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RoomMember) InsertG(ctx context.Context, columns boil.Columns) error {
	return o.Insert(ctx, boil.GetContextDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoomMember) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no room_members provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roomMemberColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roomMemberInsertCacheMut.RLock()
	cache, cached := roomMemberInsertCache[key]
	roomMemberInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roomMemberAllColumns,
			roomMemberColumnsWithDefault,
			roomMemberColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roomMemberType, roomMemberMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roomMemberType, roomMemberMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"room_members\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"room_members\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to insert into room_members")
	}

	if !cached {
		roomMemberInsertCacheMut.Lock()
		roomMemberInsertCache[key] = cache
		roomMemberInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateG a single RoomMember record using the global executor.
// See Update for more documentation.
func (o *RoomMember) UpdateG(ctx context.Context, columns boil.Columns) (int64, error) {
	return o.Update(ctx, boil.GetContextDB(), columns)
}

// Update uses an executor to update the RoomMember.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoomMember) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	roomMemberUpdateCacheMut.RLock()
	cache, cached := roomMemberUpdateCache[key]
	roomMemberUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roomMemberAllColumns,
			roomMemberPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboiler: unable to update room_members, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"room_members\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, roomMemberPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roomMemberType, roomMemberMapping, append(wl, roomMemberPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update room_members row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by update for room_members")
	}

	if !cached {
		roomMemberUpdateCacheMut.Lock()
		roomMemberUpdateCache[key] = cache
		roomMemberUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q roomMemberQuery) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return q.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q roomMemberQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all for room_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected for room_members")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RoomMemberSlice) UpdateAllG(ctx context.Context, cols M) (int64, error) {
	return o.UpdateAll(ctx, boil.GetContextDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoomMemberSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboiler: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"room_members\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roomMemberPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to update all in roomMember slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to retrieve rows affected all in update all roomMember")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RoomMember) UpsertG(ctx context.Context, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(ctx, boil.GetContextDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RoomMember) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboiler: no room_members provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roomMemberColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roomMemberUpsertCacheMut.RLock()
	cache, cached := roomMemberUpsertCache[key]
	roomMemberUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			roomMemberAllColumns,
			roomMemberColumnsWithDefault,
			roomMemberColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			roomMemberAllColumns,
			roomMemberPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboiler: unable to upsert room_members, could not build update column list")
		}

		ret := strmangle.SetComplement(roomMemberAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(roomMemberPrimaryKeyColumns))
			copy(conflict, roomMemberPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"room_members\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(roomMemberType, roomMemberMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roomMemberType, roomMemberMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to upsert room_members")
	}

	if !cached {
		roomMemberUpsertCacheMut.Lock()
		roomMemberUpsertCache[key] = cache
		roomMemberUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteG deletes a single RoomMember record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RoomMember) DeleteG(ctx context.Context) (int64, error) {
	return o.Delete(ctx, boil.GetContextDB())
}

// Delete deletes a single RoomMember record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoomMember) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboiler: no RoomMember provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roomMemberPrimaryKeyMapping)
	sql := "DELETE FROM \"room_members\" WHERE \"user_id\"=? AND \"room_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete from room_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by delete for room_members")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q roomMemberQuery) DeleteAllG(ctx context.Context) (int64, error) {
	return q.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all matching rows.
func (q roomMemberQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboiler: no roomMemberQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from room_members")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for room_members")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RoomMemberSlice) DeleteAllG(ctx context.Context) (int64, error) {
	return o.DeleteAll(ctx, boil.GetContextDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoomMemberSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(roomMemberBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"room_members\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roomMemberPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: unable to delete all from roomMember slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboiler: failed to get rows affected by deleteall for room_members")
	}

	if len(roomMemberAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RoomMember) ReloadG(ctx context.Context) error {
	if o == nil {
		return errors.New("sqlboiler: no RoomMember provided for reload")
	}

	return o.Reload(ctx, boil.GetContextDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoomMember) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindRoomMember(ctx, exec, o.UserID, o.RoomID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoomMemberSlice) ReloadAllG(ctx context.Context) error {
	if o == nil {
		return errors.New("sqlboiler: empty RoomMemberSlice provided for reload all")
	}

	return o.ReloadAll(ctx, boil.GetContextDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoomMemberSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoomMemberSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roomMemberPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"room_members\".* FROM \"room_members\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, roomMemberPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboiler: unable to reload all in RoomMemberSlice")
	}

	*o = slice

	return nil
}

// RoomMemberExistsG checks if the RoomMember row exists.
func RoomMemberExistsG(ctx context.Context, userID string, roomID string) (bool, error) {
	return RoomMemberExists(ctx, boil.GetContextDB(), userID, roomID)
}

// RoomMemberExists checks if the RoomMember row exists.
func RoomMemberExists(ctx context.Context, exec boil.ContextExecutor, userID string, roomID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"room_members\" where \"user_id\"=? AND \"room_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, roomID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, roomID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboiler: unable to check if room_members exists")
	}

	return exists, nil
}

// Exists checks if the RoomMember row exists.
func (o *RoomMember) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return RoomMemberExists(ctx, exec, o.UserID, o.RoomID)
}
