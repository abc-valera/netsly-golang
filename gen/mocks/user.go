// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/abc-valera/netsly-golang/internal/domain/entity"
	filter "github.com/abc-valera/netsly-golang/internal/domain/persistence/query/queryUtil/filter"

	mock "github.com/stretchr/testify/mock"

	model "github.com/abc-valera/netsly-golang/internal/domain/model"

	selector "github.com/abc-valera/netsly-golang/internal/domain/persistence/query/queryUtil/selector"
)

// User is an autogenerated mock type for the IUser type
type User struct {
	mock.Mock
}

type User_Expecter struct {
	mock *mock.Mock
}

func (_m *User) EXPECT() *User_Expecter {
	return &User_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *User) Create(ctx context.Context, req entity.UserCreateRequest) (model.User, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserCreateRequest) (model.User, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.UserCreateRequest) model.User); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.UserCreateRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type User_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req entity.UserCreateRequest
func (_e *User_Expecter) Create(ctx interface{}, req interface{}) *User_Create_Call {
	return &User_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *User_Create_Call) Run(run func(ctx context.Context, req entity.UserCreateRequest)) *User_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.UserCreateRequest))
	})
	return _c
}

func (_c *User_Create_Call) Return(_a0 model.User, _a1 error) *User_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *User_Create_Call) RunAndReturn(run func(context.Context, entity.UserCreateRequest) (model.User, error)) *User_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, userID, req
func (_m *User) Delete(ctx context.Context, userID string, req entity.UserDeleteRequest) error {
	ret := _m.Called(ctx, userID, req)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.UserDeleteRequest) error); ok {
		r0 = rf(ctx, userID, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// User_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type User_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - req entity.UserDeleteRequest
func (_e *User_Expecter) Delete(ctx interface{}, userID interface{}, req interface{}) *User_Delete_Call {
	return &User_Delete_Call{Call: _e.mock.On("Delete", ctx, userID, req)}
}

func (_c *User_Delete_Call) Run(run func(ctx context.Context, userID string, req entity.UserDeleteRequest)) *User_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(entity.UserDeleteRequest))
	})
	return _c
}

func (_c *User_Delete_Call) Return(_a0 error) *User_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *User_Delete_Call) RunAndReturn(run func(context.Context, string, entity.UserDeleteRequest) error) *User_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetMany provides a mock function with given fields: ctx, selectorOptions
func (_m *User) GetMany(ctx context.Context, selectorOptions ...selector.Option[model.User]) ([]model.User, error) {
	_va := make([]interface{}, len(selectorOptions))
	for _i := range selectorOptions {
		_va[_i] = selectorOptions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMany")
	}

	var r0 []model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...selector.Option[model.User]) ([]model.User, error)); ok {
		return rf(ctx, selectorOptions...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...selector.Option[model.User]) []model.User); ok {
		r0 = rf(ctx, selectorOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...selector.Option[model.User]) error); ok {
		r1 = rf(ctx, selectorOptions...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_GetMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMany'
type User_GetMany_Call struct {
	*mock.Call
}

// GetMany is a helper method to define mock.On call
//   - ctx context.Context
//   - selectorOptions ...selector.Option[model.User]
func (_e *User_Expecter) GetMany(ctx interface{}, selectorOptions ...interface{}) *User_GetMany_Call {
	return &User_GetMany_Call{Call: _e.mock.On("GetMany",
		append([]interface{}{ctx}, selectorOptions...)...)}
}

func (_c *User_GetMany_Call) Run(run func(ctx context.Context, selectorOptions ...selector.Option[model.User])) *User_GetMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]selector.Option[model.User], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(selector.Option[model.User])
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *User_GetMany_Call) Return(_a0 []model.User, _a1 error) *User_GetMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *User_GetMany_Call) RunAndReturn(run func(context.Context, ...selector.Option[model.User]) ([]model.User, error)) *User_GetMany_Call {
	_c.Call.Return(run)
	return _c
}

// GetOne provides a mock function with given fields: ctx, fitlerOptions
func (_m *User) GetOne(ctx context.Context, fitlerOptions ...filter.Option[model.User]) (model.User, error) {
	_va := make([]interface{}, len(fitlerOptions))
	for _i := range fitlerOptions {
		_va[_i] = fitlerOptions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOne")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...filter.Option[model.User]) (model.User, error)); ok {
		return rf(ctx, fitlerOptions...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...filter.Option[model.User]) model.User); ok {
		r0 = rf(ctx, fitlerOptions...)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...filter.Option[model.User]) error); ok {
		r1 = rf(ctx, fitlerOptions...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_GetOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOne'
type User_GetOne_Call struct {
	*mock.Call
}

// GetOne is a helper method to define mock.On call
//   - ctx context.Context
//   - fitlerOptions ...filter.Option[model.User]
func (_e *User_Expecter) GetOne(ctx interface{}, fitlerOptions ...interface{}) *User_GetOne_Call {
	return &User_GetOne_Call{Call: _e.mock.On("GetOne",
		append([]interface{}{ctx}, fitlerOptions...)...)}
}

func (_c *User_GetOne_Call) Run(run func(ctx context.Context, fitlerOptions ...filter.Option[model.User])) *User_GetOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]filter.Option[model.User], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(filter.Option[model.User])
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *User_GetOne_Call) Return(_a0 model.User, _a1 error) *User_GetOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *User_GetOne_Call) RunAndReturn(run func(context.Context, ...filter.Option[model.User]) (model.User, error)) *User_GetOne_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, userID, req
func (_m *User) Update(ctx context.Context, userID string, req entity.UserUpdateRequest) (model.User, error) {
	ret := _m.Called(ctx, userID, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.UserUpdateRequest) (model.User, error)); ok {
		return rf(ctx, userID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.UserUpdateRequest) model.User); ok {
		r0 = rf(ctx, userID, req)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, entity.UserUpdateRequest) error); ok {
		r1 = rf(ctx, userID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// User_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type User_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - req entity.UserUpdateRequest
func (_e *User_Expecter) Update(ctx interface{}, userID interface{}, req interface{}) *User_Update_Call {
	return &User_Update_Call{Call: _e.mock.On("Update", ctx, userID, req)}
}

func (_c *User_Update_Call) Run(run func(ctx context.Context, userID string, req entity.UserUpdateRequest)) *User_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(entity.UserUpdateRequest))
	})
	return _c
}

func (_c *User_Update_Call) Return(_a0 model.User, _a1 error) *User_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *User_Update_Call) RunAndReturn(run func(context.Context, string, entity.UserUpdateRequest) (model.User, error)) *User_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewUser creates a new instance of User. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *User {
	mock := &User{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
