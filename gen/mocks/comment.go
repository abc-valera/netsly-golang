// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/abc-valera/netsly-golang/internal/domain/entity"
	mock "github.com/stretchr/testify/mock"

	model "github.com/abc-valera/netsly-golang/internal/domain/model"

	selector "github.com/abc-valera/netsly-golang/internal/domain/persistence/query/queryUtil/selector"
)

// Comment is an autogenerated mock type for the IComment type
type Comment struct {
	mock.Mock
}

type Comment_Expecter struct {
	mock *mock.Mock
}

func (_m *Comment) EXPECT() *Comment_Expecter {
	return &Comment_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *Comment) Create(ctx context.Context, req entity.CommentCreateRequest) (model.Comment, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.CommentCreateRequest) (model.Comment, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.CommentCreateRequest) model.Comment); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.CommentCreateRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Comment_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Comment_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req entity.CommentCreateRequest
func (_e *Comment_Expecter) Create(ctx interface{}, req interface{}) *Comment_Create_Call {
	return &Comment_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *Comment_Create_Call) Run(run func(ctx context.Context, req entity.CommentCreateRequest)) *Comment_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.CommentCreateRequest))
	})
	return _c
}

func (_c *Comment_Create_Call) Return(_a0 model.Comment, _a1 error) *Comment_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Comment_Create_Call) RunAndReturn(run func(context.Context, entity.CommentCreateRequest) (model.Comment, error)) *Comment_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, commentID
func (_m *Comment) Delete(ctx context.Context, commentID string) error {
	ret := _m.Called(ctx, commentID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, commentID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Comment_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Comment_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - commentID string
func (_e *Comment_Expecter) Delete(ctx interface{}, commentID interface{}) *Comment_Delete_Call {
	return &Comment_Delete_Call{Call: _e.mock.On("Delete", ctx, commentID)}
}

func (_c *Comment_Delete_Call) Run(run func(ctx context.Context, commentID string)) *Comment_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Comment_Delete_Call) Return(_a0 error) *Comment_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Comment_Delete_Call) RunAndReturn(run func(context.Context, string) error) *Comment_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: _a0, _a1
func (_m *Comment) Get(_a0 context.Context, _a1 model.Comment) (model.Comment, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Comment) (model.Comment, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.Comment) model.Comment); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.Comment) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Comment_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Comment_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 model.Comment
func (_e *Comment_Expecter) Get(_a0 interface{}, _a1 interface{}) *Comment_Get_Call {
	return &Comment_Get_Call{Call: _e.mock.On("Get", _a0, _a1)}
}

func (_c *Comment_Get_Call) Run(run func(_a0 context.Context, _a1 model.Comment)) *Comment_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Comment))
	})
	return _c
}

func (_c *Comment_Get_Call) Return(_a0 model.Comment, _a1 error) *Comment_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Comment_Get_Call) RunAndReturn(run func(context.Context, model.Comment) (model.Comment, error)) *Comment_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetMany provides a mock function with given fields: _a0, _a1
func (_m *Comment) GetMany(_a0 context.Context, _a1 ...selector.Option[model.Comment]) ([]model.Comment, error) {
	_va := make([]interface{}, len(_a1))
	for _i := range _a1 {
		_va[_i] = _a1[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _a0)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMany")
	}

	var r0 []model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...selector.Option[model.Comment]) ([]model.Comment, error)); ok {
		return rf(_a0, _a1...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...selector.Option[model.Comment]) []model.Comment); ok {
		r0 = rf(_a0, _a1...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Comment)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...selector.Option[model.Comment]) error); ok {
		r1 = rf(_a0, _a1...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Comment_GetMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMany'
type Comment_GetMany_Call struct {
	*mock.Call
}

// GetMany is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 ...selector.Option[model.Comment]
func (_e *Comment_Expecter) GetMany(_a0 interface{}, _a1 ...interface{}) *Comment_GetMany_Call {
	return &Comment_GetMany_Call{Call: _e.mock.On("GetMany",
		append([]interface{}{_a0}, _a1...)...)}
}

func (_c *Comment_GetMany_Call) Run(run func(_a0 context.Context, _a1 ...selector.Option[model.Comment])) *Comment_GetMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]selector.Option[model.Comment], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(selector.Option[model.Comment])
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Comment_GetMany_Call) Return(_a0 []model.Comment, _a1 error) *Comment_GetMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Comment_GetMany_Call) RunAndReturn(run func(context.Context, ...selector.Option[model.Comment]) ([]model.Comment, error)) *Comment_GetMany_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, commentID, req
func (_m *Comment) Update(ctx context.Context, commentID string, req entity.CommentUpdateRequest) (model.Comment, error) {
	ret := _m.Called(ctx, commentID, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 model.Comment
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.CommentUpdateRequest) (model.Comment, error)); ok {
		return rf(ctx, commentID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.CommentUpdateRequest) model.Comment); ok {
		r0 = rf(ctx, commentID, req)
	} else {
		r0 = ret.Get(0).(model.Comment)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, entity.CommentUpdateRequest) error); ok {
		r1 = rf(ctx, commentID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Comment_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Comment_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - commentID string
//   - req entity.CommentUpdateRequest
func (_e *Comment_Expecter) Update(ctx interface{}, commentID interface{}, req interface{}) *Comment_Update_Call {
	return &Comment_Update_Call{Call: _e.mock.On("Update", ctx, commentID, req)}
}

func (_c *Comment_Update_Call) Run(run func(ctx context.Context, commentID string, req entity.CommentUpdateRequest)) *Comment_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(entity.CommentUpdateRequest))
	})
	return _c
}

func (_c *Comment_Update_Call) Return(_a0 model.Comment, _a1 error) *Comment_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Comment_Update_Call) RunAndReturn(run func(context.Context, string, entity.CommentUpdateRequest) (model.Comment, error)) *Comment_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewComment creates a new instance of Comment. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewComment(t interface {
	mock.TestingT
	Cleanup(func())
}) *Comment {
	mock := &Comment{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
