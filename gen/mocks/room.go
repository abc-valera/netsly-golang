// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/abc-valera/netsly-golang/internal/domain/entity"
	filter "github.com/abc-valera/netsly-golang/internal/domain/persistence/query/queryUtil/filter"

	mock "github.com/stretchr/testify/mock"

	model "github.com/abc-valera/netsly-golang/internal/domain/model"

	selector "github.com/abc-valera/netsly-golang/internal/domain/persistence/query/queryUtil/selector"
)

// Room is an autogenerated mock type for the IRoom type
type Room struct {
	mock.Mock
}

type Room_Expecter struct {
	mock *mock.Mock
}

func (_m *Room) EXPECT() *Room_Expecter {
	return &Room_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, req
func (_m *Room) Create(ctx context.Context, req entity.RoomCreateRequest) (model.Room, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.RoomCreateRequest) (model.Room, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.RoomCreateRequest) model.Room); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.Room)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.RoomCreateRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Room_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Room_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req entity.RoomCreateRequest
func (_e *Room_Expecter) Create(ctx interface{}, req interface{}) *Room_Create_Call {
	return &Room_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *Room_Create_Call) Run(run func(ctx context.Context, req entity.RoomCreateRequest)) *Room_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.RoomCreateRequest))
	})
	return _c
}

func (_c *Room_Create_Call) Return(_a0 model.Room, _a1 error) *Room_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Room_Create_Call) RunAndReturn(run func(context.Context, entity.RoomCreateRequest) (model.Room, error)) *Room_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, roomID
func (_m *Room) Delete(ctx context.Context, roomID string) error {
	ret := _m.Called(ctx, roomID)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, roomID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Room_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Room_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - roomID string
func (_e *Room_Expecter) Delete(ctx interface{}, roomID interface{}) *Room_Delete_Call {
	return &Room_Delete_Call{Call: _e.mock.On("Delete", ctx, roomID)}
}

func (_c *Room_Delete_Call) Run(run func(ctx context.Context, roomID string)) *Room_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Room_Delete_Call) Return(_a0 error) *Room_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Room_Delete_Call) RunAndReturn(run func(context.Context, string) error) *Room_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetMany provides a mock function with given fields: ctx, selectorOptions
func (_m *Room) GetMany(ctx context.Context, selectorOptions ...selector.Option[model.Room]) ([]model.Room, error) {
	_va := make([]interface{}, len(selectorOptions))
	for _i := range selectorOptions {
		_va[_i] = selectorOptions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetMany")
	}

	var r0 []model.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...selector.Option[model.Room]) ([]model.Room, error)); ok {
		return rf(ctx, selectorOptions...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...selector.Option[model.Room]) []model.Room); ok {
		r0 = rf(ctx, selectorOptions...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Room)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...selector.Option[model.Room]) error); ok {
		r1 = rf(ctx, selectorOptions...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Room_GetMany_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMany'
type Room_GetMany_Call struct {
	*mock.Call
}

// GetMany is a helper method to define mock.On call
//   - ctx context.Context
//   - selectorOptions ...selector.Option[model.Room]
func (_e *Room_Expecter) GetMany(ctx interface{}, selectorOptions ...interface{}) *Room_GetMany_Call {
	return &Room_GetMany_Call{Call: _e.mock.On("GetMany",
		append([]interface{}{ctx}, selectorOptions...)...)}
}

func (_c *Room_GetMany_Call) Run(run func(ctx context.Context, selectorOptions ...selector.Option[model.Room])) *Room_GetMany_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]selector.Option[model.Room], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(selector.Option[model.Room])
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Room_GetMany_Call) Return(_a0 []model.Room, _a1 error) *Room_GetMany_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Room_GetMany_Call) RunAndReturn(run func(context.Context, ...selector.Option[model.Room]) ([]model.Room, error)) *Room_GetMany_Call {
	_c.Call.Return(run)
	return _c
}

// GetOne provides a mock function with given fields: ctx, fitlerOptions
func (_m *Room) GetOne(ctx context.Context, fitlerOptions ...filter.Option[model.Room]) (model.Room, error) {
	_va := make([]interface{}, len(fitlerOptions))
	for _i := range fitlerOptions {
		_va[_i] = fitlerOptions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetOne")
	}

	var r0 model.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ...filter.Option[model.Room]) (model.Room, error)); ok {
		return rf(ctx, fitlerOptions...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ...filter.Option[model.Room]) model.Room); ok {
		r0 = rf(ctx, fitlerOptions...)
	} else {
		r0 = ret.Get(0).(model.Room)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ...filter.Option[model.Room]) error); ok {
		r1 = rf(ctx, fitlerOptions...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Room_GetOne_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOne'
type Room_GetOne_Call struct {
	*mock.Call
}

// GetOne is a helper method to define mock.On call
//   - ctx context.Context
//   - fitlerOptions ...filter.Option[model.Room]
func (_e *Room_Expecter) GetOne(ctx interface{}, fitlerOptions ...interface{}) *Room_GetOne_Call {
	return &Room_GetOne_Call{Call: _e.mock.On("GetOne",
		append([]interface{}{ctx}, fitlerOptions...)...)}
}

func (_c *Room_GetOne_Call) Run(run func(ctx context.Context, fitlerOptions ...filter.Option[model.Room])) *Room_GetOne_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]filter.Option[model.Room], len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(filter.Option[model.Room])
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *Room_GetOne_Call) Return(_a0 model.Room, _a1 error) *Room_GetOne_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Room_GetOne_Call) RunAndReturn(run func(context.Context, ...filter.Option[model.Room]) (model.Room, error)) *Room_GetOne_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, roomID, req
func (_m *Room) Update(ctx context.Context, roomID string, req entity.RoomUpdateRequest) (model.Room, error) {
	ret := _m.Called(ctx, roomID, req)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 model.Room
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.RoomUpdateRequest) (model.Room, error)); ok {
		return rf(ctx, roomID, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, entity.RoomUpdateRequest) model.Room); ok {
		r0 = rf(ctx, roomID, req)
	} else {
		r0 = ret.Get(0).(model.Room)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, entity.RoomUpdateRequest) error); ok {
		r1 = rf(ctx, roomID, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Room_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type Room_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - roomID string
//   - req entity.RoomUpdateRequest
func (_e *Room_Expecter) Update(ctx interface{}, roomID interface{}, req interface{}) *Room_Update_Call {
	return &Room_Update_Call{Call: _e.mock.On("Update", ctx, roomID, req)}
}

func (_c *Room_Update_Call) Run(run func(ctx context.Context, roomID string, req entity.RoomUpdateRequest)) *Room_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(entity.RoomUpdateRequest))
	})
	return _c
}

func (_c *Room_Update_Call) Return(_a0 model.Room, _a1 error) *Room_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Room_Update_Call) RunAndReturn(run func(context.Context, string, entity.RoomUpdateRequest) (model.Room, error)) *Room_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewRoom creates a new instance of Room. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoom(t interface {
	mock.TestingT
	Cleanup(func())
}) *Room {
	mock := &Room{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
