// Code generated by mockery. DO NOT EDIT.

package mockValidator

import mock "github.com/stretchr/testify/mock"

// Validator is an autogenerated mock type for the IValidator type
type Validator struct {
	mock.Mock
}

type Validator_Expecter struct {
	mock *mock.Mock
}

func (_m *Validator) EXPECT() *Validator_Expecter {
	return &Validator_Expecter{mock: &_m.Mock}
}

// Struct provides a mock function with given fields: s
func (_m *Validator) Struct(s interface{}) error {
	ret := _m.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Struct")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}) error); ok {
		r0 = rf(s)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validator_Struct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Struct'
type Validator_Struct_Call struct {
	*mock.Call
}

// Struct is a helper method to define mock.On call
//   - s interface{}
func (_e *Validator_Expecter) Struct(s interface{}) *Validator_Struct_Call {
	return &Validator_Struct_Call{Call: _e.mock.On("Struct", s)}
}

func (_c *Validator_Struct_Call) Run(run func(s interface{})) *Validator_Struct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *Validator_Struct_Call) Return(_a0 error) *Validator_Struct_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_Struct_Call) RunAndReturn(run func(interface{}) error) *Validator_Struct_Call {
	_c.Call.Return(run)
	return _c
}

// Var provides a mock function with given fields: field, tag
func (_m *Validator) Var(field interface{}, tag string) error {
	ret := _m.Called(field, tag)

	if len(ret) == 0 {
		panic("no return value specified for Var")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, string) error); ok {
		r0 = rf(field, tag)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validator_Var_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Var'
type Validator_Var_Call struct {
	*mock.Call
}

// Var is a helper method to define mock.On call
//   - field interface{}
//   - tag string
func (_e *Validator_Expecter) Var(field interface{}, tag interface{}) *Validator_Var_Call {
	return &Validator_Var_Call{Call: _e.mock.On("Var", field, tag)}
}

func (_c *Validator_Var_Call) Run(run func(field interface{}, tag string)) *Validator_Var_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].(string))
	})
	return _c
}

func (_c *Validator_Var_Call) Return(_a0 error) *Validator_Var_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Validator_Var_Call) RunAndReturn(run func(interface{}, string) error) *Validator_Var_Call {
	_c.Call.Return(run)
	return _c
}

// NewValidator creates a new instance of Validator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *Validator {
	mock := &Validator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
