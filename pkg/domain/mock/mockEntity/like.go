// Code generated by mockery. DO NOT EDIT.

package mockEntity

import (
	context "context"

	entity "github.com/abc-valera/netsly-api-golang/pkg/domain/entity"
	mock "github.com/stretchr/testify/mock"

	model "github.com/abc-valera/netsly-api-golang/pkg/domain/persistence/model"
)

// Like is an autogenerated mock type for the ILike type
type Like struct {
	mock.Mock
}

type Like_Expecter struct {
	mock *mock.Mock
}

func (_m *Like) EXPECT() *Like_Expecter {
	return &Like_Expecter{mock: &_m.Mock}
}

// CountByJokeID provides a mock function with given fields: ctx, jokeID
func (_m *Like) CountByJokeID(ctx context.Context, jokeID string) (int, error) {
	ret := _m.Called(ctx, jokeID)

	if len(ret) == 0 {
		panic("no return value specified for CountByJokeID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, jokeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, jokeID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, jokeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Like_CountByJokeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountByJokeID'
type Like_CountByJokeID_Call struct {
	*mock.Call
}

// CountByJokeID is a helper method to define mock.On call
//   - ctx context.Context
//   - jokeID string
func (_e *Like_Expecter) CountByJokeID(ctx interface{}, jokeID interface{}) *Like_CountByJokeID_Call {
	return &Like_CountByJokeID_Call{Call: _e.mock.On("CountByJokeID", ctx, jokeID)}
}

func (_c *Like_CountByJokeID_Call) Run(run func(ctx context.Context, jokeID string)) *Like_CountByJokeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Like_CountByJokeID_Call) Return(_a0 int, _a1 error) *Like_CountByJokeID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Like_CountByJokeID_Call) RunAndReturn(run func(context.Context, string) (int, error)) *Like_CountByJokeID_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, req
func (_m *Like) Create(ctx context.Context, req entity.LikeCreateRequest) (model.Like, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 model.Like
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.LikeCreateRequest) (model.Like, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.LikeCreateRequest) model.Like); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(model.Like)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.LikeCreateRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Like_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type Like_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - req entity.LikeCreateRequest
func (_e *Like_Expecter) Create(ctx interface{}, req interface{}) *Like_Create_Call {
	return &Like_Create_Call{Call: _e.mock.On("Create", ctx, req)}
}

func (_c *Like_Create_Call) Run(run func(ctx context.Context, req entity.LikeCreateRequest)) *Like_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.LikeCreateRequest))
	})
	return _c
}

func (_c *Like_Create_Call) Return(_a0 model.Like, _a1 error) *Like_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Like_Create_Call) RunAndReturn(run func(context.Context, entity.LikeCreateRequest) (model.Like, error)) *Like_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, req
func (_m *Like) Delete(ctx context.Context, req entity.DeleteLikeRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.DeleteLikeRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Like_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Like_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - req entity.DeleteLikeRequest
func (_e *Like_Expecter) Delete(ctx interface{}, req interface{}) *Like_Delete_Call {
	return &Like_Delete_Call{Call: _e.mock.On("Delete", ctx, req)}
}

func (_c *Like_Delete_Call) Run(run func(ctx context.Context, req entity.DeleteLikeRequest)) *Like_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.DeleteLikeRequest))
	})
	return _c
}

func (_c *Like_Delete_Call) Return(_a0 error) *Like_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Like_Delete_Call) RunAndReturn(run func(context.Context, entity.DeleteLikeRequest) error) *Like_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllByJokeID provides a mock function with given fields: ctx, jokeID
func (_m *Like) GetAllByJokeID(ctx context.Context, jokeID string) (model.Likes, error) {
	ret := _m.Called(ctx, jokeID)

	if len(ret) == 0 {
		panic("no return value specified for GetAllByJokeID")
	}

	var r0 model.Likes
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Likes, error)); ok {
		return rf(ctx, jokeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Likes); ok {
		r0 = rf(ctx, jokeID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Likes)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, jokeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Like_GetAllByJokeID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllByJokeID'
type Like_GetAllByJokeID_Call struct {
	*mock.Call
}

// GetAllByJokeID is a helper method to define mock.On call
//   - ctx context.Context
//   - jokeID string
func (_e *Like_Expecter) GetAllByJokeID(ctx interface{}, jokeID interface{}) *Like_GetAllByJokeID_Call {
	return &Like_GetAllByJokeID_Call{Call: _e.mock.On("GetAllByJokeID", ctx, jokeID)}
}

func (_c *Like_GetAllByJokeID_Call) Run(run func(ctx context.Context, jokeID string)) *Like_GetAllByJokeID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Like_GetAllByJokeID_Call) Return(_a0 model.Likes, _a1 error) *Like_GetAllByJokeID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Like_GetAllByJokeID_Call) RunAndReturn(run func(context.Context, string) (model.Likes, error)) *Like_GetAllByJokeID_Call {
	_c.Call.Return(run)
	return _c
}

// NewLike creates a new instance of Like. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLike(t interface {
	mock.TestingT
	Cleanup(func())
}) *Like {
	mock := &Like{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
